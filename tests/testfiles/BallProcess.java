/*
 * This file is automatically generated from Supremica
 * Supremica version: 200404161407
 * This file was generated at: Apr 16, 2004 5:02:40 PM
 */
import org.supremica.softplc.RunTime.DigitalIODriver;
/**
 * Class BallProcess was automatically generated from
 * Supremica.
 *
 * The class is depending on the interface
 * org.supremica.softplc.RunTime.DigitalIODriver and
 * on the class DigitalIODriverFactory. The latter
 * should be provided by the user. This class should
 * create objects that implements the DigitalIODriver
 * interface. The implementing class is by nature
 * applicaton specific.
 *
 * The following automata are synchronized.
 * The number is the index used in this file
 * to identify the automata.
 *   Automaton 0: "Progress spec: Manual or automatic mode"
 *   Automaton 1: "Progress spec: Gatekeeper (gk)"
 *   Automaton 2: "Progress spec: Elevate and measure (em)"
 *   Automaton 3: "Progress spec: Measure station - measure"
 *   Automaton 4: "Progress spec: Measure station - putter"
 *   Automaton 5: "Progress spec: Elevate and sort (es)"
 *   Automaton 6: "Interaction spec: GK and EM"
 *   Automaton 7: "Interaction spec: Measure station"
 *   Automaton 8: "Interaction spec: EM and ES"
 *   Automaton 9: "Interaction spec: ES and lower buffer"
 *   Automaton 10: "Interaction spec: ES and upper buffer"
 *   Automaton 11: "Plant: Manual button"
 *   Automaton 12: "Plant: Automatic button"
 *   Automaton 13: "Plant: Gatekeeper - In"
 *   Automaton 14: "Plant: Gatekeeper - Out"
 *   Automaton 15: "Plant: Elevator - Measure"
 *   Automaton 16: "Plant: Measure - Putter"
 *   Automaton 17: "Plant: Disable events"
 *   Automaton 18: "Extended Plant: GK and EM"
 *   Automaton 19: "Variable: size of ball"
 *   Automaton 20: "Timer: em.timer.before_up"
 *   Automaton 21: "Timer: em.timer.before_ballcheck"
 *   Automaton 22: "Timer: em.timer.measure"
 *   Automaton 23: "Timer: em.timer.before_put"
 *   Automaton 24: "Timer: em.timer.putting"
 *   Automaton 25: "Timer: es.timer.before_up"
 *   Automaton 26: "Timer: es.timer.before_ballcheck"
 *   Automaton 27: "Timer: es.timer.before_deput"
 *
 * Event indices and the corresponding event label
 *   Event 0: "arm.allocate_lower_buffer" controllable
 *   Event 1: "arm.allocate_upper_buffer" controllable
 *   Event 2: "arm.lower_lower_buffer" controllable
 *   Event 3: "arm.lower_upper_buffer" controllable
 *   Event 4: "arm.raise_lower_buffer" controllable
 *   Event 5: "arm.raise_upper_buffer" controllable
 *   Event 6: "arm.release_lower_buffer" controllable
 *   Event 7: "arm.release_upper_buffer" controllable
 *   Event 8: "button.automatic.pressed" uncontrollable
 *   Event 9: "button.automatic.released" uncontrollable
 *   Event 10: "button.manual.pressed" uncontrollable
 *   Event 11: "button.manual.released" uncontrollable
 *   Event 12: "em.ball_out_of_measure_station" uncontrollable
 *   Event 13: "em.elevator.allocate_station" controllable
 *   Event 14: "em.elevator.release_station" controllable
 *   Event 15: "em.enter_ball" controllable
 *   Event 16: "em.go_down" controllable
 *   Event 17: "em.go_up" controllable
 *   Event 18: "em.has_ball" uncontrollable
 *   Event 19: "em.is_down" uncontrollable
 *   Event 20: "em.is_up" uncontrollable
 *   Event 21: "em.large_ball" uncontrollable
 *   Event 22: "em.measure.allocate_station" controllable
 *   Event 23: "em.measure.finished" uncontrollable
 *   Event 24: "em.measure.go_in" controllable
 *   Event 25: "em.measure.go_out" controllable
 *   Event 26: "em.measure.has_ball" uncontrollable
 *   Event 27: "em.measure.has_no_ball" uncontrollable
 *   Event 28: "em.measure.release_station" controllable
 *   Event 29: "em.measure.start" controllable
 *   Event 30: "em.putter.allocate_station" controllable
 *   Event 31: "em.putter.finished" uncontrollable
 *   Event 32: "em.putter.go_in" controllable
 *   Event 33: "em.putter.go_out" controllable
 *   Event 34: "em.putter.is_in" controllable
 *   Event 35: "em.putter.is_out" controllable
 *   Event 36: "em.putter.release_station" controllable
 *   Event 37: "em.putter.start" controllable
 *   Event 38: "em.small_ball" uncontrollable
 *   Event 39: "em.timer.before_ballcheck.start" controllable
 *   Event 40: "em.timer.before_ballcheck.timeout" uncontrollable
 *   Event 41: "em.timer.before_put.start" controllable
 *   Event 42: "em.timer.before_put.timeout" uncontrollable
 *   Event 43: "em.timer.before_up.start" controllable
 *   Event 44: "em.timer.before_up.timeout" uncontrollable
 *   Event 45: "em.timer.measure.start" controllable
 *   Event 46: "em.timer.measure.timeout" uncontrollable
 *   Event 47: "em.timer.putting.start" controllable
 *   Event 48: "em.timer.putting.timeout" uncontrollable
 *   Event 49: "es.allocate_lower_buffer" controllable
 *   Event 50: "es.allocate_upper_buffer" controllable
 *   Event 51: "es.ball_lower_level" uncontrollable
 *   Event 52: "es.ball_upper_level" uncontrollable
 *   Event 53: "es.deput_ball_lower" controllable
 *   Event 54: "es.deput_ball_upper" controllable
 *   Event 55: "es.enter_ball" controllable
 *   Event 56: "es.go_down" controllable
 *   Event 57: "es.got_ball" controllable
 *   Event 58: "es.is_lower" uncontrollable
 *   Event 59: "es.is_not_down" controllable
 *   Event 60: "es.is_upper" uncontrollable
 *   Event 61: "es.lower_putter.go_in" controllable
 *   Event 62: "es.lower_putter.go_out" controllable
 *   Event 63: "es.no_ball_lower_level" uncontrollable
 *   Event 64: "es.no_ball_upper_level" uncontrollable
 *   Event 65: "es.put_ball_lower" controllable
 *   Event 66: "es.put_ball_upper" controllable
 *   Event 67: "es.release_lower_buffer" controllable
 *   Event 68: "es.release_upper_buffer" controllable
 *   Event 69: "es.timer.before_ballcheck.start" controllable
 *   Event 70: "es.timer.before_ballcheck.timeout" uncontrollable
 *   Event 71: "es.timer.before_deput.start" controllable
 *   Event 72: "es.timer.before_deput.timeout" uncontrollable
 *   Event 73: "es.timer.before_up.start" controllable
 *   Event 74: "es.timer.before_up.timeout" uncontrollable
 *   Event 75: "es.up_lower" controllable
 *   Event 76: "es.up_upper" controllable
 *   Event 77: "es.upper_putter.go_in" controllable
 *   Event 78: "es.upper_putter.go_out" controllable
 *   Event 79: "gk.ball_out_of_gatekeeper" uncontrollable
 *   Event 80: "gk.enter_ball" controllable
 *   Event 81: "gk.has_ball" uncontrollable
 *   Event 82: "gk.in.go_in" controllable
 *   Event 83: "gk.in.go_out" controllable
 *   Event 84: "gk.in.is_in" controllable
 *   Event 85: "gk.in.is_out" controllable
 *   Event 86: "gk.out.go_in" controllable
 *   Event 87: "gk.out.go_out" controllable
 *   Event 88: "gk.out.is_in" controllable
 *   Event 89: "gk.out.is_out" controllable
 *   Event 90: "gk.release_ball" controllable
 *   Event 91: "is_large_ball" controllable
 *   Event 92: "is_small_ball" controllable
 *   Event 93: "mode.automatic" controllable
 *   Event 94: "mode.manual" controllable
 *
 * Input signal ports and the corresponding label
 *   Input port 17: "ArmHemma"
 *   Input port 20: "ArmVan1"
 *   Input port 21: "ArmVan2"
 *   Input port 23: "Autostart"
 *   Input port 7: "HissNere"
 *   Input port 11: "HissVan1"
 *   Input port 14: "HissVan2"
 *   Input port 22: "KulaFast"
 *   Input port 10: "KulaHiss"
 *   Input port 2: "KulaMatlyft"
 *   Input port 4: "KulaMatstation"
 *   Input port 0: "KulaPortvakt"
 *   Input port 12: "KulaVan1"
 *   Input port 15: "KulaVan2"
 *   Input port 26: "LarmKvittering"
 *   Input port 6: "LitenKula"
 *   Input port 24: "ManuellStart"
 *   Input port 1: "MatlyftNere"
 *   Input port 3: "MatlyftUppe"
 *   Input port 25: "NodStopp"
 *   Input port 13: "PlockaVan1"
 *   Input port 16: "PlockaVan2"
 *   Input port 5: "StorKula"
 *
 * Output signal ports and the corresponding label
 *   Output port 0: "InPortvakt"
 *   Output port 10: "LyftVan1"
 *   Output port 12: "LyftVan2"
 *   Output port 4: "Mat"
 *   Output port 16: "Sug"
 *   Output port 13: "UppArmVan1"
 *   Output port 14: "UppArmVan2"
 *   Output port 5: "UppHissVan1"
 *   Output port 6: "UppHissVan2"
 *   Output port 2: "UppMatlyft"
 *   Output port 3: "UrMatning"
 *   Output port 1: "UrPortvakt"
 *   Output port 7: "UtVan1"
 *   Output port 11: "UtVan2"
 *   Output port 15: "VridArmHoger"
 *
 * Timer indices and the corresponding label
 *   Timer 0: "em.timer.before_ballcheck"
 *   Timer 1: "em.timer.before_put"
 *   Timer 2: "em.timer.before_up"
 *   Timer 3: "em.timer.measure"
 *   Timer 4: "em.timer.putting"
 *   Timer 5: "es.timer.before_ballcheck"
 *   Timer 6: "es.timer.before_deput"
 *   Timer 7: "es.timer.before_up"
 */
public class BallProcess {
	/**
	 * Class Timer is a simple countdown timer.
	 * Start the timer like this:
	 * <code>myTimer.start()</code>
	 * It has timed out if:
	 * <code>myTimer.hasTimedOut()</code>
	 * returns true.
	 */
	static class Timer {
		int delay;
		Thread timerThread;
		public Timer(int delay) { // In ms
			this.delay = delay;
		}
		public void start() {
			timerThread = new Thread(new Runnable() {
				public void run() {
					try {
						Thread.sleep(Timer.this.delay);
					} catch (InterruptedException e) {}
				}
			});
			timerThread.start();
		}
		public boolean hasTimedOut() {
			return timerThread == null || !timerThread.isAlive();
		}
	}

	static final int NO_EVENT_IS_SELECTED = -1;
	static final int NR_OF_EVENTS = 95;
	static final int NR_OF_AUTOMATA = 28;
	static final int NR_OF_TIMERS = 8;

	/**
	 * Preferred scan cycle time in milliseconds.
	 * The program executes continously if the real
	 * scan cycle time is larger than this value.
	 */
	static final int PREFERRED_SCAN_CYCLE_TIME = 0;

	/**
	 * The enabled event that comes first in this array is executed.
	 * The uncontrollable events has the highest priority
	 */
	static final int[] EVENT_PRIORITY_QUEUE = {8, 9, 10, 11, 12, 18, 19, 20, 21, 23, 26, 27, 31, 38, 40, 42, 44, 46, 48, 51, 52, 58, 60, 63, 64, 70, 72, 74, 79, 81, 0, 1, 2, 3, 4, 5, 6, 7, 13, 14, 15, 16, 17, 22, 24, 25, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 41, 43, 45, 47, 49, 50, 53, 54, 55, 56, 57, 59, 61, 62, 65, 66, 67, 68, 69, 71, 73, 75, 76, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94};

	/**
	 * A map from event index to event label. Is not used by default.
	 */
	static final String[] EVENT_LABELS = {"arm.allocate_lower_buffer",
			"arm.allocate_upper_buffer",
			"arm.lower_lower_buffer",
			"arm.lower_upper_buffer",
			"arm.raise_lower_buffer",
			"arm.raise_upper_buffer",
			"arm.release_lower_buffer",
			"arm.release_upper_buffer",
			"button.automatic.pressed",
			"button.automatic.released",
			"button.manual.pressed",
			"button.manual.released",
			"em.ball_out_of_measure_station",
			"em.elevator.allocate_station",
			"em.elevator.release_station",
			"em.enter_ball",
			"em.go_down",
			"em.go_up",
			"em.has_ball",
			"em.is_down",
			"em.is_up",
			"em.large_ball",
			"em.measure.allocate_station",
			"em.measure.finished",
			"em.measure.go_in",
			"em.measure.go_out",
			"em.measure.has_ball",
			"em.measure.has_no_ball",
			"em.measure.release_station",
			"em.measure.start",
			"em.putter.allocate_station",
			"em.putter.finished",
			"em.putter.go_in",
			"em.putter.go_out",
			"em.putter.is_in",
			"em.putter.is_out",
			"em.putter.release_station",
			"em.putter.start",
			"em.small_ball",
			"em.timer.before_ballcheck.start",
			"em.timer.before_ballcheck.timeout",
			"em.timer.before_put.start",
			"em.timer.before_put.timeout",
			"em.timer.before_up.start",
			"em.timer.before_up.timeout",
			"em.timer.measure.start",
			"em.timer.measure.timeout",
			"em.timer.putting.start",
			"em.timer.putting.timeout",
			"es.allocate_lower_buffer",
			"es.allocate_upper_buffer",
			"es.ball_lower_level",
			"es.ball_upper_level",
			"es.deput_ball_lower",
			"es.deput_ball_upper",
			"es.enter_ball",
			"es.go_down",
			"es.got_ball",
			"es.is_lower",
			"es.is_not_down",
			"es.is_upper",
			"es.lower_putter.go_in",
			"es.lower_putter.go_out",
			"es.no_ball_lower_level",
			"es.no_ball_upper_level",
			"es.put_ball_lower",
			"es.put_ball_upper",
			"es.release_lower_buffer",
			"es.release_upper_buffer",
			"es.timer.before_ballcheck.start",
			"es.timer.before_ballcheck.timeout",
			"es.timer.before_deput.start",
			"es.timer.before_deput.timeout",
			"es.timer.before_up.start",
			"es.timer.before_up.timeout",
			"es.up_lower",
			"es.up_upper",
			"es.upper_putter.go_in",
			"es.upper_putter.go_out",
			"gk.ball_out_of_gatekeeper",
			"gk.enter_ball",
			"gk.has_ball",
			"gk.in.go_in",
			"gk.in.go_out",
			"gk.in.is_in",
			"gk.in.is_out",
			"gk.out.go_in",
			"gk.out.go_out",
			"gk.out.is_in",
			"gk.out.is_out",
			"gk.release_ball",
			"is_large_ball",
			"is_small_ball",
			"mode.automatic",
			"mode.manual"};

	/**
	 * This vector holds the current state.
	 * The indices corresponds to automata.
	 * The value of an element corresponds
	 * to the state of that automaton. It is
	 * initiated to its' initial states.
	 */
	int[] currentState = {0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0};

	/**
	 * This array holds the last read input signal values.
	 */
	boolean[] inputVariables;

	/**
	 * This vector holds the output signal values to be written.
	 */
	boolean[] outputVariables;

	/**
	 * This object handles IO. The user (you) should
	 * provide a class that implements the interface
	 * org.supremica.softplc.RunTime.DigitalIODriver
	 */
	DigitalIODriver digitalIODriver;

	final Timer[] timers = {new Timer(1000),
			new Timer(1000),
			new Timer(1000),
			new Timer(1000),
			new Timer(2000),
			new Timer(1000),
			new Timer(2000),
			new Timer(1000)};

	/**
	 * Constructor
	 */
	BallProcess() {
		/*
		 * DigitalIODriverFactory is a class that
		 * should be implemented by the user (you).
		 * The class should have a public static function
		 * that creates an object which implements the
		 * org.supremica.softplc.RunTime.DigitalIODriver
		 * interface.
		 */
		digitalIODriver = DigitalIODriverFactory.createDigitalIODriver();
		inputVariables = new boolean[digitalIODriver.getNrOfSignalsIn()];
		outputVariables = new boolean[digitalIODriver.getNrOfSignalsOut()];
	}

	/**
	 * Checks if the event is enabled in the
	 * current state of the automata
	 * @param eventIndex
	 * @return <code>true</code> if the event is enabled.
	 *         <code>false</code> otherwise.
	 */
	boolean eventIsEnabledInCurrentState(int eventIndex) {
		switch (eventIndex) {
		case 0: // Event "arm.allocate_lower_buffer"
			return (currentState[9] == 0)
					&& (false /* Automaton 17 */);
		case 1: // Event "arm.allocate_upper_buffer"
			return (currentState[10] == 0)
					&& (false /* Automaton 17 */);
		case 2: // Event "arm.lower_lower_buffer"
			return (currentState[9] == 1);
		case 3: // Event "arm.lower_upper_buffer"
			return (currentState[10] == 1);
		case 4: // Event "arm.raise_lower_buffer"
			return (currentState[9] == 1);
		case 5: // Event "arm.raise_upper_buffer"
			return (currentState[10] == 1);
		case 6: // Event "arm.release_lower_buffer"
			return (currentState[9] == 1);
		case 7: // Event "arm.release_upper_buffer"
			return (currentState[10] == 1);
		case 8: // Event "button.automatic.pressed"
			return (currentState[12] == 0)
					&& (false /* Automaton 17 */);
		case 9: // Event "button.automatic.released"
			return (currentState[12] == 2);
		case 10: // Event "button.manual.pressed"
			return (currentState[11] == 0);
		case 11: // Event "button.manual.released"
			return (currentState[11] == 2);
		case 12: // Event "em.ball_out_of_measure_station"
			return (currentState[2] == 3);
		case 13: // Event "em.elevator.allocate_station"
			return (currentState[2] == 10 || currentState[2] == 6)
					&& (currentState[7] == 0);
		case 14: // Event "em.elevator.release_station"
			return (currentState[2] == 13 || currentState[2] == 7)
					&& (currentState[7] == 3);
		case 15: // Event "em.enter_ball"
			return (currentState[2] == 0)
					&& (currentState[6] == 1);
		case 16: // Event "em.go_down"
			return (currentState[2] == 5)
					&& (currentState[7] == 3)
					&& (currentState[15] == 0 || currentState[15] == 1);
		case 17: // Event "em.go_up"
			return (currentState[2] == 9)
					&& (currentState[7] == 3)
					&& (currentState[15] == 1 || currentState[15] == 0);
		case 18: // Event "em.has_ball"
			return (currentState[2] == 1)
					&& (currentState[6] == 4)
					&& (currentState[18] == 1);
		case 19: // Event "em.is_down"
			return (currentState[6] == 2)
					&& (currentState[15] == 0);
		case 20: // Event "em.is_up"
			return (currentState[2] == 11)
					&& (currentState[6] == 6)
					&& (currentState[15] == 1);
		case 21: // Event "em.large_ball"
			return (currentState[3] == 5)
					&& (currentState[19] == 0 || currentState[19] == 2);
		case 22: // Event "em.measure.allocate_station"
			return (currentState[3] == 1)
					&& (currentState[7] == 0);
		case 23: // Event "em.measure.finished"
			return (currentState[2] == 18)
					&& (currentState[3] == 8);
		case 24: // Event "em.measure.go_in"
			return (currentState[3] == 6)
					&& (currentState[7] == 1);
		case 25: // Event "em.measure.go_out"
			return (currentState[3] == 2)
					&& (currentState[7] == 1);
		case 26: // Event "em.measure.has_ball"
			return (currentState[2] == 15)
					&& (currentState[8] == 0);
		case 27: // Event "em.measure.has_no_ball"
			return (currentState[2] == 15);
		case 28: // Event "em.measure.release_station"
			return (currentState[3] == 7)
					&& (currentState[7] == 1);
		case 29: // Event "em.measure.start"
			return (currentState[2] == 16)
					&& (currentState[3] == 0);
		case 30: // Event "em.putter.allocate_station"
			return (currentState[4] == 1)
					&& (currentState[7] == 0);
		case 31: // Event "em.putter.finished"
			return (currentState[2] == 4)
					&& (currentState[4] == 7);
		case 32: // Event "em.putter.go_in"
			return (currentState[4] == 3)
					&& (currentState[7] == 2)
					&& (currentState[16] == 0 || currentState[16] == 1);
		case 33: // Event "em.putter.go_out"
			return (currentState[4] == 2)
					&& (currentState[7] == 2)
					&& (currentState[16] == 1 || currentState[16] == 0);
		case 34: // Event "em.putter.is_in"
			return (currentState[16] == 0)
					&& (false /* Automaton 17 */);
		case 35: // Event "em.putter.is_out"
			return (currentState[16] == 1)
					&& (false /* Automaton 17 */);
		case 36: // Event "em.putter.release_station"
			return (currentState[4] == 6)
					&& (currentState[7] == 2);
		case 37: // Event "em.putter.start"
			return (currentState[2] == 17)
					&& (currentState[4] == 0);
		case 38: // Event "em.small_ball"
			return (currentState[3] == 5)
					&& (currentState[19] == 0 || currentState[19] == 1);
		case 39: // Event "em.timer.before_ballcheck.start"
			return (currentState[2] == 12)
					&& (currentState[21] == 0 || currentState[21] == 1);
		case 40: // Event "em.timer.before_ballcheck.timeout"
			return (currentState[2] == 14)
					&& (currentState[21] == 1);
		case 41: // Event "em.timer.before_put.start"
			return (false /* Automaton 2 */)
					&& (currentState[23] == 0 || currentState[23] == 1);
		case 42: // Event "em.timer.before_put.timeout"
			return (false /* Automaton 2 */)
					&& (currentState[23] == 1);
		case 43: // Event "em.timer.before_up.start"
			return (currentState[2] == 2)
					&& (currentState[20] == 0 || currentState[20] == 1);
		case 44: // Event "em.timer.before_up.timeout"
			return (currentState[2] == 8)
					&& (currentState[20] == 1);
		case 45: // Event "em.timer.measure.start"
			return (currentState[3] == 3)
					&& (currentState[22] == 0 || currentState[22] == 1);
		case 46: // Event "em.timer.measure.timeout"
			return (currentState[3] == 4)
					&& (currentState[22] == 1);
		case 47: // Event "em.timer.putting.start"
			return (currentState[4] == 4)
					&& (currentState[24] == 0 || currentState[24] == 1);
		case 48: // Event "em.timer.putting.timeout"
			return (currentState[4] == 5)
					&& (currentState[24] == 1);
		case 49: // Event "es.allocate_lower_buffer"
			return (currentState[5] == 20)
					&& (currentState[9] == 0);
		case 50: // Event "es.allocate_upper_buffer"
			return (currentState[5] == 23)
					&& (currentState[10] == 0);
		case 51: // Event "es.ball_lower_level"
			return (currentState[5] == 21);
		case 52: // Event "es.ball_upper_level"
			return (currentState[5] == 24);
		case 53: // Event "es.deput_ball_lower"
			return (currentState[9] == 2);
		case 54: // Event "es.deput_ball_upper"
			return (currentState[10] == 2);
		case 55: // Event "es.enter_ball"
			return (currentState[5] == 0)
					&& (currentState[8] == 1);
		case 56: // Event "es.go_down"
			return (currentState[5] == 9);
		case 57: // Event "es.got_ball"
			return (currentState[5] == 1);
		case 58: // Event "es.is_lower"
			return (currentState[5] == 14);
		case 59: // Event "es.is_not_down"
			return (false /* Automaton 5 */);
		case 60: // Event "es.is_upper"
			return (currentState[5] == 15);
		case 61: // Event "es.lower_putter.go_in"
			return (currentState[5] == 5);
		case 62: // Event "es.lower_putter.go_out"
			return (currentState[5] == 22);
		case 63: // Event "es.no_ball_lower_level"
			return (currentState[5] == 21);
		case 64: // Event "es.no_ball_upper_level"
			return (currentState[5] == 24);
		case 65: // Event "es.put_ball_lower"
			return (currentState[9] == 2);
		case 66: // Event "es.put_ball_upper"
			return (currentState[10] == 2);
		case 67: // Event "es.release_lower_buffer"
			return (currentState[5] == 6)
					&& (currentState[9] == 2);
		case 68: // Event "es.release_upper_buffer"
			return (currentState[5] == 8)
					&& (currentState[10] == 2);
		case 69: // Event "es.timer.before_ballcheck.start"
			return (currentState[5] == 16 || currentState[5] == 17)
					&& (currentState[26] == 0 || currentState[26] == 1);
		case 70: // Event "es.timer.before_ballcheck.timeout"
			return (currentState[5] == 18 || currentState[5] == 19)
					&& (currentState[26] == 1);
		case 71: // Event "es.timer.before_deput.start"
			return (currentState[5] == 26 || currentState[5] == 27)
					&& (currentState[27] == 0 || currentState[27] == 1);
		case 72: // Event "es.timer.before_deput.timeout"
			return (currentState[5] == 3 || currentState[5] == 4)
					&& (currentState[27] == 1);
		case 73: // Event "es.timer.before_up.start"
			return (currentState[5] == 2)
					&& (currentState[25] == 0 || currentState[25] == 1);
		case 74: // Event "es.timer.before_up.timeout"
			return (currentState[5] == 10)
					&& (currentState[25] == 1);
		case 75: // Event "es.up_lower"
			return (currentState[5] == 12);
		case 76: // Event "es.up_upper"
			return (currentState[5] == 13);
		case 77: // Event "es.upper_putter.go_in"
			return (currentState[5] == 7);
		case 78: // Event "es.upper_putter.go_out"
			return (currentState[5] == 25);
		case 79: // Event "gk.ball_out_of_gatekeeper"
			return (currentState[1] == 6)
					&& (currentState[6] == 5);
		case 80: // Event "gk.enter_ball"
			return (currentState[0] == 1 || currentState[0] == 2 || currentState[0] == 3 || currentState[0] == 4 || currentState[0] == 5 || currentState[0] == 6 || currentState[0] == 7)
					&& (currentState[1] == 0);
		case 81: // Event "gk.has_ball"
			return (currentState[1] == 1)
					&& (currentState[6] == 0);
		case 82: // Event "gk.in.go_in"
			return (currentState[1] == 3)
					&& (currentState[13] == 0 || currentState[13] == 1);
		case 83: // Event "gk.in.go_out"
			return (currentState[1] == 2)
					&& (currentState[13] == 1 || currentState[13] == 0);
		case 84: // Event "gk.in.is_in"
			return (currentState[13] == 0)
					&& (false /* Automaton 17 */);
		case 85: // Event "gk.in.is_out"
			return (currentState[13] == 1)
					&& (false /* Automaton 17 */);
		case 86: // Event "gk.out.go_in"
			return (currentState[1] == 7)
					&& (currentState[14] == 0 || currentState[14] == 1);
		case 87: // Event "gk.out.go_out"
			return (currentState[1] == 5)
					&& (currentState[14] == 1 || currentState[14] == 0)
					&& (currentState[18] == 0);
		case 88: // Event "gk.out.is_in"
			return (currentState[14] == 0)
					&& (false /* Automaton 17 */);
		case 89: // Event "gk.out.is_out"
			return (currentState[14] == 1)
					&& (false /* Automaton 17 */);
		case 90: // Event "gk.release_ball"
			return (currentState[1] == 4)
					&& (currentState[6] == 3);
		case 91: // Event "is_large_ball"
			return (currentState[5] == 11)
					&& (currentState[19] == 1 || currentState[19] == 0);
		case 92: // Event "is_small_ball"
			return (currentState[5] == 11)
					&& (currentState[19] == 2 || currentState[19] == 0);
		case 93: // Event "mode.automatic"
			return (currentState[0] == 0 || currentState[0] == 1 || currentState[0] == 2 || currentState[0] == 3 || currentState[0] == 4 || currentState[0] == 5 || currentState[0] == 6 || currentState[0] == 7)
					&& (currentState[12] == 1);
		case 94: // Event "mode.manual"
			return (currentState[0] == 0 || currentState[0] == 1 || currentState[0] == 2 || currentState[0] == 3 || currentState[0] == 4 || currentState[0] == 5 || currentState[0] == 6 || currentState[0] == 7)
					&& (currentState[11] == 1);
		default:
			// Should never get here
			return false;
		}
	}

	/**
	 * Checks if the event is enabled by conditions
	 * on input variable values.
	 * @param eventIndex
	 * @return <code>true</code> if the event is enabled.
	 *         <code>false</code> otherwise.
	 */
	boolean eventIsEnabledByInputVariables(int eventIndex) {
		/*
		 * All external conditions are true by default.
		 * Example:
		 * case 8: // Event "product_arrival"
		 *   return inputVariables[5];  // Sensor on port 5
		 */
		switch (eventIndex) {
		case 8: // Event "button.automatic.pressed"
			return !inputVariables[23];
		case 9: // Event "button.automatic.released"
			return inputVariables[23];
		case 10: // Event "button.manual.pressed"
			return !inputVariables[24];
		case 11: // Event "button.manual.released"
			return inputVariables[24];
		case 18: // Event "em.has_ball"
			return inputVariables[2];
		case 19: // Event "em.is_down"
			return inputVariables[1];
		case 20: // Event "em.is_up"
			return inputVariables[3];
		case 21: // Event "em.large_ball"
			return inputVariables[5];
		case 26: // Event "em.measure.has_ball"
			return inputVariables[4];
		case 27: // Event "em.measure.has_no_ball"
			return !inputVariables[4];
		case 38: // Event "em.small_ball"
			return inputVariables[6];
		case 51: // Event "es.ball_lower_level"
			return inputVariables[12];
		case 52: // Event "es.ball_upper_level"
			return inputVariables[15];
		case 57: // Event "es.got_ball"
			return inputVariables[10];
		case 58: // Event "es.is_lower"
			return inputVariables[11];
		case 60: // Event "es.is_upper"
			return inputVariables[14];
		case 63: // Event "es.no_ball_lower_level"
			return !inputVariables[12];
		case 64: // Event "es.no_ball_upper_level"
			return !inputVariables[15];
		case 81: // Event "gk.has_ball"
			return inputVariables[0];
		default:
			return true;
		}
	}

	/**
	 * Checks if the event is enabled by timers.
	 * @param eventIndex
	 * @return <code>true</code> if the event is enabled.
	 *         <code>false</code> otherwise.
	 */
	boolean eventIsEnabledByTimers(int eventIndex) {
		/*
		 * All timer conditions are true by default.
		 * Example:
		 * case 5: // Event "mytimer_timeout"
		 *   return timers[2].hasTimedOut();  // Timer "mytimer"
		 */
		switch (eventIndex) {
		case 40: // Event "em.timer.before_ballcheck.timeout"
			return timers[0].hasTimedOut(); // Timer "em.timer.before_ballcheck"
		case 42: // Event "em.timer.before_put.timeout"
			return timers[1].hasTimedOut(); // Timer "em.timer.before_put"
		case 44: // Event "em.timer.before_up.timeout"
			return timers[2].hasTimedOut(); // Timer "em.timer.before_up"
		case 46: // Event "em.timer.measure.timeout"
			return timers[3].hasTimedOut(); // Timer "em.timer.measure"
		case 48: // Event "em.timer.putting.timeout"
			return timers[4].hasTimedOut(); // Timer "em.timer.putting"
		case 70: // Event "es.timer.before_ballcheck.timeout"
			return timers[5].hasTimedOut(); // Timer "es.timer.before_ballcheck"
		case 72: // Event "es.timer.before_deput.timeout"
			return timers[6].hasTimedOut(); // Timer "es.timer.before_deput"
		case 74: // Event "es.timer.before_up.timeout"
			return timers[7].hasTimedOut(); // Timer "es.timer.before_up"
		default:
			return true;
		}
	}

	/**
	 * Updates the states of the automata
	 * @param eventIndex The executed event
	 */
	void updateCurrentState(int eventIndex) {
		switch (eventIndex) {
		case NO_EVENT_IS_SELECTED: // If no event was enabled
			break;
		case 0: // Event "arm.allocate_lower_buffer"

			// Transitions in "Interaction spec: ES and lower buffer"
			if (currentState[9] == 0)
				currentState[9] = 1;

			// Transitions in "Plant: Disable events"
			break;
		case 1: // Event "arm.allocate_upper_buffer"

			// Transitions in "Interaction spec: ES and upper buffer"
			if (currentState[10] == 0)
				currentState[10] = 1;

			// Transitions in "Plant: Disable events"
			break;
		case 2: // Event "arm.lower_lower_buffer"

			// Transitions in "Interaction spec: ES and lower buffer"
			// currentState[9] == 1 has event 2 as self loop, no transition
			break;
		case 3: // Event "arm.lower_upper_buffer"

			// Transitions in "Interaction spec: ES and upper buffer"
			// currentState[10] == 1 has event 3 as self loop, no transition
			break;
		case 4: // Event "arm.raise_lower_buffer"

			// Transitions in "Interaction spec: ES and lower buffer"
			// currentState[9] == 1 has event 4 as self loop, no transition
			break;
		case 5: // Event "arm.raise_upper_buffer"

			// Transitions in "Interaction spec: ES and upper buffer"
			// currentState[10] == 1 has event 5 as self loop, no transition
			break;
		case 6: // Event "arm.release_lower_buffer"

			// Transitions in "Interaction spec: ES and lower buffer"
			if (currentState[9] == 1)
				currentState[9] = 0;
			break;
		case 7: // Event "arm.release_upper_buffer"

			// Transitions in "Interaction spec: ES and upper buffer"
			if (currentState[10] == 1)
				currentState[10] = 0;
			break;
		case 8: // Event "button.automatic.pressed"

			// Transitions in "Plant: Automatic button"
			if (currentState[12] == 0)
				currentState[12] = 1;

			// Transitions in "Plant: Disable events"
			break;
		case 9: // Event "button.automatic.released"

			// Transitions in "Plant: Automatic button"
			if (currentState[12] == 2)
				currentState[12] = 0;
			break;
		case 10: // Event "button.manual.pressed"

			// Transitions in "Plant: Manual button"
			if (currentState[11] == 0)
				currentState[11] = 1;
			break;
		case 11: // Event "button.manual.released"

			// Transitions in "Plant: Manual button"
			if (currentState[11] == 2)
				currentState[11] = 0;
			break;
		case 12: // Event "em.ball_out_of_measure_station"

			// Transitions in "Progress spec: Elevate and measure (em)"
			if (currentState[2] == 3)
				currentState[2] = 6;
			break;
		case 13: // Event "em.elevator.allocate_station"

			// Transitions in "Progress spec: Elevate and measure (em)"
			if (currentState[2] == 10)
				currentState[2] = 9;
			else if (currentState[2] == 6)
				currentState[2] = 5;

			// Transitions in "Interaction spec: Measure station"
			if (currentState[7] == 0)
				currentState[7] = 3;
			break;
		case 14: // Event "em.elevator.release_station"

			// Transitions in "Progress spec: Elevate and measure (em)"
			if (currentState[2] == 13)
				currentState[2] = 12;
			else if (currentState[2] == 7)
				currentState[2] = 0;

			// Transitions in "Interaction spec: Measure station"
			if (currentState[7] == 3)
				currentState[7] = 0;
			break;
		case 15: // Event "em.enter_ball"

			// Transitions in "Progress spec: Elevate and measure (em)"
			if (currentState[2] == 0)
				currentState[2] = 1;

			// Transitions in "Interaction spec: GK and EM"
			if (currentState[6] == 1)
				currentState[6] = 3;
			break;
		case 16: // Event "em.go_down"

			// Transitions in "Progress spec: Elevate and measure (em)"
			if (currentState[2] == 5)
				currentState[2] = 7;

			// Transitions in "Interaction spec: Measure station"
			// currentState[7] == 3 has event 16 as self loop, no transition

			// Transitions in "Plant: Elevator - Measure"
			// currentState[15] == 0 has event 16 as self loop, no transition
			if (currentState[15] == 1)
				currentState[15] = 0;
			break;
		case 17: // Event "em.go_up"

			// Transitions in "Progress spec: Elevate and measure (em)"
			if (currentState[2] == 9)
				currentState[2] = 11;

			// Transitions in "Interaction spec: Measure station"
			// currentState[7] == 3 has event 17 as self loop, no transition

			// Transitions in "Plant: Elevator - Measure"
			// currentState[15] == 1 has event 17 as self loop, no transition
			if (currentState[15] == 0)
				currentState[15] = 1;
			break;
		case 18: // Event "em.has_ball"

			// Transitions in "Progress spec: Elevate and measure (em)"
			if (currentState[2] == 1)
				currentState[2] = 2;

			// Transitions in "Interaction spec: GK and EM"
			if (currentState[6] == 4)
				currentState[6] = 5;

			// Transitions in "Extended Plant: GK and EM"
			if (currentState[18] == 1)
				currentState[18] = 0;
			break;
		case 19: // Event "em.is_down"

			// Transitions in "Interaction spec: GK and EM"
			if (currentState[6] == 2)
				currentState[6] = 1;

			// Transitions in "Plant: Elevator - Measure"
			// currentState[15] == 0 has event 19 as self loop, no transition
			break;
		case 20: // Event "em.is_up"

			// Transitions in "Progress spec: Elevate and measure (em)"
			if (currentState[2] == 11)
				currentState[2] = 13;

			// Transitions in "Interaction spec: GK and EM"
			if (currentState[6] == 6)
				currentState[6] = 0;

			// Transitions in "Plant: Elevator - Measure"
			// currentState[15] == 1 has event 20 as self loop, no transition
			break;
		case 21: // Event "em.large_ball"

			// Transitions in "Progress spec: Measure station - measure"
			if (currentState[3] == 5)
				currentState[3] = 6;

			// Transitions in "Variable: size of ball"
			if (currentState[19] == 0)
				currentState[19] = 1;
			else if (currentState[19] == 2)
				currentState[19] = 1;
			break;
		case 22: // Event "em.measure.allocate_station"

			// Transitions in "Progress spec: Measure station - measure"
			if (currentState[3] == 1)
				currentState[3] = 2;

			// Transitions in "Interaction spec: Measure station"
			if (currentState[7] == 0)
				currentState[7] = 1;
			break;
		case 23: // Event "em.measure.finished"

			// Transitions in "Progress spec: Elevate and measure (em)"
			if (currentState[2] == 18)
				currentState[2] = 17;

			// Transitions in "Progress spec: Measure station - measure"
			if (currentState[3] == 8)
				currentState[3] = 0;
			break;
		case 24: // Event "em.measure.go_in"

			// Transitions in "Progress spec: Measure station - measure"
			if (currentState[3] == 6)
				currentState[3] = 7;

			// Transitions in "Interaction spec: Measure station"
			// currentState[7] == 1 has event 24 as self loop, no transition
			break;
		case 25: // Event "em.measure.go_out"

			// Transitions in "Progress spec: Measure station - measure"
			if (currentState[3] == 2)
				currentState[3] = 3;

			// Transitions in "Interaction spec: Measure station"
			// currentState[7] == 1 has event 25 as self loop, no transition
			break;
		case 26: // Event "em.measure.has_ball"

			// Transitions in "Progress spec: Elevate and measure (em)"
			if (currentState[2] == 15)
				currentState[2] = 16;

			// Transitions in "Interaction spec: EM and ES"
			if (currentState[8] == 0)
				currentState[8] = 1;
			break;
		case 27: // Event "em.measure.has_no_ball"

			// Transitions in "Progress spec: Elevate and measure (em)"
			if (currentState[2] == 15)
				currentState[2] = 5;
			break;
		case 28: // Event "em.measure.release_station"

			// Transitions in "Progress spec: Measure station - measure"
			if (currentState[3] == 7)
				currentState[3] = 8;

			// Transitions in "Interaction spec: Measure station"
			if (currentState[7] == 1)
				currentState[7] = 0;
			break;
		case 29: // Event "em.measure.start"

			// Transitions in "Progress spec: Elevate and measure (em)"
			if (currentState[2] == 16)
				currentState[2] = 18;

			// Transitions in "Progress spec: Measure station - measure"
			if (currentState[3] == 0)
				currentState[3] = 1;
			break;
		case 30: // Event "em.putter.allocate_station"

			// Transitions in "Progress spec: Measure station - putter"
			if (currentState[4] == 1)
				currentState[4] = 2;

			// Transitions in "Interaction spec: Measure station"
			if (currentState[7] == 0)
				currentState[7] = 2;
			break;
		case 31: // Event "em.putter.finished"

			// Transitions in "Progress spec: Elevate and measure (em)"
			if (currentState[2] == 4)
				currentState[2] = 3;

			// Transitions in "Progress spec: Measure station - putter"
			if (currentState[4] == 7)
				currentState[4] = 0;
			break;
		case 32: // Event "em.putter.go_in"

			// Transitions in "Progress spec: Measure station - putter"
			if (currentState[4] == 3)
				currentState[4] = 6;

			// Transitions in "Interaction spec: Measure station"
			// currentState[7] == 2 has event 32 as self loop, no transition

			// Transitions in "Plant: Measure - Putter"
			// currentState[16] == 0 has event 32 as self loop, no transition
			if (currentState[16] == 1)
				currentState[16] = 0;
			break;
		case 33: // Event "em.putter.go_out"

			// Transitions in "Progress spec: Measure station - putter"
			if (currentState[4] == 2)
				currentState[4] = 4;

			// Transitions in "Interaction spec: Measure station"
			// currentState[7] == 2 has event 33 as self loop, no transition

			// Transitions in "Plant: Measure - Putter"
			// currentState[16] == 1 has event 33 as self loop, no transition
			if (currentState[16] == 0)
				currentState[16] = 1;
			break;
		case 34: // Event "em.putter.is_in"

			// Transitions in "Plant: Measure - Putter"
			// currentState[16] == 0 has event 34 as self loop, no transition

			// Transitions in "Plant: Disable events"
			break;
		case 35: // Event "em.putter.is_out"

			// Transitions in "Plant: Measure - Putter"
			// currentState[16] == 1 has event 35 as self loop, no transition

			// Transitions in "Plant: Disable events"
			break;
		case 36: // Event "em.putter.release_station"

			// Transitions in "Progress spec: Measure station - putter"
			if (currentState[4] == 6)
				currentState[4] = 7;

			// Transitions in "Interaction spec: Measure station"
			if (currentState[7] == 2)
				currentState[7] = 0;
			break;
		case 37: // Event "em.putter.start"

			// Transitions in "Progress spec: Elevate and measure (em)"
			if (currentState[2] == 17)
				currentState[2] = 4;

			// Transitions in "Progress spec: Measure station - putter"
			if (currentState[4] == 0)
				currentState[4] = 1;
			break;
		case 38: // Event "em.small_ball"

			// Transitions in "Progress spec: Measure station - measure"
			if (currentState[3] == 5)
				currentState[3] = 6;

			// Transitions in "Variable: size of ball"
			if (currentState[19] == 0)
				currentState[19] = 2;
			else if (currentState[19] == 1)
				currentState[19] = 2;
			break;
		case 39: // Event "em.timer.before_ballcheck.start"

			// Transitions in "Progress spec: Elevate and measure (em)"
			if (currentState[2] == 12)
				currentState[2] = 14;

			// Transitions in "Timer: em.timer.before_ballcheck"
			if (currentState[21] == 0)
				currentState[21] = 1;
			// currentState[21] == 1 has event 39 as self loop, no transition
			break;
		case 40: // Event "em.timer.before_ballcheck.timeout"

			// Transitions in "Progress spec: Elevate and measure (em)"
			if (currentState[2] == 14)
				currentState[2] = 15;

			// Transitions in "Timer: em.timer.before_ballcheck"
			if (currentState[21] == 1)
				currentState[21] = 0;
			break;
		case 41: // Event "em.timer.before_put.start"

			// Transitions in "Progress spec: Elevate and measure (em)"

			// Transitions in "Timer: em.timer.before_put"
			if (currentState[23] == 0)
				currentState[23] = 1;
			// currentState[23] == 1 has event 41 as self loop, no transition
			break;
		case 42: // Event "em.timer.before_put.timeout"

			// Transitions in "Progress spec: Elevate and measure (em)"

			// Transitions in "Timer: em.timer.before_put"
			if (currentState[23] == 1)
				currentState[23] = 0;
			break;
		case 43: // Event "em.timer.before_up.start"

			// Transitions in "Progress spec: Elevate and measure (em)"
			if (currentState[2] == 2)
				currentState[2] = 8;

			// Transitions in "Timer: em.timer.before_up"
			if (currentState[20] == 0)
				currentState[20] = 1;
			// currentState[20] == 1 has event 43 as self loop, no transition
			break;
		case 44: // Event "em.timer.before_up.timeout"

			// Transitions in "Progress spec: Elevate and measure (em)"
			if (currentState[2] == 8)
				currentState[2] = 10;

			// Transitions in "Timer: em.timer.before_up"
			if (currentState[20] == 1)
				currentState[20] = 0;
			break;
		case 45: // Event "em.timer.measure.start"

			// Transitions in "Progress spec: Measure station - measure"
			if (currentState[3] == 3)
				currentState[3] = 4;

			// Transitions in "Timer: em.timer.measure"
			if (currentState[22] == 0)
				currentState[22] = 1;
			// currentState[22] == 1 has event 45 as self loop, no transition
			break;
		case 46: // Event "em.timer.measure.timeout"

			// Transitions in "Progress spec: Measure station - measure"
			if (currentState[3] == 4)
				currentState[3] = 5;

			// Transitions in "Timer: em.timer.measure"
			if (currentState[22] == 1)
				currentState[22] = 0;
			break;
		case 47: // Event "em.timer.putting.start"

			// Transitions in "Progress spec: Measure station - putter"
			if (currentState[4] == 4)
				currentState[4] = 5;

			// Transitions in "Timer: em.timer.putting"
			if (currentState[24] == 0)
				currentState[24] = 1;
			// currentState[24] == 1 has event 47 as self loop, no transition
			break;
		case 48: // Event "em.timer.putting.timeout"

			// Transitions in "Progress spec: Measure station - putter"
			if (currentState[4] == 5)
				currentState[4] = 3;

			// Transitions in "Timer: em.timer.putting"
			if (currentState[24] == 1)
				currentState[24] = 0;
			break;
		case 49: // Event "es.allocate_lower_buffer"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 20)
				currentState[5] = 22;

			// Transitions in "Interaction spec: ES and lower buffer"
			if (currentState[9] == 0)
				currentState[9] = 2;
			break;
		case 50: // Event "es.allocate_upper_buffer"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 23)
				currentState[5] = 25;

			// Transitions in "Interaction spec: ES and upper buffer"
			if (currentState[10] == 0)
				currentState[10] = 2;
			break;
		case 51: // Event "es.ball_lower_level"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 21)
				currentState[5] = 20;
			break;
		case 52: // Event "es.ball_upper_level"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 24)
				currentState[5] = 23;
			break;
		case 53: // Event "es.deput_ball_lower"

			// Transitions in "Interaction spec: ES and lower buffer"
			// currentState[9] == 2 has event 53 as self loop, no transition
			break;
		case 54: // Event "es.deput_ball_upper"

			// Transitions in "Interaction spec: ES and upper buffer"
			// currentState[10] == 2 has event 54 as self loop, no transition
			break;
		case 55: // Event "es.enter_ball"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 0)
				currentState[5] = 1;

			// Transitions in "Interaction spec: EM and ES"
			if (currentState[8] == 1)
				currentState[8] = 0;
			break;
		case 56: // Event "es.go_down"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 9)
				currentState[5] = 0;
			break;
		case 57: // Event "es.got_ball"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 1)
				currentState[5] = 2;
			break;
		case 58: // Event "es.is_lower"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 14)
				currentState[5] = 16;
			break;
		case 59: // Event "es.is_not_down"

			// Transitions in "Progress spec: Elevate and sort (es)"
			break;
		case 60: // Event "es.is_upper"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 15)
				currentState[5] = 17;
			break;
		case 61: // Event "es.lower_putter.go_in"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 5)
				currentState[5] = 6;
			break;
		case 62: // Event "es.lower_putter.go_out"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 22)
				currentState[5] = 26;
			break;
		case 63: // Event "es.no_ball_lower_level"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 21)
				currentState[5] = 9;
			break;
		case 64: // Event "es.no_ball_upper_level"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 24)
				currentState[5] = 9;
			break;
		case 65: // Event "es.put_ball_lower"

			// Transitions in "Interaction spec: ES and lower buffer"
			// currentState[9] == 2 has event 65 as self loop, no transition
			break;
		case 66: // Event "es.put_ball_upper"

			// Transitions in "Interaction spec: ES and upper buffer"
			// currentState[10] == 2 has event 66 as self loop, no transition
			break;
		case 67: // Event "es.release_lower_buffer"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 6)
				currentState[5] = 9;

			// Transitions in "Interaction spec: ES and lower buffer"
			if (currentState[9] == 2)
				currentState[9] = 0;
			break;
		case 68: // Event "es.release_upper_buffer"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 8)
				currentState[5] = 9;

			// Transitions in "Interaction spec: ES and upper buffer"
			if (currentState[10] == 2)
				currentState[10] = 0;
			break;
		case 69: // Event "es.timer.before_ballcheck.start"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 16)
				currentState[5] = 18;
			else if (currentState[5] == 17)
				currentState[5] = 19;

			// Transitions in "Timer: es.timer.before_ballcheck"
			if (currentState[26] == 0)
				currentState[26] = 1;
			// currentState[26] == 1 has event 69 as self loop, no transition
			break;
		case 70: // Event "es.timer.before_ballcheck.timeout"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 18)
				currentState[5] = 21;
			else if (currentState[5] == 19)
				currentState[5] = 24;

			// Transitions in "Timer: es.timer.before_ballcheck"
			if (currentState[26] == 1)
				currentState[26] = 0;
			break;
		case 71: // Event "es.timer.before_deput.start"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 26)
				currentState[5] = 3;
			else if (currentState[5] == 27)
				currentState[5] = 4;

			// Transitions in "Timer: es.timer.before_deput"
			if (currentState[27] == 0)
				currentState[27] = 1;
			// currentState[27] == 1 has event 71 as self loop, no transition
			break;
		case 72: // Event "es.timer.before_deput.timeout"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 3)
				currentState[5] = 5;
			else if (currentState[5] == 4)
				currentState[5] = 7;

			// Transitions in "Timer: es.timer.before_deput"
			if (currentState[27] == 1)
				currentState[27] = 0;
			break;
		case 73: // Event "es.timer.before_up.start"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 2)
				currentState[5] = 10;

			// Transitions in "Timer: es.timer.before_up"
			if (currentState[25] == 0)
				currentState[25] = 1;
			// currentState[25] == 1 has event 73 as self loop, no transition
			break;
		case 74: // Event "es.timer.before_up.timeout"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 10)
				currentState[5] = 11;

			// Transitions in "Timer: es.timer.before_up"
			if (currentState[25] == 1)
				currentState[25] = 0;
			break;
		case 75: // Event "es.up_lower"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 12)
				currentState[5] = 14;
			break;
		case 76: // Event "es.up_upper"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 13)
				currentState[5] = 15;
			break;
		case 77: // Event "es.upper_putter.go_in"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 7)
				currentState[5] = 8;
			break;
		case 78: // Event "es.upper_putter.go_out"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 25)
				currentState[5] = 27;
			break;
		case 79: // Event "gk.ball_out_of_gatekeeper"

			// Transitions in "Progress spec: Gatekeeper (gk)"
			if (currentState[1] == 6)
				currentState[1] = 7;

			// Transitions in "Interaction spec: GK and EM"
			if (currentState[6] == 5)
				currentState[6] = 6;
			break;
		case 80: // Event "gk.enter_ball"

			// Transitions in "Progress spec: Manual or automatic mode"
			if (currentState[0] == 1)
				currentState[0] = 0;
			else if (currentState[0] == 2)
				currentState[0] = 3;
			else if (currentState[0] == 3)
				currentState[0] = 4;
			else if (currentState[0] == 4)
				currentState[0] = 5;
			else if (currentState[0] == 5)
				currentState[0] = 6;
			else if (currentState[0] == 6)
				currentState[0] = 7;
			else if (currentState[0] == 7)
				currentState[0] = 0;

			// Transitions in "Progress spec: Gatekeeper (gk)"
			if (currentState[1] == 0)
				currentState[1] = 2;
			break;
		case 81: // Event "gk.has_ball"

			// Transitions in "Progress spec: Gatekeeper (gk)"
			if (currentState[1] == 1)
				currentState[1] = 3;

			// Transitions in "Interaction spec: GK and EM"
			if (currentState[6] == 0)
				currentState[6] = 2;
			break;
		case 82: // Event "gk.in.go_in"

			// Transitions in "Progress spec: Gatekeeper (gk)"
			if (currentState[1] == 3)
				currentState[1] = 4;

			// Transitions in "Plant: Gatekeeper - In"
			// currentState[13] == 0 has event 82 as self loop, no transition
			if (currentState[13] == 1)
				currentState[13] = 0;
			break;
		case 83: // Event "gk.in.go_out"

			// Transitions in "Progress spec: Gatekeeper (gk)"
			if (currentState[1] == 2)
				currentState[1] = 1;

			// Transitions in "Plant: Gatekeeper - In"
			// currentState[13] == 1 has event 83 as self loop, no transition
			if (currentState[13] == 0)
				currentState[13] = 1;
			break;
		case 84: // Event "gk.in.is_in"

			// Transitions in "Plant: Gatekeeper - In"
			// currentState[13] == 0 has event 84 as self loop, no transition

			// Transitions in "Plant: Disable events"
			break;
		case 85: // Event "gk.in.is_out"

			// Transitions in "Plant: Gatekeeper - In"
			// currentState[13] == 1 has event 85 as self loop, no transition

			// Transitions in "Plant: Disable events"
			break;
		case 86: // Event "gk.out.go_in"

			// Transitions in "Progress spec: Gatekeeper (gk)"
			if (currentState[1] == 7)
				currentState[1] = 0;

			// Transitions in "Plant: Gatekeeper - Out"
			// currentState[14] == 0 has event 86 as self loop, no transition
			if (currentState[14] == 1)
				currentState[14] = 0;
			break;
		case 87: // Event "gk.out.go_out"

			// Transitions in "Progress spec: Gatekeeper (gk)"
			if (currentState[1] == 5)
				currentState[1] = 6;

			// Transitions in "Plant: Gatekeeper - Out"
			// currentState[14] == 1 has event 87 as self loop, no transition
			if (currentState[14] == 0)
				currentState[14] = 1;

			// Transitions in "Extended Plant: GK and EM"
			if (currentState[18] == 0)
				currentState[18] = 1;
			break;
		case 88: // Event "gk.out.is_in"

			// Transitions in "Plant: Gatekeeper - Out"
			// currentState[14] == 0 has event 88 as self loop, no transition

			// Transitions in "Plant: Disable events"
			break;
		case 89: // Event "gk.out.is_out"

			// Transitions in "Plant: Gatekeeper - Out"
			// currentState[14] == 1 has event 89 as self loop, no transition

			// Transitions in "Plant: Disable events"
			break;
		case 90: // Event "gk.release_ball"

			// Transitions in "Progress spec: Gatekeeper (gk)"
			if (currentState[1] == 4)
				currentState[1] = 5;

			// Transitions in "Interaction spec: GK and EM"
			if (currentState[6] == 3)
				currentState[6] = 4;
			break;
		case 91: // Event "is_large_ball"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 11)
				currentState[5] = 13;

			// Transitions in "Variable: size of ball"
			// currentState[19] == 1 has event 91 as self loop, no transition
			// currentState[19] == 0 has event 91 as self loop, no transition
			break;
		case 92: // Event "is_small_ball"

			// Transitions in "Progress spec: Elevate and sort (es)"
			if (currentState[5] == 11)
				currentState[5] = 12;

			// Transitions in "Variable: size of ball"
			// currentState[19] == 2 has event 92 as self loop, no transition
			// currentState[19] == 0 has event 92 as self loop, no transition
			break;
		case 93: // Event "mode.automatic"

			// Transitions in "Progress spec: Manual or automatic mode"
			if (currentState[0] == 0)
				currentState[0] = 2;
			// currentState[0] == 1 has event 93 as self loop, no transition
			// currentState[0] == 2 has event 93 as self loop, no transition
			// currentState[0] == 3 has event 93 as self loop, no transition
			// currentState[0] == 4 has event 93 as self loop, no transition
			// currentState[0] == 5 has event 93 as self loop, no transition
			// currentState[0] == 6 has event 93 as self loop, no transition
			// currentState[0] == 7 has event 93 as self loop, no transition

			// Transitions in "Plant: Automatic button"
			if (currentState[12] == 1)
				currentState[12] = 2;
			break;
		case 94: // Event "mode.manual"

			// Transitions in "Progress spec: Manual or automatic mode"
			if (currentState[0] == 0)
				currentState[0] = 1;
			// currentState[0] == 1 has event 94 as self loop, no transition
			// currentState[0] == 2 has event 94 as self loop, no transition
			// currentState[0] == 3 has event 94 as self loop, no transition
			// currentState[0] == 4 has event 94 as self loop, no transition
			// currentState[0] == 5 has event 94 as self loop, no transition
			// currentState[0] == 6 has event 94 as self loop, no transition
			// currentState[0] == 7 has event 94 as self loop, no transition

			// Transitions in "Plant: Manual button"
			if (currentState[11] == 1)
				currentState[11] = 2;
			break;
		default:
			// Should never get here
		}
	}

	/**
	 * Sets output variables according to the executed event
	 * @param eventIndex The executed event
	 */
	void updateOutputVariables(int eventIndex) {
		/*
		 * No output variables are changed by default.
		 * Example:
		 * case 3: // Event "startMachine"
		 *   outputVariables[7] = true;
		 *   break;
		 */
		switch (eventIndex) {
		case 16: // Event "em.go_down"
			outputVariables[2] = false; // Output "UppMatlyft"
			break;
		case 17: // Event "em.go_up"
			outputVariables[2] = true; // Output "UppMatlyft"
			break;
		case 24: // Event "em.measure.go_in"
			outputVariables[4] = false; // Output "Mat"
			break;
		case 25: // Event "em.measure.go_out"
			outputVariables[4] = true; // Output "Mat"
			break;
		case 32: // Event "em.putter.go_in"
			outputVariables[3] = false; // Output "UrMatning"
			break;
		case 33: // Event "em.putter.go_out"
			outputVariables[3] = true; // Output "UrMatning"
			break;
		case 56: // Event "es.go_down"
			outputVariables[5] = false; // Output "UppHissVan1"
			outputVariables[6] = false; // Output "UppHissVan2"
			break;
		case 61: // Event "es.lower_putter.go_in"
			outputVariables[7] = false; // Output "UtVan1"
			break;
		case 62: // Event "es.lower_putter.go_out"
			outputVariables[7] = true; // Output "UtVan1"
			break;
		case 75: // Event "es.up_lower"
			outputVariables[5] = true; // Output "UppHissVan1"
			outputVariables[6] = false; // Output "UppHissVan2"
			break;
		case 76: // Event "es.up_upper"
			outputVariables[5] = true; // Output "UppHissVan1"
			outputVariables[6] = true; // Output "UppHissVan2"
			break;
		case 77: // Event "es.upper_putter.go_in"
			outputVariables[11] = false; // Output "UtVan2"
			break;
		case 78: // Event "es.upper_putter.go_out"
			outputVariables[11] = true; // Output "UtVan2"
			break;
		case 82: // Event "gk.in.go_in"
			outputVariables[0] = false; // Output "InPortvakt"
			break;
		case 83: // Event "gk.in.go_out"
			outputVariables[0] = true; // Output "InPortvakt"
			break;
		case 86: // Event "gk.out.go_in"
			outputVariables[1] = false; // Output "UrPortvakt"
			break;
		case 87: // Event "gk.out.go_out"
			outputVariables[1] = true; // Output "UrPortvakt"
			break;
		default: // Do nothing
			break;
		}
	}

	/**
	 * Start timers.
	 * @param eventIndex The executed event
	 */
	void startTimers(int eventIndex) {
		/*
		 * No timers are started by default.
		 * Example:
		 * case 9: // Event "mytimer_start"
		 *   timers[2].start();  // Timer "mytimer"
		 *   break;
		 */
		switch (eventIndex) {
		case 39: // Event "em.timer.before_ballcheck.start"
			timers[0].start(); // Timer "em.timer.before_ballcheck"
			break;
		case 41: // Event "em.timer.before_put.start"
			timers[1].start(); // Timer "em.timer.before_put"
			break;
		case 43: // Event "em.timer.before_up.start"
			timers[2].start(); // Timer "em.timer.before_up"
			break;
		case 45: // Event "em.timer.measure.start"
			timers[3].start(); // Timer "em.timer.measure"
			break;
		case 47: // Event "em.timer.putting.start"
			timers[4].start(); // Timer "em.timer.putting"
			break;
		case 69: // Event "es.timer.before_ballcheck.start"
			timers[5].start(); // Timer "es.timer.before_ballcheck"
			break;
		case 71: // Event "es.timer.before_deput.start"
			timers[6].start(); // Timer "es.timer.before_deput"
			break;
		case 73: // Event "es.timer.before_up.start"
			timers[7].start(); // Timer "es.timer.before_up"
			break;
		default: // Do nothing
			break;
		}
	}

	/**
	 * Executes the program.
	 */
	void execute() {
		// The index of the event that is selected to be executed
		int eventToBeExecuted = NO_EVENT_IS_SELECTED;

		long timeOfLastScan = System.currentTimeMillis();
		long timeToSleep;

		// Main scancycle
		while (true) {
			try {
				eventToBeExecuted = NO_EVENT_IS_SELECTED;

				// Read the input signal values into the input variables
				digitalIODriver.getSignalArray(inputVariables);

				/*
				 * Select the first event that is enabled.
				 * Search in the order that is given by the
				 * priority queue. Uncontrollable events
				 * lies first in the queue and are thus
				 * selected first. For an event to be
				 * enabled, it has to be enabled in the
				 * current internal state as well as 
				 * by external input signals.
				 */
				for (int i = 0; i < NR_OF_EVENTS && eventToBeExecuted == NO_EVENT_IS_SELECTED; ++i)
					if (eventIsEnabledInCurrentState(EVENT_PRIORITY_QUEUE[i])
							&& eventIsEnabledByInputVariables(EVENT_PRIORITY_QUEUE[i])
							&& eventIsEnabledByTimers(EVENT_PRIORITY_QUEUE[i]))
						eventToBeExecuted = EVENT_PRIORITY_QUEUE[i];

				// Update the output variables
				updateOutputVariables(eventToBeExecuted);

				// Start the timers that are triggered by this event
				startTimers(eventToBeExecuted);

				// Update state
				updateCurrentState(eventToBeExecuted);

				// Write the output variables
				digitalIODriver.setSignalArray(outputVariables);

				// For debugging
				//if (eventToBeExecuted != NO_EVENT_IS_SELECTED)
				//	System.out.println(EVENT_LABELS[eventToBeExecuted]);
			} catch (Exception e) {
				e.printStackTrace();
			}

			/*
			 * For a constant scan cycle time, set
			 * PREFERRED_SCAN_CYCLE_TIME to a value larger than
			 * the real scan cycle time. 
			 */
			timeToSleep = PREFERRED_SCAN_CYCLE_TIME - (System.currentTimeMillis() - timeOfLastScan); 
			if (timeToSleep > 0) {
				try {
					Thread.sleep(timeToSleep);
				} catch(InterruptedException e){}
			}
			timeOfLastScan = System.currentTimeMillis();
		}
	}

	public static void main(String[] args) {
		BallProcess instance = new BallProcess();
		instance.execute();
	}
}

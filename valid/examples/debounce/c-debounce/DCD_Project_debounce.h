/*****************************************************************************
** Generated by DES-to-C-Generator, Revision 2.5C
** Thu Dec 09 20:24:42 1999
** (C) Siemens AG, ZT SE 4, 1999. All Rights Reserved.
** Authors: Dr. Markus Kaltenbach, Dr. Robi Malik
*****************************************************************************/

#ifndef _DCD_Project_debounce_H_
#define _DCD_Project_debounce_H_

#if _MSC_VER >= 1000
#pragma once
#endif

#ifdef __GNUG__
#pragma interface
#endif

#include "DCD_Automaton.h"


/*****************************************************************************
** CLASS DCD_Project_debounce - the automaton class for debounce
*****************************************************************************/

typedef struct DCD_States_debounce {
  int s_timer_11;
  int s_debouncing_0ok_11_2sensor_0and_0filter_11;
} DCD_States_debounce;

typedef struct DCD_Project_debounce {
  /* Base Class: */
  DCD_Automaton mAutomaton;
  /* States of Plants and Specs: */
  DCD_States_debounce mStates;
  /* User Defined Stuff: */
  char mLastKey;
  int mTime;
} DCD_Project_debounce;


/* General Object Handling: */
extern void DCD_Project_debounce_create(DCD_Project_debounce* project);
extern void DCD_Project_debounce_destroy(DCD_Project_debounce* project);

/* Automaton Access Methods: */
extern void DCD_States_debounce_init(DCD_States_debounce* states);
extern void DCD_Project_debounce_init(DCD_Project_debounce* project);
extern int DCD_Project_debounce_isMarkedState(DCD_Project_debounce* project);

/* Stepping: */
extern int DCD_Project_debounce_step(DCD_Project_debounce* project);
extern int DCD_Project_debounce_stepControllables
    (DCD_Project_debounce* project);
extern int DCD_Project_debounce_stepUncontrollable
    (DCD_Project_debounce* project, DCD_SignalledEvent* event);
extern int DCD_Project_debounce_stepUncontrollable_new_value
    (DCD_Project_debounce* project, unsigned short argv);
extern int DCD_Project_debounce_stepUncontrollable_timeout
    (DCD_Project_debounce* project, unsigned short argv);

/* Event Actions: */
#if defined(WITHTRACE) || defined(DES_SIMULATOR)
extern void DCD_Project_debounce_debugAction_new_value
    (DCD_Project_debounce* project, int argv1);
extern void DCD_Project_debounce_debugAction_timeout
    (DCD_Project_debounce* project, int argv1);
extern void DCD_Project_debounce_debugAction_chg_value
    (DCD_Project_debounce* project, int argv1);
extern void DCD_Project_debounce_debugAction_reset
    (DCD_Project_debounce* project, int argv1);
extern void DCD_Project_debounce_debugAction_timer
    (DCD_Project_debounce* project, int argv1);
#endif  /* WITHTRACE || DES_SIMULATOR */

extern void DCD_Project_debounce_Action_timeout
    (DCD_Project_debounce* project, int argv1);
extern void DCD_Project_debounce_Action_chg_value
    (DCD_Project_debounce* project, int argv1);
extern void DCD_Project_debounce_Action_reset
    (DCD_Project_debounce* project, int argv1);
extern void DCD_Project_debounce_Action_timer
    (DCD_Project_debounce* project, int argv1);

/* Signalling Uncontrollables: */
extern void DCD_Project_debounce_Signal_new_value
    (DCD_Project_debounce* project, int argv1);
extern void DCD_Project_debounce_Signal_timeout
    (DCD_Project_debounce* project, int argv1);

/* Naming Methods: */
#if defined(WITHTRACE) || defined(DES_SIMULATOR)
extern char* DCD_Project_debounce_getEventName
    (DCD_Project_debounce* project, DCD_SignalledEvent* event);
#endif  /* WITHTRACE || DES_SIMULATOR */

/* Tracing: */
#if defined(WITHTRACE) || defined(DES_SIMULATOR)
extern void DCD_Project_debounce_setTraceFunction
    (DCD_Project_debounce* project, DCD_TraceFunction* f);
#endif  /* WITHTRACE || DES_SIMULATOR */

/* Added by User */
extern void DCD_Project_debounce_execute(DCD_Project_debounce* project);


#endif  /* !_DCD_Project_debounce_H_ */

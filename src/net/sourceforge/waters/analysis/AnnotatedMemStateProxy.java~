package net.sourceforge.waters.analysis;

import net.sourceforge.waters.model.des.EventProxy;
import java.util.Collection;
import java.util.Collections;
import net.sourceforge.waters.model.base.NamedProxy;
import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.des.StateProxy;
import net.sourceforge.waters.model.des.ProductDESProxyVisitor;
import net.sourceforge.waters.model.base.Proxy;
import gnu.trove.THashSet;
import java.util.Set;

public class AnnotatedMemStateProxy
  implements StateProxy
{
  private final int mName;
  private final boolean mIsInitial;
  private final Collection<EventProxy> mProps;
  
  public AnnotatedMemStateProxy(int name, Collection<EventProxy> props,
                                boolean isInitial)
  {
    mName = name;
    mProps = props;
    mIsInitial = isInitial;
  }
  
  public AnnotatedMemStateProxy(int name, EventProxy marked, boolean isInitial)
  {
    this(name, Collections.singleton(marked), isInitial);
  }
  
  public AnnotatedMemStateProxy(int name, EventProxy marked)
  {
    this(name, Collections.singleton(marked), false);
  }
  
  public AnnotatedMemStateProxy(int name)
  {
    this(name, getRightType(), false);
  }
  
  private static Set<EventProxy> getRightType()
  {
    Set<EventProxy> empty = Collections.emptySet(); return empty;
  }
  
  public Collection<EventProxy> getPropositions()
  {
    return mProps;
  }
  
  public boolean isInitial()
  {
    return mIsInitial;
  }
  
  public int getNum()
  {
    return mName;
  }
  
  public AnnotatedMemStateProxy clone()
  {
    return new AnnotatedMemStateProxy(mName, mProps, mIsInitial);
  }
  
  public String getName()
  {
    return Integer.toString(mName);
  }
  
  public boolean refequals(Object o)
  {
    if (o instanceof NamedProxy) {
      return refequals((NamedProxy) o);
    }
    return false;
  }
  
  public boolean refequals(NamedProxy o)
  {
    if (o instanceof AnnotatedMemStateProxy) {
      final AnnotatedMemStateProxy s = (AnnotatedMemStateProxy) o;
      return s.mName == mName;
    } else {
      return false;
    }
  }
  
  public int refHashCode()
  {
    return mName;
  }
  
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ProductDESProxyVisitor desvisitor = (ProductDESProxyVisitor) visitor;
    return desvisitor.visitStateProxy(this);
  }

  public Class<StateProxy> getProxyInterface()
  {
    return StateProxy.class;
  }

  public boolean equalsByContents(final Proxy partner)
  {
    if (partner != null &&
        partner.getProxyInterface() == getProxyInterface()) {
      final StateProxy state = (StateProxy) partner;
      return (getName().equals(state.getName())) &&
             (isInitial() == state.isInitial()) &&
             state.getPropositions().isEmpty();
    } else {
      return false;
    }
  }
  
  public boolean equalsWithGeometry(Proxy o)
  {
    return equalsByContents(o);
  }
  
  public int hashCodeByContents()
  {
    return refHashCode();
  }
  
  public int hashCodeWithGeometry()
  {
    return refHashCode();
  }
  
  public int compareTo(NamedProxy n)
  {
    return n.getName().compareTo(getName());
  }
  
  public String toString()
  {
    return "S:" + mName;
  }
}

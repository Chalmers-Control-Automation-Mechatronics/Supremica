//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# Copyright (C) 2004-2015 Robi Malik
//###########################################################################
//# This file is part of Waters.
//# Waters is free software: you can redistribute it and/or modify it under
//# the terms of the GNU General Public License as published by the Free
//# Software Foundation, either version 2 of the License, or (at your option)
//# any later version.
//# Waters is distributed in the hope that it will be useful, but WITHOUT ANY
//# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
//# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
//# details.
//# You should have received a copy of the GNU General Public License along
//# with Waters. If not, see <http://www.gnu.org/licenses/>.
//#
//# Linking Waters statically or dynamically with other modules is making a
//# combined work based on Waters. Thus, the terms and conditions of the GNU
//# General Public License cover the whole combination.
//# In addition, as a special exception, the copyright holders of Waters give
//# you permission to combine Waters with code included in the standard
//# release of Supremica under the Supremica Software License Agreement (or
//# modified versions of such code, with unchanged license). You may copy and
//# distribute such a system following the terms of the GNU GPL for Waters and
//# the licenses of the other code concerned.
//# Note that people who make modified versions of Waters are not obligated to
//# grant this special exception for their modified versions; it is their
//# choice whether to do so. The GNU General Public License gives permission
//# to release a modified version without this exception; this exception also
//# makes it possible to release a modified version which carries forward this
//# exception.
//###########################################################################

package net.sourceforge.waters.analysis.bdd;

import java.util.ArrayList;
import java.util.List;

import net.sf.javabdd.BDDFactory;
import net.sourceforge.waters.model.analysis.Abortable;
import net.sourceforge.waters.model.analysis.AnalysisAbortException;


/**
 * @author Robi Malik
 */

abstract class Partitioning<P extends PartitionBDD> implements Abortable
{

  //#########################################################################
  //# Constructor
  Partitioning(final BDDFactory factory,
               final Class<P> clazz,
               final int partitioningSizeLimit)
  {
    mFullPartition = new ArrayList<P>();
    mBDDFactory = factory;
    mClass = clazz;
    mPartitioningSizeLimit = partitioningSizeLimit;
  }


  //#########################################################################
  //# Simple Access
  void add(final P part)
  {
    mFullPartition.add(part);
  }

  List<P> getFullPartition()
  {
    return mFullPartition;
  }

  BDDFactory getBDDFactory()
  {
    return mBDDFactory;
  }

  P castBDD(final PartitionBDD bdd)
  {
    return mClass.cast(bdd);
  }

  int getPartitioningSizeLimit()
  {
    return mPartitioningSizeLimit;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.analysis.Abortable
  @Override
  public void requestAbort()
  {
    mIsAborting = true;
  }

  @Override
  public boolean isAborting()
  {
    return mIsAborting;
  }

  @Override
  public void resetAbort()
  {
    mIsAborting = false;
  }


  //#########################################################################
  //# Aborting
  void checkAbort()
    throws AnalysisAbortException
  {
    if (mIsAborting) {
      throw new AnalysisAbortException();
    }
  }


  //#########################################################################
  //# Algorithm
  /**
   * Merges the BDDs in this partitioning. This method seeks to reduce
   * the number of individual BDDs in the partitioning based on configuration
   * settings.
   * @param automatonBDDs Array of automaton BDDs constituting the model.
   */
  abstract void merge(final AutomatonBDD[] automatonBDDs)
    throws AnalysisAbortException;

  /**
   * Returns whether the state search generated by the
   * {@link #startIteration()} and {@link #nextGroup(boolean) nextGroup()}
   * methods is a strict breadth-first search. In a breadth-first search,
   * each step produces all immediate successor (or predecessor) states
   * of the current state set. If this property is satisfied, counterexamples
   * can be generated more effectively.
   */
  abstract boolean isStrictBFS();

  /**
   * Initialises a state-search iteration using this partitioning.
   * @return List of BDDs to be used for the first iteration,
   *         or <CODE>null</CODE> to indicate that iteration can be stopped
   *         because there will be no change.
   */
  abstract List<P> startIteration();

  /**
   * Gets the next sub-partition to be used during state-search iteration
   * using this partitioning.
   * @param  stable    <CODE>true</CODE> to indicate that an iteration using
   *                   the previous BDDs returned by this method resulted
   *                   in no change.
   * @return List of BDDs to be used for the next iteration,
   *         or <CODE>null</CODE> to indicate that iteration can be stopped
   *         because there will be no further change.
   */
  abstract List<P> nextGroup(boolean stable);

  /**
   * Returns whether the computed partition is trivially true or false.
   * A conjunctive partition is dominant if it contains a single BDD
   * representing representing false, while a disjunctive partition is
   * dominant if it contains a single BDD representing representing true.
   */
  boolean isDominant()
  {
    if (mFullPartition.size() == 1) {
      final P part = mFullPartition.get(0);
      return part.isDominant();
    } else {
      return false;
    }
  }


  //#########################################################################
  //# Data Members
  private final List<P> mFullPartition;
  private final BDDFactory mBDDFactory;
  private final Class<P> mClass;
  private final int mPartitioningSizeLimit;

  private boolean mIsAborting;

}

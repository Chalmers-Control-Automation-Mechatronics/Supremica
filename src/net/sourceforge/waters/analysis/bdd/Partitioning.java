//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters BDD
//# PACKAGE: net.sourceforge.waters.analysis.bdd
//# CLASS:   Partitioning
//###########################################################################
//# $Id$
//###########################################################################

package net.sourceforge.waters.analysis.bdd;

import java.util.ArrayList;
import java.util.List;
import net.sf.javabdd.BDDFactory;


/**
 * @author Robi Malik
 */

abstract class Partitioning<P extends PartitionBDD>
{

  //#########################################################################
  //# Constructor
  Partitioning(final BDDFactory factory,
               final Class<P> clazz,
               final int partitioningSizeLimit)
  {
    mFullPartition = new ArrayList<P>();
    mBDDFactory = factory;
    mClass = clazz;
    mPartitioningSizeLimit = partitioningSizeLimit;
  }


  //#########################################################################
  //# Simple Access
  void add(final P part)
  {
    mFullPartition.add(part);
  }

  List<P> getFullPartition()
  {
    return mFullPartition;
  }

  BDDFactory getBDDFactory()
  {
    return mBDDFactory;
  }

  P castBDD(final PartitionBDD bdd)
  {
    return mClass.cast(bdd);
  }

  int getPartitioningSizeLimit()
  {
    return mPartitioningSizeLimit;
  }

  //#########################################################################
  //# Algorithm
  /**
   * Merges the BDDs in this partitioning. This method seeks to reduce
   * the number of individual BDDs in the partitioning based on configuration
   * settings.
   * @param automatonBDDs Array of automaton BDDs constituting the model.
   */
  abstract void merge(final AutomatonBDD[] automatonBDDs);

  /**
   * Returns whether the state search generated by the
   * {@link #startIteration()} and {@link #nextGroup(boolean) nextGroup()}
   * methods is a strict breadth-first search. In a breadth-first search,
   * each step produces all immediate successor (or predecessor) states
   * of the current state set. If this property is satisfied, counterexamples
   * can be generated more effectively.
   */
  abstract boolean isStrictBFS();

  /**
   * Initialises a state-search iteration using this partitioning.
   * @return List of BDDs to be used for the first iteration,
   *         or <CODE>null</CODE> to indicate that iteration can be stopped
   *         because there will be no change.
   */
  abstract List<P> startIteration();

  /**
   * Gets the next sub-partition to be used during state-search iteration
   * using this partitioning.
   * @param  stable    <CODE>true</CODE> to indicate that an iteration using
   *                   the previous BDDs returned by this method resulted
   *                   in no change.
   * @return List of BDDs to be used for the next iteration,
   *         or <CODE>null</CODE> to indicate that iteration can be stopped
   *         because there will be no further change.
   */
  abstract List<P> nextGroup(boolean stable);


  //#########################################################################
  //# Data Members
  private final List<P> mFullPartition;
  private final BDDFactory mBDDFactory;
  private final Class<P> mClass;
  private final int mPartitioningSizeLimit;

}

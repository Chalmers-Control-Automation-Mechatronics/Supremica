//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################
//# Copyright (C) 2004-2018 Robi Malik
//###########################################################################
//# This file is part of Waters.
//# Waters is free software: you can redistribute it and/or modify it under
//# the terms of the GNU General Public License as published by the Free
//# Software Foundation, either version 2 of the License, or (at your option)
//# any later version.
//# Waters is distributed in the hope that it will be useful, but WITHOUT ANY
//# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
//# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
//# details.
//# You should have received a copy of the GNU General Public License along
//# with Waters. If not, see <http://www.gnu.org/licenses/>.
//#
//# Linking Waters statically or dynamically with other modules is making a
//# combined work based on Waters. Thus, the terms and conditions of the GNU
//# General Public License cover the whole combination.
//# In addition, as a special exception, the copyright holders of Waters give
//# you permission to combine Waters with code included in the standard
//# release of Supremica under the Supremica Software License Agreement (or
//# modified versions of such code, with unchanged license). You may copy and
//# distribute such a system following the terms of the GNU GPL for Waters and
//# the licenses of the other code concerned.
//# Note that people who make modified versions of Waters are not obligated to
//# grant this special exception for their modified versions; it is their
//# choice whether to do so. The GNU General Public License gives permission
//# to release a modified version without this exception; this exception also
//# makes it possible to release a modified version which carries forward this
//# exception.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.util.Collections;
import java.util.Map;
import java.util.Set;

import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.NodeProxy;
import net.sourceforge.waters.model.module.PlainEventListProxy;
import net.sourceforge.waters.subject.base.AttributeMapSubject;
import net.sourceforge.waters.subject.base.ModelChangeEvent;
import net.sourceforge.waters.subject.base.NamedSubject;
import net.sourceforge.waters.subject.base.ProxySubject;
import net.sourceforge.waters.subject.base.RecursiveUndoInfo;
import net.sourceforge.waters.subject.base.Subject;
import net.sourceforge.waters.subject.base.UndoInfo;


/**
 * The subject implementation of the {@link NodeProxy} interface.
 *
 * @author Robi Malik
 */

public abstract class NodeSubject
  extends NamedSubject
  implements NodeProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new node.
   * @param name The name of the new node.
   * @param propositions The list of propositions of the new node, or <CODE>null</CODE> if empty.
   * @param attributes The attribute map of the new node, or <CODE>null</CODE> if empty.
   */
  protected NodeSubject(final String name,
                        final PlainEventListProxy propositions,
                        final Map<String,String> attributes)
  {
    super(name);
    if (propositions == null) {
      mPropositions = new PlainEventListSubject();
    } else {
      mPropositions = (PlainEventListSubject) propositions;
    }
    mPropositions.setParent(this);
    if (attributes == null) {
      mAttributes = new AttributeMapSubject();
    } else {
      mAttributes = new AttributeMapSubject(attributes);
    }
    mAttributes.setParent(this);
  }

  /**
   * Creates a new node using default values.
   * This constructor creates a node with
   * an empty list of propositions and
   * an empty attribute map.
   * @param name The name of the new node.
   */
  protected NodeSubject(final String name)
  {
    this(name,
         null,
         null);
  }


  //#########################################################################
  //# Cloning and Assigning
  @Override
  public NodeSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (NodeSubject) cloner.getClone(this);
  }

  @Override
  public ModelChangeEvent assignMember(final int index,
                                       final Object oldValue,
                                       final Object newValue)
  {
    if (index <= 1) {
      return super.assignMember(index, oldValue, newValue);
    } else {
      switch (index) {
      case 2:
        mPropositions.setParent(null);
        mPropositions = (PlainEventListSubject) newValue;
        mPropositions.setParent(this);
        return ModelChangeEvent.createStateChanged(this);
      default:
        return null;
      }
    }
  }

  @Override
  protected void collectUndoInfo(final ProxySubject newState,
                                 final RecursiveUndoInfo info,
                                 final Set<? extends Subject> boundary)
  {
    super.collectUndoInfo(newState, info, boundary);
    final NodeSubject downcast = (NodeSubject) newState;
    final UndoInfo step2 =
      mPropositions.createUndoInfo(downcast.mPropositions, boundary);
    if (step2 != null) {
      info.add(step2);
    }
    final UndoInfo step4 =
      mAttributes.createUndoInfo(downcast.mAttributes, boundary);
    if (step4 != null) {
      info.add(step4);
    }
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.NodeProxy
  public PlainEventListSubject getPropositions()
  {
    return mPropositions;
  }

  public Map<String,String> getAttributes()
  {
    final Map<?,?> precast = mAttributes;
    @SuppressWarnings("unchecked")
    final Map<String,String> downcast = (Map<String,String>) precast;
    return Collections.unmodifiableMap(downcast);
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the list of propositions of this node.
   */
  public void setPropositions(final PlainEventListSubject propositions)
  {
    if (mPropositions == propositions) {
      return;
    }
    propositions.setParent(this);
    mPropositions.setParent(null);
    mPropositions = propositions;
    fireStateChanged();
  }

  /**
   * Gets the modifiable attribute map for this node.
   */
  public AttributeMapSubject getAttributesModifiable()
  {
    return mAttributes;
  }


  //#########################################################################
  //# Data Members
  private PlainEventListSubject mPropositions;
  private AttributeMapSubject mAttributes;

}

//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   NodeSubject
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.util.Collections;
import java.util.Map;

import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.NodeProxy;
import net.sourceforge.waters.model.module.PlainEventListProxy;
import net.sourceforge.waters.subject.base.AttributeMapSubject;
import net.sourceforge.waters.subject.base.ModelChangeEvent;
import net.sourceforge.waters.subject.base.NamedSubject;
import net.sourceforge.waters.subject.base.ProxySubject;
import net.sourceforge.waters.subject.base.RecursiveUndoInfo;
import net.sourceforge.waters.subject.base.UndoInfo;


/**
 * The subject implementation of the {@link NodeProxy} interface.
 *
 * @author Robi Malik
 */

public abstract class NodeSubject
  extends NamedSubject
  implements NodeProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new node.
   * @param name The name of the new node.
   * @param propositions The list of propositions of the new node, or <CODE>null</CODE> if empty.
   * @param attributes The attribute map of the new node, or <CODE>null</CODE> if empty.
   */
  protected NodeSubject(final String name,
                        final PlainEventListProxy propositions,
                        final Map<String,String> attributes)
  {
    super(name);
    if (propositions == null) {
      mPropositions = new PlainEventListSubject();
    } else {
      mPropositions = (PlainEventListSubject) propositions;
    }
    mPropositions.setParent(this);
    if (attributes == null) {
      mAttributes = new AttributeMapSubject();
    } else {
      mAttributes = new AttributeMapSubject(attributes);
    }
    mAttributes.setParent(this);
  }

  /**
   * Creates a new node using default values.
   * This constructor creates a node with
   * an empty list of propositions and
   * an empty attribute map.
   * @param name The name of the new node.
   */
  protected NodeSubject(final String name)
  {
    this(name,
         null,
         null);
  }


  //#########################################################################
  //# Cloning and Assigning
  @Override
  public NodeSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (NodeSubject) cloner.getClone(this);
  }

  @Override
  public ModelChangeEvent assignMember(final int index,
                                       final Object oldValue,
                                       final Object newValue)
  {
    if (index <= 1) {
      return super.assignMember(index, oldValue, newValue);
    } else {
      switch (index) {
      case 2:
        mPropositions.setParent(null);
        mPropositions = (PlainEventListSubject) newValue;
        mPropositions.setParent(this);
        return ModelChangeEvent.createStateChanged(this);
      default:
        return null;
      }
    }
  }

  @Override
  protected void collectUndoInfo(final ProxySubject newState,
                                 final RecursiveUndoInfo info)
  {
    super.collectUndoInfo(newState, info);
    final NodeSubject downcast = (NodeSubject) newState;
    final UndoInfo step2 =
      mPropositions.createUndoInfo(downcast.mPropositions);
    if (step2 != null) {
      info.add(step2);
    }
    final UndoInfo step4 = mAttributes.createUndoInfo(downcast.mAttributes);
    if (step4 != null) {
      info.add(step4);
    }
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.NodeProxy
  public PlainEventListSubject getPropositions()
  {
    return mPropositions;
  }

  public Map<String,String> getAttributes()
  {
    final Map<?,?> precast = mAttributes;
    @SuppressWarnings("unchecked")
    final Map<String,String> downcast = (Map<String,String>) precast;
    return Collections.unmodifiableMap(downcast);
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the list of propositions of this node.
   */
  public void setPropositions(final PlainEventListSubject propositions)
  {
    if (mPropositions == propositions) {
      return;
    }
    propositions.setParent(this);
    mPropositions.setParent(null);
    mPropositions = propositions;
    fireStateChanged();
  }

  /**
   * Gets the modifiable attribute map for this node.
   */
  public AttributeMapSubject getAttributesModifiable()
  {
    return mAttributes;
  }


  //#########################################################################
  //# Data Members
  private PlainEventListSubject mPropositions;
  private AttributeMapSubject mAttributes;

}

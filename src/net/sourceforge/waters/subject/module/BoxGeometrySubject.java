//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   BoxGeometrySubject
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.awt.geom.Rectangle2D;
import java.util.Set;

import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.BoxGeometryProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.subject.base.GeometrySubject;
import net.sourceforge.waters.subject.base.ModelChangeEvent;
import net.sourceforge.waters.subject.base.ProxySubject;
import net.sourceforge.waters.subject.base.RecursiveUndoInfo;
import net.sourceforge.waters.subject.base.ReplacementUndoInfo;
import net.sourceforge.waters.subject.base.Subject;
import net.sourceforge.waters.subject.base.UndoInfo;


/**
 * The subject implementation of the {@link BoxGeometryProxy} interface.
 *
 * @author Robi Malik
 */

public final class BoxGeometrySubject
  extends GeometrySubject
  implements BoxGeometryProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new box geometry.
   * @param rectangle The rectangle of the new box geometry.
   */
  public BoxGeometrySubject(final Rectangle2D rectangle)
  {
    mRectangle = (Rectangle2D) rectangle.clone();
  }


  //#########################################################################
  //# Cloning and Assigning
  @Override
  public BoxGeometrySubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (BoxGeometrySubject) cloner.getClone(this);
  }

  @Override
  public ModelChangeEvent assignMember(final int index,
                                       final Object oldValue,
                                       final Object newValue)
  {
    if (index <= 0) {
      return super.assignMember(index, oldValue, newValue);
    } else {
      switch (index) {
      case 1:
        mRectangle = (Rectangle2D) newValue;
        return ModelChangeEvent.createGeometryChanged(this, newValue);
      default:
        return null;
      }
    }
  }

  @Override
  protected void collectUndoInfo(final ProxySubject newState,
                                 final RecursiveUndoInfo info,
                                 final Set<? extends Subject> boundary)
  {
    super.collectUndoInfo(newState, info, boundary);
    final BoxGeometrySubject downcast = (BoxGeometrySubject) newState;
    if (!mRectangle.equals(downcast.mRectangle)) {
      final UndoInfo step1 =
        new ReplacementUndoInfo(1, mRectangle, downcast.mRectangle);
      info.add(step1);
    }
  }


  //#########################################################################
  //# Comparing
  public Class<BoxGeometryProxy> getProxyInterface()
  {
    return BoxGeometryProxy.class;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitBoxGeometryProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.BoxGeometryProxy
  public Rectangle2D getRectangle()
  {
    return (Rectangle2D) mRectangle.clone();
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the rectangle identifying this box geometry.
   */
  public void setRectangle(final Rectangle2D rectangle)
  {
    if (mRectangle.equals(rectangle)) {
      return;
    }
    mRectangle = (Rectangle2D) rectangle.clone();
    fireGeometryChanged();
  }


  //#########################################################################
  //# Data Members
  private Rectangle2D mRectangle;

}

//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   BoxGeometrySubject
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.awt.geom.Rectangle2D;

import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.BoxGeometryProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.subject.base.GeometrySubject;
import net.sourceforge.waters.subject.base.ProxySubject;


/**
 * The subject implementation of the {@link BoxGeometryProxy} interface.
 *
 * @author Robi Malik
 */

public final class BoxGeometrySubject
  extends GeometrySubject
  implements BoxGeometryProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new box geometry.
   * @param rectangle The rectangle of the new box geometry.
   */
  public BoxGeometrySubject(final Rectangle2D rectangle)
  {
    mRectangle = (Rectangle2D) rectangle.clone();
  }


  //#########################################################################
  //# Cloning and Assigning
  public BoxGeometrySubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (BoxGeometrySubject) cloner.getClone(this);
  }

  public boolean assignFrom(final ProxySubject partner)
  {
    if (this != partner) {
      final BoxGeometrySubject downcast = (BoxGeometrySubject) partner;
      boolean change = super.assignFrom(partner);
      final Rectangle2D rectangle = downcast.getRectangle();
      if (!mRectangle.equals(rectangle)) {
        mRectangle = (Rectangle2D) rectangle.clone();
        change = true;
      }
      if (change) {
        fireStateChanged();
      }
    }
    return false;
  }


  //#########################################################################
  //# Comparing
  public Class<BoxGeometryProxy> getProxyInterface()
  {
    return BoxGeometryProxy.class;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitBoxGeometryProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.BoxGeometryProxy
  public Rectangle2D getRectangle()
  {
    return (Rectangle2D) mRectangle.clone();
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the rectangle identifying this box geometry.
   */
  public void setRectangle(final Rectangle2D rectangle)
  {
    if (mRectangle.equals(rectangle)) {
      return;
    }
    mRectangle = (Rectangle2D) rectangle.clone();
    fireGeometryChanged();
  }


  //#########################################################################
  //# Data Members
  private Rectangle2D mRectangle;

}

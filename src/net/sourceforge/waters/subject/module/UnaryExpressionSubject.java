//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   UnaryExpressionSubject
//###########################################################################
//# $Id: UnaryExpressionSubject.java,v 1.11 2007-12-04 03:22:58 robi Exp $
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import net.sourceforge.waters.model.base.Proxy;
import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.expr.UnaryOperator;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.SimpleExpressionProxy;
import net.sourceforge.waters.model.module.UnaryExpressionProxy;
import net.sourceforge.waters.subject.base.ProxySubject;


/**
 * The subject implementation of the {@link UnaryExpressionProxy} interface.
 *
 * @author Robi Malik
 */

public final class UnaryExpressionSubject
  extends SimpleExpressionSubject
  implements UnaryExpressionProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new unary expression.
   * @param plainText The original text of the new unary expression, or <CODE>null</CODE>.
   * @param operator The operator of the new unary expression.
   * @param subTerm The subterm of the new unary expression.
   */
  public UnaryExpressionSubject(final String plainText,
                                final UnaryOperator operator,
                                final SimpleExpressionProxy subTerm)
  {
    super(plainText);
    mOperator = operator;
    mSubTerm = (SimpleExpressionSubject) subTerm;
    mSubTerm.setParent(this);
  }

  /**
   * Creates a new unary expression using default values.
   * This constructor creates an unary expression with
   * the original text set to <CODE>null</CODE>.
   * @param operator The operator of the new unary expression.
   * @param subTerm The subterm of the new unary expression.
   */
  public UnaryExpressionSubject(final UnaryOperator operator,
                                final SimpleExpressionProxy subTerm)
  {
    this(null,
         operator,
         subTerm);
  }


  //#########################################################################
  //# Cloning and Assigning
  public UnaryExpressionSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (UnaryExpressionSubject) cloner.getClone(this);
  }

  public boolean assignFrom(final ProxySubject partner)
  {
    if (this != partner) {
      final UnaryExpressionSubject downcast =
        (UnaryExpressionSubject) partner;
      boolean change = super.assignFrom(partner);
      final UnaryOperator operator = downcast.getOperator();
      if (mOperator != operator) {
        mOperator = operator;
        change = true;
      }
      final SimpleExpressionSubject subTerm = downcast.getSubTerm();
      if (mSubTerm.getClass() != subTerm.getClass()) {
        mSubTerm.setParent(null);
        mSubTerm = subTerm.clone();
        mSubTerm.setParent(this);
        change = true;
      } else {
        mSubTerm.assignFrom(subTerm);
      }
      if (change) {
        fireStateChanged();
      }
    }
    return false;
  }


  //#########################################################################
  //# Equality and Hashcode
  public Class<UnaryExpressionProxy> getProxyInterface()
  {
    return UnaryExpressionProxy.class;
  }

  public boolean equalsByContents(final Proxy partner)
  {
    if (super.equalsByContents(partner)) {
      final UnaryExpressionProxy downcast = (UnaryExpressionProxy) partner;
      return
        mOperator.equals(downcast.getOperator()) &&
        mSubTerm.equalsByContents(downcast.getSubTerm());
    } else {
      return false;
    }
  }

  public boolean equalsWithGeometry(final Proxy partner)
  {
    if (super.equalsWithGeometry(partner)) {
      final UnaryExpressionProxy downcast = (UnaryExpressionProxy) partner;
      return
        mOperator.equals(downcast.getOperator()) &&
        mSubTerm.equalsWithGeometry(downcast.getSubTerm());
    } else {
      return false;
    }
  }

  public int hashCodeByContents()
  {
    int result = super.hashCodeByContents();
    result *= 5;
    result += mOperator.hashCode();
    result *= 5;
    result += mSubTerm.hashCodeByContents();
    return result;
  }

  public int hashCodeWithGeometry()
  {
    int result = super.hashCodeWithGeometry();
    result *= 5;
    result += mOperator.hashCode();
    result *= 5;
    result += mSubTerm.hashCodeWithGeometry();
    return result;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitUnaryExpressionProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.UnaryExpressionProxy
  public UnaryOperator getOperator()
  {
    return mOperator;
  }

  public SimpleExpressionSubject getSubTerm()
  {
    return mSubTerm;
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the operator of this expression.
   */
  public void setOperator(final UnaryOperator operator)
  {
    if (mOperator.equals(operator)) {
      return;
    }
    mOperator = operator;
    fireStateChanged();
  }

  /**
   * Sets the subterm of this expression.
   */
  public void setSubTerm(final SimpleExpressionSubject subTerm)
  {
    if (mSubTerm == subTerm) {
      return;
    }
    subTerm.setParent(this);
    mSubTerm.setParent(null);
    mSubTerm = subTerm;
    fireStateChanged();
  }


  //#########################################################################
  //# Data Members
  private UnaryOperator mOperator;
  private SimpleExpressionSubject mSubTerm;

}

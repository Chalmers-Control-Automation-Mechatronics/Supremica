//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   UnaryExpressionSubject
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.expr.UnaryOperator;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.SimpleExpressionProxy;
import net.sourceforge.waters.model.module.UnaryExpressionProxy;
import net.sourceforge.waters.subject.base.ModelChangeEvent;
import net.sourceforge.waters.subject.base.ProxySubject;
import net.sourceforge.waters.subject.base.RecursiveUndoInfo;
import net.sourceforge.waters.subject.base.ReplacementUndoInfo;
import net.sourceforge.waters.subject.base.UndoInfo;


/**
 * The subject implementation of the {@link UnaryExpressionProxy} interface.
 *
 * @author Robi Malik
 */

public final class UnaryExpressionSubject
  extends SimpleExpressionSubject
  implements UnaryExpressionProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new unary expression.
   * @param plainText The original text of the new unary expression, or <CODE>null</CODE>.
   * @param operator The operator of the new unary expression.
   * @param subTerm The subterm of the new unary expression.
   */
  public UnaryExpressionSubject(final String plainText,
                                final UnaryOperator operator,
                                final SimpleExpressionProxy subTerm)
  {
    super(plainText);
    mOperator = operator;
    mSubTerm = (SimpleExpressionSubject) subTerm;
    mSubTerm.setParent(this);
  }

  /**
   * Creates a new unary expression using default values.
   * This constructor creates an unary expression with
   * the original text set to <CODE>null</CODE>.
   * @param operator The operator of the new unary expression.
   * @param subTerm The subterm of the new unary expression.
   */
  public UnaryExpressionSubject(final UnaryOperator operator,
                                final SimpleExpressionProxy subTerm)
  {
    this(null,
         operator,
         subTerm);
  }


  //#########################################################################
  //# Cloning and Assigning
  @Override
  public UnaryExpressionSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (UnaryExpressionSubject) cloner.getClone(this);
  }

  @Override
  public ModelChangeEvent assignMember(final int index,
                                       final Object oldValue,
                                       final Object newValue)
  {
    if (index <= 1) {
      return super.assignMember(index, oldValue, newValue);
    } else {
      switch (index) {
      case 2:
        mOperator = (UnaryOperator) newValue;
        return ModelChangeEvent.createStateChanged(this);
      case 3:
        mSubTerm.setParent(null);
        mSubTerm = (SimpleExpressionSubject) newValue;
        mSubTerm.setParent(this);
        return ModelChangeEvent.createStateChanged(this);
      default:
        return null;
      }
    }
  }

  @Override
  protected void collectUndoInfo(final ProxySubject newState,
                                 final RecursiveUndoInfo info)
  {
    super.collectUndoInfo(newState, info);
    final UnaryExpressionSubject downcast = (UnaryExpressionSubject) newState;
    if (!mOperator.equals(downcast.mOperator)) {
      final UndoInfo step2 =
        new ReplacementUndoInfo(2, mOperator, downcast.mOperator);
      info.add(step2);
    }
    if (mSubTerm.getClass() == downcast.mSubTerm.getClass()) {
      final UndoInfo step3 = mSubTerm.createUndoInfo(downcast.mSubTerm);
      if (step3 != null) {
        info.add(step3);
      }
    } else {
      final SimpleExpressionSubject clone3 = downcast.mSubTerm.clone();
      final UndoInfo step3 = new ReplacementUndoInfo(3, mSubTerm, clone3);
      info.add(step3);
    }
  }


  //#########################################################################
  //# Comparing
  public Class<UnaryExpressionProxy> getProxyInterface()
  {
    return UnaryExpressionProxy.class;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitUnaryExpressionProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.UnaryExpressionProxy
  public UnaryOperator getOperator()
  {
    return mOperator;
  }

  public SimpleExpressionSubject getSubTerm()
  {
    return mSubTerm;
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the operator of this expression.
   */
  public void setOperator(final UnaryOperator operator)
  {
    if (mOperator.equals(operator)) {
      return;
    }
    mOperator = operator;
    fireStateChanged();
  }

  /**
   * Sets the subterm of this expression.
   */
  public void setSubTerm(final SimpleExpressionSubject subTerm)
  {
    if (mSubTerm == subTerm) {
      return;
    }
    subTerm.setParent(this);
    mSubTerm.setParent(null);
    mSubTerm = subTerm;
    fireStateChanged();
  }


  //#########################################################################
  //# Data Members
  private UnaryOperator mOperator;
  private SimpleExpressionSubject mSubTerm;

}

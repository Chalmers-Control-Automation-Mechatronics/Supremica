//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   ModuleSequenceSubject
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.net.URI;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import net.sourceforge.waters.model.base.Proxy;
import net.sourceforge.waters.model.base.ProxyTools;
import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.ModuleProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.ModuleSequenceProxy;
import net.sourceforge.waters.model.unchecked.Casting;
import net.sourceforge.waters.subject.base.DocumentSubject;
import net.sourceforge.waters.subject.base.IndexedArrayListSubject;
import net.sourceforge.waters.subject.base.IndexedListSubject;
import net.sourceforge.waters.subject.base.ProxySubject;


/**
 * The subject implementation of the {@link ModuleSequenceProxy} interface.
 *
 * @author Robi Malik
 */

public final class ModuleSequenceSubject
  extends DocumentSubject
  implements ModuleSequenceProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new module sequence.
   * @param name The name of the new module sequence.
   * @param comment The comment of the new module sequence, or <CODE>null</CODE>.
   * @param location The location of the new module sequence.
   * @param modules The constant of the new module sequence, or <CODE>null</CODE> if empty.
   */
  public ModuleSequenceSubject(final String name,
                               final String comment,
                               final URI location,
                               final Collection<? extends ModuleProxy> modules)
  {
    super(name, comment, location);
    if (modules == null) {
      mModules = new IndexedArrayListSubject<ModuleSubject>();
    } else {
      mModules = new IndexedArrayListSubject<ModuleSubject>
        (modules, ModuleSubject.class);
    }
    mModules.setParent(this);
  }

  /**
   * Creates a new module sequence using default values.
   * This constructor creates a module sequence with
   * the comment set to <CODE>null</CODE> and
   * an empty constant.
   * @param name The name of the new module sequence.
   * @param location The location of the new module sequence.
   */
  public ModuleSequenceSubject(final String name,
                               final URI location)
  {
    this(name,
         null,
         location,
         null);
  }


  //#########################################################################
  //# Cloning and Assigning
  public ModuleSequenceSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (ModuleSequenceSubject) cloner.getClone(this);
  }

  public boolean assignFrom(final ProxySubject partner)
  {
    if (this != partner) {
      final ModuleSequenceSubject downcast = (ModuleSequenceSubject) partner;
      boolean change = super.assignFrom(partner);
      final IndexedListSubject<ModuleSubject> modules =
        downcast.getModulesModifiable();
      mModules.assignFrom(modules);
      if (change) {
        fireStateChanged();
      }
    }
    return false;
  }


  //#########################################################################
  //# Equality and Hashcode
  public Class<ModuleSequenceProxy> getProxyInterface()
  {
    return ModuleSequenceProxy.class;
  }

  public boolean equalsByContents(final Proxy partner)
  {
    if (super.equalsByContents(partner)) {
      final ModuleSequenceProxy downcast = (ModuleSequenceProxy) partner;
      return
        ProxyTools.isEqualListByContents
          (mModules, downcast.getModules());
    } else {
      return false;
    }
  }

  public boolean equalsWithGeometry(final Proxy partner)
  {
    if (super.equalsByContents(partner)) {
      final ModuleSequenceProxy downcast = (ModuleSequenceProxy) partner;
      return
        ProxyTools.isEqualListWithGeometry
          (mModules, downcast.getModules());
    } else {
      return false;
    }
  }

  public int hashCodeByContents()
  {
    int result = super.hashCodeByContents();
    result *= 5;
    result += ProxyTools.getListHashCodeByContents(mModules);
    return result;
  }

  public int hashCodeWithGeometry()
  {
    int result = super.hashCodeByContents();
    result *= 5;
    result += ProxyTools.getListHashCodeWithGeometry(mModules);
    return result;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitModuleSequenceProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.ModuleSequenceProxy
  public List<ModuleProxy> getModules()
  {
    final List<ModuleProxy> downcast = Casting.toList(mModules);
    return Collections.unmodifiableList(downcast);
  }


  //#########################################################################
  //# Setters
  /**
   * Gets the modifiable constant of this module sequence.
   */
  public IndexedListSubject<ModuleSubject> getModulesModifiable()
  {
    return mModules;
  }


  //#########################################################################
  //# Data Members
  private IndexedListSubject<ModuleSubject> mModules;

}

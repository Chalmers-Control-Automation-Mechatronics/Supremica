//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   SplineGeometrySubject
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.awt.geom.Point2D;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import net.sourceforge.waters.model.base.Proxy;
import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.SplineGeometryProxy;
import net.sourceforge.waters.model.unchecked.Casting;
import net.sourceforge.waters.subject.base.CloningGeometryListSubject;
import net.sourceforge.waters.subject.base.GeometrySubject;
import net.sourceforge.waters.subject.base.ProxySubject;
import net.sourceforge.waters.subject.base.SimpleListSubject;

import net.sourceforge.waters.xsd.module.SplineKind;


/**
 * The subject implementation of the {@link SplineGeometryProxy} interface.
 *
 * @author Robi Malik
 */

public final class SplineGeometrySubject
  extends GeometrySubject
  implements SplineGeometryProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new spline geometry.
   * @param points The list of control points of the new spline geometry, or <CODE>null</CODE> if empty.
   * @param kind The kind of the new spline geometry.
   */
  public SplineGeometrySubject(final Collection<? extends Point2D> points,
                               final SplineKind kind)
  {
    if (points == null) {
      mPoints = new CloningGeometryListSubject<Point2D>();
    } else {
      mPoints = new CloningGeometryListSubject<Point2D>(points);
    }
    mPoints.setParent(this);
    mKind = kind;
  }

  /**
   * Creates a new spline geometry using default values.
   * This constructor creates a spline geometry with
   * an empty list of control points and
   * the kind set to <CODE>SplineKind.INTERPOLATING</CODE>.
   */
  public SplineGeometrySubject()
  {
    this(null,
         SplineKind.INTERPOLATING);
  }


  //#########################################################################
  //# Cloning and Assigning
  public SplineGeometrySubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (SplineGeometrySubject) cloner.getClone(this);
  }

  public boolean assignFrom(final ProxySubject partner)
  {
    if (this != partner) {
      final SplineGeometrySubject downcast = (SplineGeometrySubject) partner;
      boolean change = super.assignFrom(partner);
      final SimpleListSubject<Point2D> points =
        downcast.getPointsModifiable();
      mPoints.assignFrom(points);
      final SplineKind kind = downcast.getKind();
      if (mKind != kind) {
        mKind = kind;
        change = true;
      }
      if (change) {
        fireStateChanged();
      }
    }
    return false;
  }


  //#########################################################################
  //# Equality and Hashcode
  public Class<SplineGeometryProxy> getProxyInterface()
  {
    return SplineGeometryProxy.class;
  }

  public boolean equalsByContents(final Proxy partner)
  {
    if (super.equalsByContents(partner)) {
      final SplineGeometryProxy downcast = (SplineGeometryProxy) partner;
      return
        mPoints.equals(downcast.getPoints()) &&
        mKind.equals(downcast.getKind());
    } else {
      return false;
    }
  }

  public int hashCodeByContents()
  {
    int result = super.hashCodeByContents();
    result *= 5;
    result += mPoints.hashCode();
    result *= 5;
    result += mKind.hashCode();
    return result;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitSplineGeometryProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.SplineGeometryProxy
  public List<Point2D> getPoints()
  {
    final List<Point2D> downcast = Casting.toList(mPoints);
    return Collections.unmodifiableList(downcast);
  }

  public SplineKind getKind()
  {
    return mKind;
  }


  //#########################################################################
  //# Setters
  /**
   * Gets the modifiable list of control points of this spline geometry.
   */
  public SimpleListSubject<Point2D> getPointsModifiable()
  {
    return mPoints;
  }

  /**
   * Sets the spline type.
   */
  public void setKind(final SplineKind kind)
  {
    if (mKind.equals(kind)) {
      return;
    }
    mKind = kind;
    fireGeometryChanged();
  }


  //#########################################################################
  //# Data Members
  private SimpleListSubject<Point2D> mPoints;
  private SplineKind mKind;

}

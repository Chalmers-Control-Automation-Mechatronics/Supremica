//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################
//# Copyright (C) 2004-2020 Robi Malik
//###########################################################################
//# This file is part of Waters.
//# Waters is free software: you can redistribute it and/or modify it under
//# the terms of the GNU General Public License as published by the Free
//# Software Foundation, either version 2 of the License, or (at your option)
//# any later version.
//# Waters is distributed in the hope that it will be useful, but WITHOUT ANY
//# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
//# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
//# details.
//# You should have received a copy of the GNU General Public License along
//# with Waters. If not, see <http://www.gnu.org/licenses/>.
//#
//# Linking Waters statically or dynamically with other modules is making a
//# combined work based on Waters. Thus, the terms and conditions of the GNU
//# General Public License cover the whole combination.
//# In addition, as a special exception, the copyright holders of Waters give
//# you permission to combine Waters with code included in the standard
//# release of Supremica under the Supremica Software License Agreement (or
//# modified versions of such code, with unchanged license). You may copy and
//# distribute such a system following the terms of the GNU GPL for Waters and
//# the licenses of the other code concerned.
//# Note that people who make modified versions of Waters are not obligated to
//# grant this special exception for their modified versions; it is their
//# choice whether to do so. The GNU General Public License gives permission
//# to release a modified version without this exception; this exception also
//# makes it possible to release a modified version which carries forward this
//# exception.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.awt.geom.Point2D;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Set;

import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.SplineGeometryProxy;
import net.sourceforge.waters.model.module.SplineKind;
import net.sourceforge.waters.subject.base.CloningGeometryListSubject;
import net.sourceforge.waters.subject.base.GeometrySubject;
import net.sourceforge.waters.subject.base.ModelChangeEvent;
import net.sourceforge.waters.subject.base.ProxySubject;
import net.sourceforge.waters.subject.base.RecursiveUndoInfo;
import net.sourceforge.waters.subject.base.ReplacementUndoInfo;
import net.sourceforge.waters.subject.base.SimpleListSubject;
import net.sourceforge.waters.subject.base.Subject;
import net.sourceforge.waters.subject.base.UndoInfo;


/**
 * The subject implementation of the {@link SplineGeometryProxy} interface.
 *
 * @author Robi Malik
 */

public final class SplineGeometrySubject
  extends GeometrySubject
  implements SplineGeometryProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new spline geometry.
   * @param points The list of control points of the new spline geometry, or <CODE>null</CODE> if empty.
   * @param kind The kind of the new spline geometry.
   */
  public SplineGeometrySubject(final Collection<? extends Point2D> points,
                               final SplineKind kind)
  {
    if (points == null) {
      mPoints = new CloningGeometryListSubject<Point2D>();
    } else {
      mPoints = new CloningGeometryListSubject<Point2D>(points);
    }
    mPoints.setParent(this);
    mKind = kind;
  }

  /**
   * Creates a new spline geometry using default values.
   * This constructor creates a spline geometry with
   * an empty list of control points and
   * the kind set to <CODE>SplineKind.INTERPOLATING</CODE>.
   */
  public SplineGeometrySubject()
  {
    this(null,
         SplineKind.INTERPOLATING);
  }


  //#########################################################################
  //# Cloning and Assigning
  @Override
  public SplineGeometrySubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (SplineGeometrySubject) cloner.getClone(this);
  }

  @Override
  public ModelChangeEvent assignMember(final int index,
                                       final Object oldValue,
                                       final Object newValue)
  {
    if (index <= 0) {
      return super.assignMember(index, oldValue, newValue);
    } else {
      switch (index) {
      case 2:
        mKind = (SplineKind) newValue;
        return ModelChangeEvent.createGeometryChanged(this, newValue);
      default:
        return null;
      }
    }
  }

  @Override
  protected void collectUndoInfo(final ProxySubject newState,
                                 final RecursiveUndoInfo info,
                                 final Set<? extends Subject> boundary)
  {
    super.collectUndoInfo(newState, info, boundary);
    final SplineGeometrySubject downcast = (SplineGeometrySubject) newState;
    final UndoInfo step1 = mPoints.createUndoInfo(downcast.mPoints, boundary);
    if (step1 != null) {
      info.add(step1);
    }
    if (!mKind.equals(downcast.mKind)) {
      final UndoInfo step2 =
        new ReplacementUndoInfo(2, mKind, downcast.mKind);
      info.add(step2);
    }
  }


  //#########################################################################
  //# Comparing
  public Class<SplineGeometryProxy> getProxyInterface()
  {
    return SplineGeometryProxy.class;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitSplineGeometryProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.SplineGeometryProxy
  public List<Point2D> getPoints()
  {
    final List<?> precast = mPoints;
    @SuppressWarnings("unchecked")
    final List<Point2D> downcast = (List<Point2D>) precast;
    return Collections.unmodifiableList(downcast);
  }

  public SplineKind getKind()
  {
    return mKind;
  }


  //#########################################################################
  //# Setters
  /**
   * Gets the modifiable list of control points of this spline geometry.
   */
  public SimpleListSubject<Point2D> getPointsModifiable()
  {
    return mPoints;
  }

  /**
   * Sets the spline type.
   */
  public void setKind(final SplineKind kind)
  {
    if (mKind.equals(kind)) {
      return;
    }
    mKind = kind;
    fireGeometryChanged();
  }


  //#########################################################################
  //# Data Members
  private SimpleListSubject<Point2D> mPoints;
  private SplineKind mKind;

}

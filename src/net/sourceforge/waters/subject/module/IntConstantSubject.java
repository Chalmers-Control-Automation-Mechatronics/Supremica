//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   IntConstantSubject
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.IntConstantProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.subject.base.ModelChangeEvent;
import net.sourceforge.waters.subject.base.ProxySubject;
import net.sourceforge.waters.subject.base.RecursiveUndoInfo;
import net.sourceforge.waters.subject.base.ReplacementUndoInfo;
import net.sourceforge.waters.subject.base.UndoInfo;


/**
 * The subject implementation of the {@link IntConstantProxy} interface.
 *
 * @author Robi Malik
 */

public final class IntConstantSubject
  extends SimpleExpressionSubject
  implements IntConstantProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new integer constant.
   * @param plainText The original text of the new integer constant, or <CODE>null</CODE>.
   * @param value The integer value of the new integer constant.
   */
  public IntConstantSubject(final String plainText,
                            final int value)
  {
    super(plainText);
    mValue = value;
  }

  /**
   * Creates a new integer constant using default values.
   * This constructor creates an integer constant with
   * the original text set to <CODE>null</CODE>.
   * @param value The integer value of the new integer constant.
   */
  public IntConstantSubject(final int value)
  {
    this(null,
         value);
  }


  //#########################################################################
  //# Cloning and Assigning
  @Override
  public IntConstantSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (IntConstantSubject) cloner.getClone(this);
  }

  @Override
  public ModelChangeEvent assignMember(final int index,
                                       final Object oldValue,
                                       final Object newValue)
  {
    if (index <= 1) {
      return super.assignMember(index, oldValue, newValue);
    } else {
      switch (index) {
      case 2:
        mValue = (Integer) newValue;
        return ModelChangeEvent.createStateChanged(this);
      default:
        return null;
      }
    }
  }

  @Override
  protected void collectUndoInfo(final ProxySubject newState,
                                 final RecursiveUndoInfo info)
  {
    super.collectUndoInfo(newState, info);
    final IntConstantSubject downcast = (IntConstantSubject) newState;
    if (mValue != downcast.mValue) {
      final UndoInfo step2 =
        new ReplacementUndoInfo(2, mValue, downcast.mValue);
      info.add(step2);
    }
  }


  //#########################################################################
  //# Comparing
  public Class<IntConstantProxy> getProxyInterface()
  {
    return IntConstantProxy.class;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitIntConstantProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.IntConstantProxy
  public int getValue()
  {
    return mValue;
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the integer value of this constant.
   */
  public void setValue(final int value)
  {
    if (mValue == value) {
      return;
    }
    mValue = value;
    fireStateChanged();
  }


  //#########################################################################
  //# Data Members
  private int mValue;

}

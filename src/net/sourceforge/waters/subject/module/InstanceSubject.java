//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   InstanceSubject
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.util.Collection;
import java.util.Collections;
import java.util.List;

import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.IdentifierProxy;
import net.sourceforge.waters.model.module.InstanceProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.ParameterBindingProxy;
import net.sourceforge.waters.subject.base.IndexedArrayListSubject;
import net.sourceforge.waters.subject.base.IndexedListSubject;
import net.sourceforge.waters.subject.base.ModelChangeEvent;
import net.sourceforge.waters.subject.base.ProxySubject;
import net.sourceforge.waters.subject.base.RecursiveUndoInfo;
import net.sourceforge.waters.subject.base.ReplacementUndoInfo;
import net.sourceforge.waters.subject.base.UndoInfo;


/**
 * The subject implementation of the {@link InstanceProxy} interface.
 *
 * @author Robi Malik
 */

public final class InstanceSubject
  extends ComponentSubject
  implements InstanceProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new instance.
   * @param identifier The identifier defining the name of the new instance.
   * @param moduleName The module name of the new instance.
   * @param bindingList The binding list of the new instance, or <CODE>null</CODE> if empty.
   */
  public InstanceSubject(final IdentifierProxy identifier,
                         final String moduleName,
                         final Collection<? extends ParameterBindingProxy> bindingList)
  {
    super(identifier);
    mModuleName = moduleName;
    if (bindingList == null) {
      mBindingList = new IndexedArrayListSubject<ParameterBindingSubject>();
    } else {
      mBindingList = new IndexedArrayListSubject<ParameterBindingSubject>
        (bindingList, ParameterBindingSubject.class);
    }
    mBindingList.setParent(this);
  }

  /**
   * Creates a new instance using default values.
   * This constructor creates an instance with
   * an empty binding list.
   * @param identifier The identifier defining the name of the new instance.
   * @param moduleName The module name of the new instance.
   */
  public InstanceSubject(final IdentifierProxy identifier,
                         final String moduleName)
  {
    this(identifier,
         moduleName,
         null);
  }


  //#########################################################################
  //# Cloning and Assigning
  @Override
  public InstanceSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (InstanceSubject) cloner.getClone(this);
  }

  @Override
  public ModelChangeEvent assignMember(final int index,
                                       final Object oldValue,
                                       final Object newValue)
  {
    if (index <= 1) {
      return super.assignMember(index, oldValue, newValue);
    } else {
      switch (index) {
      case 2:
        mModuleName = (String) newValue;
        return ModelChangeEvent.createStateChanged(this);
      default:
        return null;
      }
    }
  }

  @Override
  protected void collectUndoInfo(final ProxySubject newState,
                                 final RecursiveUndoInfo info)
  {
    super.collectUndoInfo(newState, info);
    final InstanceSubject downcast = (InstanceSubject) newState;
    if (!mModuleName.equals(downcast.mModuleName)) {
      final UndoInfo step2 =
        new ReplacementUndoInfo(2, mModuleName, downcast.mModuleName);
      info.add(step2);
    }
    final UndoInfo step3 = mBindingList.createUndoInfo(downcast.mBindingList);
    if (step3 != null) {
      info.add(step3);
    }
  }


  //#########################################################################
  //# Comparing
  public Class<InstanceProxy> getProxyInterface()
  {
    return InstanceProxy.class;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitInstanceProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.InstanceProxy
  public String getModuleName()
  {
    return mModuleName;
  }

  public List<ParameterBindingProxy> getBindingList()
  {
    final List<?> precast = mBindingList;
    @SuppressWarnings("unchecked")
    final List<ParameterBindingProxy> downcast =
      (List<ParameterBindingProxy>) precast;
    return Collections.unmodifiableList(downcast);
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the module name of this instance.
   */
  public void setModuleName(final String moduleName)
  {
    if (mModuleName.equals(moduleName)) {
      return;
    }
    mModuleName = moduleName;
    fireStateChanged();
  }

  /**
   * Gets the modifiable binding list of this instance.
   */
  public IndexedListSubject<ParameterBindingSubject> getBindingListModifiable()
  {
    return mBindingList;
  }


  //#########################################################################
  //# Data Members
  private String mModuleName;
  private IndexedListSubject<ParameterBindingSubject> mBindingList;

}

//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   GuardActionBlockSubject
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.util.Collection;
import java.util.Collections;
import java.util.List;

import net.sourceforge.waters.model.base.ProxyTools;
import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.BinaryExpressionProxy;
import net.sourceforge.waters.model.module.GuardActionBlockProxy;
import net.sourceforge.waters.model.module.LabelGeometryProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.SimpleExpressionProxy;
import net.sourceforge.waters.subject.base.ArrayListSubject;
import net.sourceforge.waters.subject.base.ListSubject;
import net.sourceforge.waters.subject.base.ModelChangeEvent;
import net.sourceforge.waters.subject.base.MutableSubject;
import net.sourceforge.waters.subject.base.ProxySubject;
import net.sourceforge.waters.subject.base.RecursiveUndoInfo;
import net.sourceforge.waters.subject.base.ReplacementUndoInfo;
import net.sourceforge.waters.subject.base.UndoInfo;


/**
 * The subject implementation of the {@link GuardActionBlockProxy} interface.
 *
 * @author Robi Malik
 */

public final class GuardActionBlockSubject
  extends MutableSubject
  implements GuardActionBlockProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new guard action block.
   * @param guards The guards of the new guard action block, or <CODE>null</CODE> if empty.
   * @param actions The actions of the new guard action block, or <CODE>null</CODE> if empty.
   * @param geometry The geometry of the new guard action block, or <CODE>null</CODE>.
   */
  public GuardActionBlockSubject(final Collection<? extends SimpleExpressionProxy> guards,
                                 final Collection<? extends BinaryExpressionProxy> actions,
                                 final LabelGeometryProxy geometry)
  {
    if (guards == null) {
      mGuards = new ArrayListSubject<SimpleExpressionSubject>();
    } else {
      mGuards = new ArrayListSubject<SimpleExpressionSubject>
        (guards, SimpleExpressionSubject.class);
    }
    mGuards.setParent(this);
    if (actions == null) {
      mActions = new ArrayListSubject<BinaryExpressionSubject>();
    } else {
      mActions = new ArrayListSubject<BinaryExpressionSubject>
        (actions, BinaryExpressionSubject.class);
    }
    mActions.setParent(this);
    mGeometry = (LabelGeometrySubject) geometry;
    if (mGeometry != null) {
      mGeometry.setParent(this);
    }
  }

  /**
   * Creates a new guard action block using default values.
   * This constructor creates a guard action block with
   * an empty guards,
   * an empty actions, and
   * the geometry set to <CODE>null</CODE>.
   */
  public GuardActionBlockSubject()
  {
    this(null,
         null,
         null);
  }


  //#########################################################################
  //# Cloning and Assigning
  @Override
  public GuardActionBlockSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (GuardActionBlockSubject) cloner.getClone(this);
  }

  @Override
  public ModelChangeEvent assignMember(final int index,
                                       final Object oldValue,
                                       final Object newValue)
  {
    if (index <= 0) {
      return super.assignMember(index, oldValue, newValue);
    } else {
      switch (index) {
      case 3:
        if (mGeometry != null) {
          mGeometry.setParent(null);
        }
        mGeometry = (LabelGeometrySubject) newValue;
        if (mGeometry != null) {
          mGeometry.setParent(this);
        }
        return ModelChangeEvent.createGeometryChanged(this, newValue);
      default:
        return null;
      }
    }
  }

  @Override
  protected void collectUndoInfo(final ProxySubject newState,
                                 final RecursiveUndoInfo info)
  {
    super.collectUndoInfo(newState, info);
    final GuardActionBlockSubject downcast =
      (GuardActionBlockSubject) newState;
    final UndoInfo step1 = mGuards.createUndoInfo(downcast.mGuards);
    if (step1 != null) {
      info.add(step1);
    }
    final UndoInfo step2 = mActions.createUndoInfo(downcast.mActions);
    if (step2 != null) {
      info.add(step2);
    }
    final boolean null3a = mGeometry == null;
    final boolean null3b = downcast.mGeometry == null;
    if (null3a != null3b) {
      final LabelGeometrySubject clone3 =
        ProxyTools.clone(downcast.mGeometry);
      final UndoInfo step3 = new ReplacementUndoInfo(3, mGeometry, clone3);
      info.add(step3);
    } else if (!null3a) {
      final UndoInfo step3 = mGeometry.createUndoInfo(downcast.mGeometry);
      if (step3 != null) {
        info.add(step3);
      }
    }
  }


  //#########################################################################
  //# Comparing
  public Class<GuardActionBlockProxy> getProxyInterface()
  {
    return GuardActionBlockProxy.class;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitGuardActionBlockProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.GuardActionBlockProxy
  public List<SimpleExpressionProxy> getGuards()
  {
    final List<?> precast = mGuards;
    @SuppressWarnings("unchecked")
    final List<SimpleExpressionProxy> downcast =
      (List<SimpleExpressionProxy>) precast;
    return Collections.unmodifiableList(downcast);
  }

  public List<BinaryExpressionProxy> getActions()
  {
    final List<?> precast = mActions;
    @SuppressWarnings("unchecked")
    final List<BinaryExpressionProxy> downcast =
      (List<BinaryExpressionProxy>) precast;
    return Collections.unmodifiableList(downcast);
  }

  public LabelGeometrySubject getGeometry()
  {
    return mGeometry;
  }


  //#########################################################################
  //# Setters
  public ListSubject<SimpleExpressionSubject> getGuardsModifiable()
  {
    return mGuards;
  }

  public ListSubject<BinaryExpressionSubject> getActionsModifiable()
  {
    return mActions;
  }

  public void setGeometry(final LabelGeometrySubject geometry)
  {
    if (mGeometry == geometry) {
      return;
    }
    if (geometry != null) {
      geometry.setParent(this);
    }
    if (mGeometry != null) {
      mGeometry.setParent(null);
    }
    mGeometry = geometry;
    fireGeometryChanged(mGeometry);
  }


  //#########################################################################
  //# Data Members
  private ListSubject<SimpleExpressionSubject> mGuards;
  private ListSubject<BinaryExpressionSubject> mActions;
  private LabelGeometrySubject mGeometry;

}

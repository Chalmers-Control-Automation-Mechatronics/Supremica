//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   ForeachSubject
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.util.Collection;
import java.util.Collections;
import java.util.List;

import net.sourceforge.waters.model.base.Proxy;
import net.sourceforge.waters.model.base.ProxyTools;
import net.sourceforge.waters.model.module.ForeachProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.SimpleExpressionProxy;
import net.sourceforge.waters.model.unchecked.Casting;
import net.sourceforge.waters.subject.base.AbstractSubject;
import net.sourceforge.waters.subject.base.ArrayListSubject;
import net.sourceforge.waters.subject.base.ListSubject;
import net.sourceforge.waters.subject.base.NamedSubject;
import net.sourceforge.waters.subject.base.ProxySubject;


/**
 * The subject implementation of the {@link ForeachProxy} interface.
 *
 * @author Robi Malik
 */

public abstract class ForeachSubject
  extends NamedSubject
  implements ForeachProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new foreach construct.
   * @param name The name of the new foreach construct.
   * @param range The range of the new foreach construct.
   * @param guard The guard of the new foreach construct, or <CODE>null</CODE>.
   * @param body The body of the new foreach construct, or <CODE>null</CODE> if empty.
   */
  protected ForeachSubject(final String name,
                           final SimpleExpressionProxy range,
                           final SimpleExpressionProxy guard,
                           final Collection<? extends Proxy> body)
  {
    super(name);
    mRange = (SimpleExpressionSubject) range;
    mRange.setParent(this);
    mGuard = (SimpleExpressionSubject) guard;
    if (mGuard != null) {
      mGuard.setParent(this);
    }
    if (body == null) {
      mBody = new ArrayListSubject<AbstractSubject>();
    } else {
      mBody = new ArrayListSubject<AbstractSubject>
        (body, AbstractSubject.class);
    }
    mBody.setParent(this);
  }

  /**
   * Creates a new foreach construct using default values.
   * This constructor creates a foreach construct with
   * the guard set to <CODE>null</CODE> and
   * an empty body.
   * @param name The name of the new foreach construct.
   * @param range The range of the new foreach construct.
   */
  protected ForeachSubject(final String name,
                           final SimpleExpressionProxy range)
  {
    this(name,
         range,
         null,
         null);
  }


  //#########################################################################
  //# Cloning and Assigning
  public ForeachSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (ForeachSubject) cloner.getClone(this);
  }

  public boolean assignFrom(final ProxySubject partner)
  {
    if (this != partner) {
      final ForeachSubject downcast = (ForeachSubject) partner;
      boolean change = super.assignFrom(partner);
      final SimpleExpressionSubject range = downcast.getRange();
      if (mRange.getClass() != range.getClass()) {
        mRange.setParent(null);
        mRange = range.clone();
        mRange.setParent(this);
        change = true;
      } else {
        mRange.assignFrom(range);
      }
      final SimpleExpressionSubject guard = downcast.getGuard();
      if (mGuard == guard) {
        // nothing
      } else if (mGuard == null) {
        mGuard = guard.clone();
        mGuard.setParent(this);
        change = true;
      } else if (guard == null) {
        mGuard.setParent(null);
        mGuard = null;
        change = true;
      } else if (mGuard.getClass() != guard.getClass()) {
        mGuard.setParent(null);
        mGuard = guard.clone();
        mGuard.setParent(this);
        change = true;
      } else {
        mGuard.assignFrom(guard);
      }
      final ListSubject<AbstractSubject> body = downcast.getBodyModifiable();
      mBody.assignFrom(body);
      return change;
    } else {
      return false;
    }
  }


  //#########################################################################
  //# Equality and Hashcode
  public boolean equalsByContents(final Proxy partner)
  {
    if (super.equalsByContents(partner)) {
      final ForeachProxy downcast = (ForeachProxy) partner;
      return
        mRange.equalsByContents(downcast.getRange()) &&
        ProxyTools.equalsByContents(mGuard, downcast.getGuard()) &&
        ProxyTools.isEqualListByContents
          (mBody, downcast.getBody());
    } else {
      return false;
    }
  }

  public boolean equalsWithGeometry(final Proxy partner)
  {
    if (super.equalsByContents(partner)) {
      final ForeachProxy downcast = (ForeachProxy) partner;
      return
        mRange.equalsWithGeometry(downcast.getRange()) &&
        ProxyTools.equalsWithGeometry(mGuard, downcast.getGuard()) &&
        ProxyTools.isEqualListWithGeometry
          (mBody, downcast.getBody());
    } else {
      return false;
    }
  }

  public int hashCodeByContents()
  {
    int result = super.hashCodeByContents();
    result *= 5;
    result += mRange.hashCodeByContents();
    result *= 5;
    result += ProxyTools.hashCodeByContents(mGuard);
    result *= 5;
    result += ProxyTools.getListHashCodeByContents(mBody);
    return result;
  }

  public int hashCodeWithGeometry()
  {
    int result = super.hashCodeByContents();
    result *= 5;
    result += mRange.hashCodeWithGeometry();
    result *= 5;
    result += ProxyTools.hashCodeWithGeometry(mGuard);
    result *= 5;
    result += ProxyTools.getListHashCodeWithGeometry(mBody);
    return result;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.ForeachProxy
  public SimpleExpressionSubject getRange()
  {
    return mRange;
  }

  public SimpleExpressionSubject getGuard()
  {
    return mGuard;
  }

  public List<Proxy> getBody()
  {
    final List<Proxy> downcast = Casting.toList(mBody);
    return Collections.unmodifiableList(downcast);
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the range of this foreach construct.
   */
  public void setRange(final SimpleExpressionSubject range)
  {
    if (mRange == range) {
      return;
    }
    range.setParent(this);
    mRange.setParent(null);
    mRange = range;
    fireStateChanged();
  }

  /**
   * Sets the guard of this foreach construct.
   */
  public void setGuard(final SimpleExpressionSubject guard)
  {
    if (mGuard == guard) {
      return;
    }
    if (guard != null) {
      guard.setParent(this);
    }
    if (mGuard != null) {
      mGuard.setParent(null);
    }
    mGuard = guard;
    fireStateChanged();
  }

  /**
   * Gets the modifiable body of this foreach construct.
   */
  public ListSubject<AbstractSubject> getBodyModifiable()
  {
    return mBody;
  }


  //#########################################################################
  //# Data Members
  private SimpleExpressionSubject mRange;
  private SimpleExpressionSubject mGuard;
  private ListSubject<AbstractSubject> mBody;

}

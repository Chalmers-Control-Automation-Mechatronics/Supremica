//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   ForeachSubject
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.util.Collection;
import java.util.Collections;
import java.util.List;

import net.sourceforge.waters.model.base.Proxy;
import net.sourceforge.waters.model.base.ProxyTools;
import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.ForeachProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.SimpleExpressionProxy;
import net.sourceforge.waters.subject.base.AbstractSubject;
import net.sourceforge.waters.subject.base.ArrayListSubject;
import net.sourceforge.waters.subject.base.ListSubject;
import net.sourceforge.waters.subject.base.ModelChangeEvent;
import net.sourceforge.waters.subject.base.NamedSubject;
import net.sourceforge.waters.subject.base.ProxySubject;
import net.sourceforge.waters.subject.base.RecursiveUndoInfo;
import net.sourceforge.waters.subject.base.ReplacementUndoInfo;
import net.sourceforge.waters.subject.base.UndoInfo;


/**
 * The subject implementation of the {@link ForeachProxy} interface.
 *
 * @author Robi Malik
 */

public final class ForeachSubject
  extends NamedSubject
  implements ForeachProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new foreach construct.
   * @param name The name of the new foreach construct.
   * @param range The range of the new foreach construct.
   * @param guard The guard of the new foreach construct, or <CODE>null</CODE>.
   * @param body The body of the new foreach construct, or <CODE>null</CODE> if empty.
   */
  public ForeachSubject(final String name,
                        final SimpleExpressionProxy range,
                        final SimpleExpressionProxy guard,
                        final Collection<? extends Proxy> body)
  {
    super(name);
    mRange = (SimpleExpressionSubject) range;
    mRange.setParent(this);
    mGuard = (SimpleExpressionSubject) guard;
    if (mGuard != null) {
      mGuard.setParent(this);
    }
    if (body == null) {
      mBody = new ArrayListSubject<AbstractSubject>();
    } else {
      mBody = new ArrayListSubject<AbstractSubject>
        (body, AbstractSubject.class);
    }
    mBody.setParent(this);
  }

  /**
   * Creates a new foreach construct using default values.
   * This constructor creates a foreach construct with
   * the guard set to <CODE>null</CODE> and
   * an empty body.
   * @param name The name of the new foreach construct.
   * @param range The range of the new foreach construct.
   */
  public ForeachSubject(final String name,
                        final SimpleExpressionProxy range)
  {
    this(name,
         range,
         null,
         null);
  }


  //#########################################################################
  //# Cloning and Assigning
  @Override
  public ForeachSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (ForeachSubject) cloner.getClone(this);
  }

  @Override
  public ModelChangeEvent assignMember(final int index,
                                       final Object oldValue,
                                       final Object newValue)
  {
    if (index <= 1) {
      return super.assignMember(index, oldValue, newValue);
    } else {
      switch (index) {
      case 2:
        mRange.setParent(null);
        mRange = (SimpleExpressionSubject) newValue;
        mRange.setParent(this);
        return ModelChangeEvent.createStateChanged(this);
      case 3:
        if (mGuard != null) {
          mGuard.setParent(null);
        }
        mGuard = (SimpleExpressionSubject) newValue;
        if (mGuard != null) {
          mGuard.setParent(this);
        }
        return ModelChangeEvent.createStateChanged(this);
      default:
        return null;
      }
    }
  }

  @Override
  protected void collectUndoInfo(final ProxySubject newState,
                                 final RecursiveUndoInfo info)
  {
    super.collectUndoInfo(newState, info);
    final ForeachSubject downcast = (ForeachSubject) newState;
    if (mRange.getClass() == downcast.mRange.getClass()) {
      final UndoInfo step2 = mRange.createUndoInfo(downcast.mRange);
      if (step2 != null) {
        info.add(step2);
      }
    } else {
      final SimpleExpressionSubject clone2 = downcast.mRange.clone();
      final UndoInfo step2 = new ReplacementUndoInfo(2, mRange, clone2);
      info.add(step2);
    }
    final boolean null3a = mGuard == null;
    final boolean null3b = downcast.mGuard == null;
    if (null3a != null3b ||
        !null3a && mGuard.getClass() != downcast.mGuard.getClass()) {
      final SimpleExpressionSubject clone3 =
        ProxyTools.clone(downcast.mGuard);
      final UndoInfo step3 = new ReplacementUndoInfo(3, mGuard, clone3);
      info.add(step3);
    } else if (!null3a) {
      final UndoInfo step3 = mGuard.createUndoInfo(downcast.mGuard);
      if (step3 != null) {
        info.add(step3);
      }
    }
    final UndoInfo step4 = mBody.createUndoInfo(downcast.mBody);
    if (step4 != null) {
      info.add(step4);
    }
  }


  //#########################################################################
  //# Comparing
  public Class<ForeachProxy> getProxyInterface()
  {
    return ForeachProxy.class;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitForeachProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.ForeachProxy
  public SimpleExpressionSubject getRange()
  {
    return mRange;
  }

  public SimpleExpressionSubject getGuard()
  {
    return mGuard;
  }

  public List<Proxy> getBody()
  {
    final List<?> precast = mBody;
    @SuppressWarnings("unchecked")
    final List<Proxy> downcast = (List<Proxy>) precast;
    return Collections.unmodifiableList(downcast);
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the range of this foreach construct.
   */
  public void setRange(final SimpleExpressionSubject range)
  {
    if (mRange == range) {
      return;
    }
    range.setParent(this);
    mRange.setParent(null);
    mRange = range;
    fireStateChanged();
  }

  /**
   * Sets the guard of this foreach construct.
   */
  public void setGuard(final SimpleExpressionSubject guard)
  {
    if (mGuard == guard) {
      return;
    }
    if (guard != null) {
      guard.setParent(this);
    }
    if (mGuard != null) {
      mGuard.setParent(null);
    }
    mGuard = guard;
    fireStateChanged();
  }

  /**
   * Gets the modifiable body of this foreach construct.
   */
  public ListSubject<AbstractSubject> getBodyModifiable()
  {
    return mBody;
  }


  //#########################################################################
  //# Data Members
  private SimpleExpressionSubject mRange;
  private SimpleExpressionSubject mGuard;
  private ListSubject<AbstractSubject> mBody;

}

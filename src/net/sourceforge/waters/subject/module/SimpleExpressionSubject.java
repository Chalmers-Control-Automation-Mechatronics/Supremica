//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   SimpleExpressionSubject
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.util.Set;

import net.sourceforge.waters.model.base.ProxyTools;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.SimpleExpressionProxy;
import net.sourceforge.waters.subject.base.ModelChangeEvent;
import net.sourceforge.waters.subject.base.ProxySubject;
import net.sourceforge.waters.subject.base.RecursiveUndoInfo;
import net.sourceforge.waters.subject.base.ReplacementUndoInfo;
import net.sourceforge.waters.subject.base.Subject;
import net.sourceforge.waters.subject.base.UndoInfo;


/**
 * The subject implementation of the {@link SimpleExpressionProxy} interface.
 *
 * @author Robi Malik
 */

public abstract class SimpleExpressionSubject
  extends ExpressionSubject
  implements SimpleExpressionProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new simple expression.
   * @param plainText The original text of the new simple expression, or <CODE>null</CODE>.
   */
  protected SimpleExpressionSubject(final String plainText)
  {
    mPlainText = plainText;
  }

  /**
   * Creates a new simple expression using default values.
   * This constructor creates a simple expression with
   * the original text set to <CODE>null</CODE>.
   */
  protected SimpleExpressionSubject()
  {
    this(null);
  }


  //#########################################################################
  //# Cloning and Assigning
  @Override
  public SimpleExpressionSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (SimpleExpressionSubject) cloner.getClone(this);
  }

  @Override
  public ModelChangeEvent assignMember(final int index,
                                       final Object oldValue,
                                       final Object newValue)
  {
    if (index <= 0) {
      return super.assignMember(index, oldValue, newValue);
    } else {
      switch (index) {
      case 1:
        mPlainText = (String) newValue;
        return ModelChangeEvent.createGeometryChanged(this, newValue);
      default:
        return null;
      }
    }
  }

  @Override
  protected void collectUndoInfo(final ProxySubject newState,
                                 final RecursiveUndoInfo info,
                                 final Set<? extends Subject> boundary)
  {
    super.collectUndoInfo(newState, info, boundary);
    final SimpleExpressionSubject downcast =
      (SimpleExpressionSubject) newState;
    if (!ProxyTools.equals(mPlainText, downcast.mPlainText)) {
      final UndoInfo step1 =
        new ReplacementUndoInfo(1, mPlainText, downcast.mPlainText);
      info.add(step1);
    }
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.SimpleExpressionProxy
  public String getPlainText()
  {
    return mPlainText;
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the original text of this expression.
   */
  public void setPlainText(final String plainText)
  {
    if (mPlainText.equals(plainText)) {
      return;
    }
    mPlainText = plainText;
    fireGeometryChanged(mPlainText);
  }


  //#########################################################################
  //# Data Members
  private String mPlainText;

}

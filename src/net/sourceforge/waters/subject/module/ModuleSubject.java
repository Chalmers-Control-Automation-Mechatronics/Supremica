//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   ModuleSubject
//###########################################################################
//# $Id: ModuleSubject.java,v 1.13 2007-07-03 11:20:53 robi Exp $
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.net.URI;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import net.sourceforge.waters.model.base.Proxy;
import net.sourceforge.waters.model.base.ProxyTools;
import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.ConstantAliasProxy;
import net.sourceforge.waters.model.module.EventDeclProxy;
import net.sourceforge.waters.model.module.ModuleProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.unchecked.Casting;
import net.sourceforge.waters.subject.base.AbstractSubject;
import net.sourceforge.waters.subject.base.ArrayListSubject;
import net.sourceforge.waters.subject.base.DocumentSubject;
import net.sourceforge.waters.subject.base.IndexedArrayListSubject;
import net.sourceforge.waters.subject.base.IndexedListSubject;
import net.sourceforge.waters.subject.base.ListSubject;
import net.sourceforge.waters.subject.base.ProxySubject;


/**
 * The subject implementation of the {@link ModuleProxy} interface.
 *
 * @author Robi Malik
 */

public final class ModuleSubject
  extends DocumentSubject
  implements ModuleProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new module.
   * @param name The name of the new module.
   * @param comment The comment of the new module, or <CODE>null</CODE>.
   * @param location The location of the new module.
   * @param constantAliasList The constant definition list of the new module, or <CODE>null</CODE> if empty.
   * @param eventDeclList The event declaration list of the new module, or <CODE>null</CODE> if empty.
   * @param eventAliasList The event alias list of the new module, or <CODE>null</CODE> if empty.
   * @param componentList The component list of the new module, or <CODE>null</CODE> if empty.
   */
  public ModuleSubject(final String name,
                       final String comment,
                       final URI location,
                       final Collection<? extends ConstantAliasProxy> constantAliasList,
                       final Collection<? extends EventDeclProxy> eventDeclList,
                       final Collection<? extends Proxy> eventAliasList,
                       final Collection<? extends Proxy> componentList)
  {
    super(name, comment, location);
    if (constantAliasList == null) {
      mConstantAliasList = new ArrayListSubject<ConstantAliasSubject>();
    } else {
      mConstantAliasList = new ArrayListSubject<ConstantAliasSubject>
        (constantAliasList, ConstantAliasSubject.class);
    }
    mConstantAliasList.setParent(this);
    if (eventDeclList == null) {
      mEventDeclList = new IndexedArrayListSubject<EventDeclSubject>();
    } else {
      mEventDeclList = new IndexedArrayListSubject<EventDeclSubject>
        (eventDeclList, EventDeclSubject.class);
    }
    mEventDeclList.setParent(this);
    if (eventAliasList == null) {
      mEventAliasList = new ArrayListSubject<AbstractSubject>();
    } else {
      mEventAliasList = new ArrayListSubject<AbstractSubject>
        (eventAliasList, AbstractSubject.class);
    }
    mEventAliasList.setParent(this);
    if (componentList == null) {
      mComponentList = new ArrayListSubject<AbstractSubject>();
    } else {
      mComponentList = new ArrayListSubject<AbstractSubject>
        (componentList, AbstractSubject.class);
    }
    mComponentList.setParent(this);
  }

  /**
   * Creates a new module using default values.
   * This constructor creates a module with
   * the comment set to <CODE>null</CODE>,
   * an empty constant definition list,
   * an empty event declaration list,
   * an empty event alias list, and
   * an empty component list.
   * @param name The name of the new module.
   * @param location The location of the new module.
   */
  public ModuleSubject(final String name,
                       final URI location)
  {
    this(name,
         null,
         location,
         null,
         null,
         null,
         null);
  }


  //#########################################################################
  //# Cloning and Assigning
  public ModuleSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (ModuleSubject) cloner.getClone(this);
  }

  public boolean assignFrom(final ProxySubject partner)
  {
    if (this != partner) {
      final ModuleSubject downcast = (ModuleSubject) partner;
      boolean change = super.assignFrom(partner);
      final ListSubject<ConstantAliasSubject> constantAliasList =
        downcast.getConstantAliasListModifiable();
      mConstantAliasList.assignFrom(constantAliasList);
      final IndexedListSubject<EventDeclSubject> eventDeclList =
        downcast.getEventDeclListModifiable();
      mEventDeclList.assignFrom(eventDeclList);
      final ListSubject<AbstractSubject> eventAliasList =
        downcast.getEventAliasListModifiable();
      mEventAliasList.assignFrom(eventAliasList);
      final ListSubject<AbstractSubject> componentList =
        downcast.getComponentListModifiable();
      mComponentList.assignFrom(componentList);
      if (change) {
        fireStateChanged();
      }
    }
    return false;
  }


  //#########################################################################
  //# Equality and Hashcode
  public Class<ModuleProxy> getProxyInterface()
  {
    return ModuleProxy.class;
  }

  public boolean equalsByContents(final Proxy partner)
  {
    if (super.equalsByContents(partner)) {
      final ModuleProxy downcast = (ModuleProxy) partner;
      return
        ProxyTools.isEqualListByContents
          (mConstantAliasList, downcast.getConstantAliasList()) &&
        ProxyTools.isEqualListByContents
          (mEventDeclList, downcast.getEventDeclList()) &&
        ProxyTools.isEqualListByContents
          (mEventAliasList, downcast.getEventAliasList()) &&
        ProxyTools.isEqualListByContents
          (mComponentList, downcast.getComponentList());
    } else {
      return false;
    }
  }

  public boolean equalsWithGeometry(final Proxy partner)
  {
    if (super.equalsByContents(partner)) {
      final ModuleProxy downcast = (ModuleProxy) partner;
      return
        ProxyTools.isEqualListWithGeometry
          (mConstantAliasList, downcast.getConstantAliasList()) &&
        ProxyTools.isEqualListWithGeometry
          (mEventDeclList, downcast.getEventDeclList()) &&
        ProxyTools.isEqualListWithGeometry
          (mEventAliasList, downcast.getEventAliasList()) &&
        ProxyTools.isEqualListWithGeometry
          (mComponentList, downcast.getComponentList());
    } else {
      return false;
    }
  }

  public int hashCodeByContents()
  {
    int result = super.hashCodeByContents();
    result *= 5;
    result += ProxyTools.getListHashCodeByContents(mConstantAliasList);
    result *= 5;
    result += ProxyTools.getListHashCodeByContents(mEventDeclList);
    result *= 5;
    result += ProxyTools.getListHashCodeByContents(mEventAliasList);
    result *= 5;
    result += ProxyTools.getListHashCodeByContents(mComponentList);
    return result;
  }

  public int hashCodeWithGeometry()
  {
    int result = super.hashCodeByContents();
    result *= 5;
    result += ProxyTools.getListHashCodeWithGeometry(mConstantAliasList);
    result *= 5;
    result += ProxyTools.getListHashCodeWithGeometry(mEventDeclList);
    result *= 5;
    result += ProxyTools.getListHashCodeWithGeometry(mEventAliasList);
    result *= 5;
    result += ProxyTools.getListHashCodeWithGeometry(mComponentList);
    return result;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitModuleProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.ModuleProxy
  public List<ConstantAliasProxy> getConstantAliasList()
  {
    final List<ConstantAliasProxy> downcast =
      Casting.toList(mConstantAliasList);
    return Collections.unmodifiableList(downcast);
  }

  public List<EventDeclProxy> getEventDeclList()
  {
    final List<EventDeclProxy> downcast = Casting.toList(mEventDeclList);
    return Collections.unmodifiableList(downcast);
  }

  public List<Proxy> getEventAliasList()
  {
    final List<Proxy> downcast = Casting.toList(mEventAliasList);
    return Collections.unmodifiableList(downcast);
  }

  public List<Proxy> getComponentList()
  {
    final List<Proxy> downcast = Casting.toList(mComponentList);
    return Collections.unmodifiableList(downcast);
  }


  //#########################################################################
  //# Setters
  /**
   * Gets the modifiable constant definition list of this module.
   */
  public ListSubject<ConstantAliasSubject> getConstantAliasListModifiable()
  {
    return mConstantAliasList;
  }

  /**
   * Gets the modifiable event declaration list of this module.
   */
  public IndexedListSubject<EventDeclSubject> getEventDeclListModifiable()
  {
    return mEventDeclList;
  }

  /**
   * Gets the modifiable event alias list of this module.
   */
  public ListSubject<AbstractSubject> getEventAliasListModifiable()
  {
    return mEventAliasList;
  }

  /**
   * Gets the modifiable component list of this module.
   */
  public ListSubject<AbstractSubject> getComponentListModifiable()
  {
    return mComponentList;
  }


  //#########################################################################
  //# Data Members
  private ListSubject<ConstantAliasSubject> mConstantAliasList;
  private IndexedListSubject<EventDeclSubject> mEventDeclList;
  private ListSubject<AbstractSubject> mEventAliasList;
  private ListSubject<AbstractSubject> mComponentList;

}

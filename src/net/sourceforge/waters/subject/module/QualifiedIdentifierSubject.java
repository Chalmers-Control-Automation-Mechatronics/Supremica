//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   QualifiedIdentifierSubject
//###########################################################################
//# $Id: QualifiedIdentifierSubject.java,v 1.1 2008-02-15 07:31:49 robi Exp $
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import net.sourceforge.waters.model.base.Proxy;
import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.IdentifierProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.QualifiedIdentifierProxy;
import net.sourceforge.waters.subject.base.ProxySubject;


/**
 * The subject implementation of the {@link QualifiedIdentifierProxy} interface.
 *
 * @author Robi Malik
 */

public final class QualifiedIdentifierSubject
  extends IdentifierSubject
  implements QualifiedIdentifierProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new qualified identifier.
   * @param plainText The original text of the new qualified identifier, or <CODE>null</CODE>.
   * @param baseIdentifier The base identifier of the new qualified identifier.
   * @param componentIdentifier The component identifier of the new qualified identifier.
   */
  public QualifiedIdentifierSubject(final String plainText,
                                    final IdentifierProxy baseIdentifier,
                                    final IdentifierProxy componentIdentifier)
  {
    super(plainText);
    mBaseIdentifier = (IdentifierSubject) baseIdentifier;
    mBaseIdentifier.setParent(this);
    mComponentIdentifier = (IdentifierSubject) componentIdentifier;
    mComponentIdentifier.setParent(this);
  }

  /**
   * Creates a new qualified identifier using default values.
   * This constructor creates a qualified identifier with
   * the original text set to <CODE>null</CODE>.
   * @param baseIdentifier The base identifier of the new qualified identifier.
   * @param componentIdentifier The component identifier of the new qualified identifier.
   */
  public QualifiedIdentifierSubject(final IdentifierProxy baseIdentifier,
                                    final IdentifierProxy componentIdentifier)
  {
    this(null,
         baseIdentifier,
         componentIdentifier);
  }


  //#########################################################################
  //# Cloning and Assigning
  public QualifiedIdentifierSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (QualifiedIdentifierSubject) cloner.getClone(this);
  }

  public boolean assignFrom(final ProxySubject partner)
  {
    if (this != partner) {
      final QualifiedIdentifierSubject downcast =
        (QualifiedIdentifierSubject) partner;
      boolean change = super.assignFrom(partner);
      final IdentifierSubject baseIdentifier = downcast.getBaseIdentifier();
      if (mBaseIdentifier.getClass() != baseIdentifier.getClass()) {
        mBaseIdentifier.setParent(null);
        mBaseIdentifier = baseIdentifier.clone();
        mBaseIdentifier.setParent(this);
        change = true;
      } else {
        mBaseIdentifier.assignFrom(baseIdentifier);
      }
      final IdentifierSubject componentIdentifier =
        downcast.getComponentIdentifier();
      if (mComponentIdentifier.getClass() != componentIdentifier.getClass()) {
        mComponentIdentifier.setParent(null);
        mComponentIdentifier = componentIdentifier.clone();
        mComponentIdentifier.setParent(this);
        change = true;
      } else {
        mComponentIdentifier.assignFrom(componentIdentifier);
      }
      if (change) {
        fireStateChanged();
      }
    }
    return false;
  }


  //#########################################################################
  //# Equality and Hashcode
  public Class<QualifiedIdentifierProxy> getProxyInterface()
  {
    return QualifiedIdentifierProxy.class;
  }

  public boolean equalsByContents(final Proxy partner)
  {
    if (super.equalsByContents(partner)) {
      final QualifiedIdentifierProxy downcast =
        (QualifiedIdentifierProxy) partner;
      return
        mBaseIdentifier.equalsByContents(downcast.getBaseIdentifier()) &&
        mComponentIdentifier.equalsByContents(downcast.getComponentIdentifier());
    } else {
      return false;
    }
  }

  public boolean equalsWithGeometry(final Proxy partner)
  {
    if (super.equalsWithGeometry(partner)) {
      final QualifiedIdentifierProxy downcast =
        (QualifiedIdentifierProxy) partner;
      return
        mBaseIdentifier.equalsWithGeometry(downcast.getBaseIdentifier()) &&
        mComponentIdentifier.equalsWithGeometry(downcast.getComponentIdentifier());
    } else {
      return false;
    }
  }

  public int hashCodeByContents()
  {
    int result = super.hashCodeByContents();
    result *= 5;
    result += mBaseIdentifier.hashCodeByContents();
    result *= 5;
    result += mComponentIdentifier.hashCodeByContents();
    return result;
  }

  public int hashCodeWithGeometry()
  {
    int result = super.hashCodeWithGeometry();
    result *= 5;
    result += mBaseIdentifier.hashCodeWithGeometry();
    result *= 5;
    result += mComponentIdentifier.hashCodeWithGeometry();
    return result;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitQualifiedIdentifierProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.QualifiedIdentifierProxy
  public IdentifierSubject getBaseIdentifier()
  {
    return mBaseIdentifier;
  }

  public IdentifierSubject getComponentIdentifier()
  {
    return mComponentIdentifier;
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the base identifier of this qualification.
   */
  public void setBaseIdentifier(final IdentifierSubject baseIdentifier)
  {
    if (mBaseIdentifier == baseIdentifier) {
      return;
    }
    baseIdentifier.setParent(this);
    mBaseIdentifier.setParent(null);
    mBaseIdentifier = baseIdentifier;
    fireStateChanged();
  }

  /**
   * Sets the component identifier of this qualification.
   */
  public void setComponentIdentifier(final IdentifierSubject componentIdentifier)
  {
    if (mComponentIdentifier == componentIdentifier) {
      return;
    }
    componentIdentifier.setParent(this);
    mComponentIdentifier.setParent(null);
    mComponentIdentifier = componentIdentifier;
    fireStateChanged();
  }


  //#########################################################################
  //# Data Members
  private IdentifierSubject mBaseIdentifier;
  private IdentifierSubject mComponentIdentifier;

}

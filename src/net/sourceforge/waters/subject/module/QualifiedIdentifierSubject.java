//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   QualifiedIdentifierSubject
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.util.Set;

import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.IdentifierProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.QualifiedIdentifierProxy;
import net.sourceforge.waters.subject.base.ModelChangeEvent;
import net.sourceforge.waters.subject.base.ProxySubject;
import net.sourceforge.waters.subject.base.RecursiveUndoInfo;
import net.sourceforge.waters.subject.base.ReplacementUndoInfo;
import net.sourceforge.waters.subject.base.Subject;
import net.sourceforge.waters.subject.base.UndoInfo;


/**
 * The subject implementation of the {@link QualifiedIdentifierProxy} interface.
 *
 * @author Robi Malik
 */

public final class QualifiedIdentifierSubject
  extends IdentifierSubject
  implements QualifiedIdentifierProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new qualified identifier.
   * @param plainText The original text of the new qualified identifier, or <CODE>null</CODE>.
   * @param baseIdentifier The base identifier of the new qualified identifier.
   * @param componentIdentifier The component identifier of the new qualified identifier.
   */
  public QualifiedIdentifierSubject(final String plainText,
                                    final IdentifierProxy baseIdentifier,
                                    final IdentifierProxy componentIdentifier)
  {
    super(plainText);
    mBaseIdentifier = (IdentifierSubject) baseIdentifier;
    mBaseIdentifier.setParent(this);
    mComponentIdentifier = (IdentifierSubject) componentIdentifier;
    mComponentIdentifier.setParent(this);
  }

  /**
   * Creates a new qualified identifier using default values.
   * This constructor creates a qualified identifier with
   * the original text set to <CODE>null</CODE>.
   * @param baseIdentifier The base identifier of the new qualified identifier.
   * @param componentIdentifier The component identifier of the new qualified identifier.
   */
  public QualifiedIdentifierSubject(final IdentifierProxy baseIdentifier,
                                    final IdentifierProxy componentIdentifier)
  {
    this(null,
         baseIdentifier,
         componentIdentifier);
  }


  //#########################################################################
  //# Cloning and Assigning
  @Override
  public QualifiedIdentifierSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (QualifiedIdentifierSubject) cloner.getClone(this);
  }

  @Override
  public ModelChangeEvent assignMember(final int index,
                                       final Object oldValue,
                                       final Object newValue)
  {
    if (index <= 1) {
      return super.assignMember(index, oldValue, newValue);
    } else {
      switch (index) {
      case 2:
        mBaseIdentifier.setParent(null);
        mBaseIdentifier = (IdentifierSubject) newValue;
        mBaseIdentifier.setParent(this);
        return ModelChangeEvent.createStateChanged(this);
      case 3:
        mComponentIdentifier.setParent(null);
        mComponentIdentifier = (IdentifierSubject) newValue;
        mComponentIdentifier.setParent(this);
        return ModelChangeEvent.createStateChanged(this);
      default:
        return null;
      }
    }
  }

  @Override
  protected void collectUndoInfo(final ProxySubject newState,
                                 final RecursiveUndoInfo info,
                                 final Set<? extends Subject> boundary)
  {
    super.collectUndoInfo(newState, info, boundary);
    final QualifiedIdentifierSubject downcast =
      (QualifiedIdentifierSubject) newState;
    if (mBaseIdentifier.getClass() == downcast.mBaseIdentifier.getClass()) {
      final UndoInfo step2 =
        mBaseIdentifier.createUndoInfo(downcast.mBaseIdentifier, boundary);
      if (step2 != null) {
        info.add(step2);
      }
    } else {
      final IdentifierSubject clone2 = downcast.mBaseIdentifier.clone();
      final UndoInfo step2 =
        new ReplacementUndoInfo(2, mBaseIdentifier, clone2);
      info.add(step2);
    }
    if (mComponentIdentifier.getClass() == downcast.mComponentIdentifier.getClass()) {
      final UndoInfo step3 =
        mComponentIdentifier.createUndoInfo(downcast.mComponentIdentifier, boundary);
      if (step3 != null) {
        info.add(step3);
      }
    } else {
      final IdentifierSubject clone3 = downcast.mComponentIdentifier.clone();
      final UndoInfo step3 =
        new ReplacementUndoInfo(3, mComponentIdentifier, clone3);
      info.add(step3);
    }
  }


  //#########################################################################
  //# Comparing
  public Class<QualifiedIdentifierProxy> getProxyInterface()
  {
    return QualifiedIdentifierProxy.class;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitQualifiedIdentifierProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.QualifiedIdentifierProxy
  public IdentifierSubject getBaseIdentifier()
  {
    return mBaseIdentifier;
  }

  public IdentifierSubject getComponentIdentifier()
  {
    return mComponentIdentifier;
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the base identifier of this qualification.
   */
  public void setBaseIdentifier(final IdentifierSubject baseIdentifier)
  {
    if (mBaseIdentifier == baseIdentifier) {
      return;
    }
    baseIdentifier.setParent(this);
    mBaseIdentifier.setParent(null);
    mBaseIdentifier = baseIdentifier;
    fireStateChanged();
  }

  /**
   * Sets the component identifier of this qualification.
   */
  public void setComponentIdentifier(final IdentifierSubject componentIdentifier)
  {
    if (mComponentIdentifier == componentIdentifier) {
      return;
    }
    componentIdentifier.setParent(this);
    mComponentIdentifier.setParent(null);
    mComponentIdentifier = componentIdentifier;
    fireStateChanged();
  }


  //#########################################################################
  //# Data Members
  private IdentifierSubject mBaseIdentifier;
  private IdentifierSubject mComponentIdentifier;

}

//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   ConstantAliasSubject
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import net.sourceforge.waters.model.base.Proxy;
import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.ConstantAliasProxy;
import net.sourceforge.waters.model.module.ExpressionProxy;
import net.sourceforge.waters.model.module.IdentifierProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.subject.base.ProxySubject;

import net.sourceforge.waters.xsd.module.ScopeKind;


/**
 * The subject implementation of the {@link ConstantAliasProxy} interface.
 *
 * @author Robi Malik
 */

public final class ConstantAliasSubject
  extends AliasSubject
  implements ConstantAliasProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new constant alias.
   * @param identifier The identifier defining the name of the new constant alias.
   * @param expression The expression of the new constant alias.
   * @param scope The scope of the new constant alias.
   */
  public ConstantAliasSubject(final IdentifierProxy identifier,
                              final ExpressionProxy expression,
                              final ScopeKind scope)
  {
    super(identifier, expression);
    mScope = scope;
  }

  /**
   * Creates a new constant alias using default values.
   * This constructor creates a constant alias with
   * the scope set to <CODE>ScopeKind.LOCAL</CODE>.
   * @param identifier The identifier defining the name of the new constant alias.
   * @param expression The expression of the new constant alias.
   */
  public ConstantAliasSubject(final IdentifierProxy identifier,
                              final ExpressionProxy expression)
  {
    this(identifier,
         expression,
         ScopeKind.LOCAL);
  }


  //#########################################################################
  //# Cloning and Assigning
  public ConstantAliasSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (ConstantAliasSubject) cloner.getClone(this);
  }

  public boolean assignFrom(final ProxySubject partner)
  {
    if (this != partner) {
      final ConstantAliasSubject downcast = (ConstantAliasSubject) partner;
      boolean change = super.assignFrom(partner);
      final ScopeKind scope = downcast.getScope();
      if (mScope != scope) {
        mScope = scope;
        change = true;
      }
      if (change) {
        fireStateChanged();
      }
    }
    return false;
  }


  //#########################################################################
  //# Equality and Hashcode
  public Class<ConstantAliasProxy> getProxyInterface()
  {
    return ConstantAliasProxy.class;
  }

  public boolean equalsByContents(final Proxy partner)
  {
    if (super.equalsByContents(partner)) {
      final ConstantAliasProxy downcast = (ConstantAliasProxy) partner;
      return
        mScope.equals(downcast.getScope());
    } else {
      return false;
    }
  }

  public boolean equalsWithGeometry(final Proxy partner)
  {
    if (super.equalsWithGeometry(partner)) {
      final ConstantAliasProxy downcast = (ConstantAliasProxy) partner;
      return
        mScope.equals(downcast.getScope());
    } else {
      return false;
    }
  }

  public int hashCodeByContents()
  {
    int result = super.hashCodeByContents();
    result *= 5;
    result += mScope.hashCode();
    return result;
  }

  public int hashCodeWithGeometry()
  {
    int result = super.hashCodeWithGeometry();
    result *= 5;
    result += mScope.hashCode();
    return result;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitConstantAliasProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.ConstantAliasProxy
  public ScopeKind getScope()
  {
    return mScope;
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the scope of this alias declaration.
   */
  public void setScope(final ScopeKind scope)
  {
    if (mScope.equals(scope)) {
      return;
    }
    mScope = scope;
    fireStateChanged();
  }


  //#########################################################################
  //# Data Members
  private ScopeKind mScope;

}

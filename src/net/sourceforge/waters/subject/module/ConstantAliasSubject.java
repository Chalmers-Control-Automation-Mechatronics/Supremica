//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   ConstantAliasSubject
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.util.Set;

import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.ConstantAliasProxy;
import net.sourceforge.waters.model.module.ExpressionProxy;
import net.sourceforge.waters.model.module.IdentifierProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.subject.base.ModelChangeEvent;
import net.sourceforge.waters.subject.base.ProxySubject;
import net.sourceforge.waters.subject.base.RecursiveUndoInfo;
import net.sourceforge.waters.subject.base.ReplacementUndoInfo;
import net.sourceforge.waters.subject.base.Subject;
import net.sourceforge.waters.subject.base.UndoInfo;

import net.sourceforge.waters.xsd.module.ScopeKind;


/**
 * The subject implementation of the {@link ConstantAliasProxy} interface.
 *
 * @author Robi Malik
 */

public final class ConstantAliasSubject
  extends AliasSubject
  implements ConstantAliasProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new constant alias.
   * @param identifier The identifier defining the name of the new constant alias.
   * @param expression The expression of the new constant alias.
   * @param scope The scope of the new constant alias.
   */
  public ConstantAliasSubject(final IdentifierProxy identifier,
                              final ExpressionProxy expression,
                              final ScopeKind scope)
  {
    super(identifier, expression);
    mScope = scope;
  }

  /**
   * Creates a new constant alias using default values.
   * This constructor creates a constant alias with
   * the scope set to <CODE>ScopeKind.LOCAL</CODE>.
   * @param identifier The identifier defining the name of the new constant alias.
   * @param expression The expression of the new constant alias.
   */
  public ConstantAliasSubject(final IdentifierProxy identifier,
                              final ExpressionProxy expression)
  {
    this(identifier,
         expression,
         ScopeKind.LOCAL);
  }


  //#########################################################################
  //# Cloning and Assigning
  @Override
  public ConstantAliasSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (ConstantAliasSubject) cloner.getClone(this);
  }

  @Override
  public ModelChangeEvent assignMember(final int index,
                                       final Object oldValue,
                                       final Object newValue)
  {
    if (index <= 2) {
      return super.assignMember(index, oldValue, newValue);
    } else {
      switch (index) {
      case 3:
        mScope = (ScopeKind) newValue;
        return ModelChangeEvent.createStateChanged(this);
      default:
        return null;
      }
    }
  }

  @Override
  protected void collectUndoInfo(final ProxySubject newState,
                                 final RecursiveUndoInfo info,
                                 final Set<? extends Subject> boundary)
  {
    super.collectUndoInfo(newState, info, boundary);
    final ConstantAliasSubject downcast = (ConstantAliasSubject) newState;
    if (!mScope.equals(downcast.mScope)) {
      final UndoInfo step3 =
        new ReplacementUndoInfo(3, mScope, downcast.mScope);
      info.add(step3);
    }
  }


  //#########################################################################
  //# Comparing
  public Class<ConstantAliasProxy> getProxyInterface()
  {
    return ConstantAliasProxy.class;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitConstantAliasProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.ConstantAliasProxy
  public ScopeKind getScope()
  {
    return mScope;
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the scope of this alias declaration.
   */
  public void setScope(final ScopeKind scope)
  {
    if (mScope.equals(scope)) {
      return;
    }
    mScope = scope;
    fireStateChanged();
  }


  //#########################################################################
  //# Data Members
  private ScopeKind mScope;

}

//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   AliasSubject
//###########################################################################
//# $Id: AliasSubject.java,v 1.11 2007-12-04 03:22:58 robi Exp $
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import net.sourceforge.waters.model.base.Proxy;
import net.sourceforge.waters.model.module.AliasProxy;
import net.sourceforge.waters.model.module.ExpressionProxy;
import net.sourceforge.waters.model.module.IdentifierProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.subject.base.ProxySubject;


/**
 * The subject implementation of the {@link AliasProxy} interface.
 *
 * @author Robi Malik
 */

public abstract class AliasSubject
  extends IdentifiedSubject
  implements AliasProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new alias.
   * @param identifier The identifier defining the name of the new alias.
   * @param expression The expression of the new alias.
   */
  protected AliasSubject(final IdentifierProxy identifier,
                         final ExpressionProxy expression)
  {
    super(identifier);
    mExpression = (ExpressionSubject) expression;
    mExpression.setParent(this);
  }


  //#########################################################################
  //# Cloning and Assigning
  public AliasSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (AliasSubject) cloner.getClone(this);
  }

  public boolean assignFrom(final ProxySubject partner)
  {
    if (this != partner) {
      final AliasSubject downcast = (AliasSubject) partner;
      boolean change = super.assignFrom(partner);
      final ExpressionSubject expression = downcast.getExpression();
      if (mExpression.getClass() != expression.getClass()) {
        mExpression.setParent(null);
        mExpression = expression.clone();
        mExpression.setParent(this);
        change = true;
      } else {
        mExpression.assignFrom(expression);
      }
      return change;
    } else {
      return false;
    }
  }


  //#########################################################################
  //# Equality and Hashcode
  public boolean equalsByContents(final Proxy partner)
  {
    if (super.equalsByContents(partner)) {
      final AliasProxy downcast = (AliasProxy) partner;
      return
        mExpression.equalsByContents(downcast.getExpression());
    } else {
      return false;
    }
  }

  public boolean equalsWithGeometry(final Proxy partner)
  {
    if (super.equalsWithGeometry(partner)) {
      final AliasProxy downcast = (AliasProxy) partner;
      return
        mExpression.equalsWithGeometry(downcast.getExpression());
    } else {
      return false;
    }
  }

  public int hashCodeByContents()
  {
    int result = super.hashCodeByContents();
    result *= 5;
    result += mExpression.hashCodeByContents();
    return result;
  }

  public int hashCodeWithGeometry()
  {
    int result = super.hashCodeWithGeometry();
    result *= 5;
    result += mExpression.hashCodeWithGeometry();
    return result;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.AliasProxy
  public ExpressionSubject getExpression()
  {
    return mExpression;
  }


  //#########################################################################
  //# Setters
  public void setExpression(final ExpressionSubject expression)
  {
    if (mExpression == expression) {
      return;
    }
    expression.setParent(this);
    mExpression.setParent(null);
    mExpression = expression;
    fireStateChanged();
  }


  //#########################################################################
  //# Data Members
  private ExpressionSubject mExpression;

}

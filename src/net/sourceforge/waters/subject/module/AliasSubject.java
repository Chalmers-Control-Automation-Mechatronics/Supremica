//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   AliasSubject
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import net.sourceforge.waters.model.module.AliasProxy;
import net.sourceforge.waters.model.module.ExpressionProxy;
import net.sourceforge.waters.model.module.IdentifierProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.subject.base.ModelChangeEvent;
import net.sourceforge.waters.subject.base.ProxySubject;
import net.sourceforge.waters.subject.base.RecursiveUndoInfo;
import net.sourceforge.waters.subject.base.ReplacementUndoInfo;
import net.sourceforge.waters.subject.base.UndoInfo;


/**
 * The subject implementation of the {@link AliasProxy} interface.
 *
 * @author Robi Malik
 */

public abstract class AliasSubject
  extends IdentifiedSubject
  implements AliasProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new alias.
   * @param identifier The identifier defining the name of the new alias.
   * @param expression The expression of the new alias.
   */
  protected AliasSubject(final IdentifierProxy identifier,
                         final ExpressionProxy expression)
  {
    super(identifier);
    mExpression = (ExpressionSubject) expression;
    mExpression.setParent(this);
  }


  //#########################################################################
  //# Cloning and Assigning
  @Override
  public AliasSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (AliasSubject) cloner.getClone(this);
  }

  @Override
  public ModelChangeEvent assignMember(final int index,
                                       final Object oldValue,
                                       final Object newValue)
  {
    if (index <= 1) {
      return super.assignMember(index, oldValue, newValue);
    } else {
      switch (index) {
      case 2:
        mExpression.setParent(null);
        mExpression = (ExpressionSubject) newValue;
        mExpression.setParent(this);
        return ModelChangeEvent.createStateChanged(this);
      default:
        return null;
      }
    }
  }

  @Override
  protected void collectUndoInfo(final ProxySubject newState,
                                 final RecursiveUndoInfo info)
  {
    super.collectUndoInfo(newState, info);
    final AliasSubject downcast = (AliasSubject) newState;
    if (mExpression.getClass() == downcast.mExpression.getClass()) {
      final UndoInfo step2 = mExpression.createUndoInfo(downcast.mExpression);
      if (step2 != null) {
        info.add(step2);
      }
    } else {
      final ExpressionSubject clone2 = downcast.mExpression.clone();
      final UndoInfo step2 = new ReplacementUndoInfo(2, mExpression, clone2);
      info.add(step2);
    }
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.AliasProxy
  public ExpressionSubject getExpression()
  {
    return mExpression;
  }


  //#########################################################################
  //# Setters
  public void setExpression(final ExpressionSubject expression)
  {
    if (mExpression == expression) {
      return;
    }
    expression.setParent(this);
    mExpression.setParent(null);
    mExpression = expression;
    fireStateChanged();
  }


  //#########################################################################
  //# Data Members
  private ExpressionSubject mExpression;

}

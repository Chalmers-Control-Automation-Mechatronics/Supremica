//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################
//# Copyright (C) 2004-2018 Robi Malik
//###########################################################################
//# This file is part of Waters.
//# Waters is free software: you can redistribute it and/or modify it under
//# the terms of the GNU General Public License as published by the Free
//# Software Foundation, either version 2 of the License, or (at your option)
//# any later version.
//# Waters is distributed in the hope that it will be useful, but WITHOUT ANY
//# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
//# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
//# details.
//# You should have received a copy of the GNU General Public License along
//# with Waters. If not, see <http://www.gnu.org/licenses/>.
//#
//# Linking Waters statically or dynamically with other modules is making a
//# combined work based on Waters. Thus, the terms and conditions of the GNU
//# General Public License cover the whole combination.
//# In addition, as a special exception, the copyright holders of Waters give
//# you permission to combine Waters with code included in the standard
//# release of Supremica under the Supremica Software License Agreement (or
//# modified versions of such code, with unchanged license). You may copy and
//# distribute such a system following the terms of the GNU GPL for Waters and
//# the licenses of the other code concerned.
//# Note that people who make modified versions of Waters are not obligated to
//# grant this special exception for their modified versions; it is their
//# choice whether to do so. The GNU General Public License gives permission
//# to release a modified version without this exception; this exception also
//# makes it possible to release a modified version which carries forward this
//# exception.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Set;

import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.FunctionCallExpressionProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.SimpleExpressionProxy;
import net.sourceforge.waters.subject.base.ArrayListSubject;
import net.sourceforge.waters.subject.base.ListSubject;
import net.sourceforge.waters.subject.base.ModelChangeEvent;
import net.sourceforge.waters.subject.base.ProxySubject;
import net.sourceforge.waters.subject.base.RecursiveUndoInfo;
import net.sourceforge.waters.subject.base.ReplacementUndoInfo;
import net.sourceforge.waters.subject.base.Subject;
import net.sourceforge.waters.subject.base.UndoInfo;


/**
 * The subject implementation of the {@link FunctionCallExpressionProxy} interface.
 *
 * @author Robi Malik
 */

public final class FunctionCallExpressionSubject
  extends SimpleExpressionSubject
  implements FunctionCallExpressionProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new function call expression.
   * @param plainText The original text of the new function call expression, or <CODE>null</CODE>.
   * @param functionName The function name of the new function call expression.
   * @param arguments The arguments of the new function call expression, or <CODE>null</CODE> if empty.
   */
  public FunctionCallExpressionSubject(final String plainText,
                                       final String functionName,
                                       final Collection<? extends SimpleExpressionProxy> arguments)
  {
    super(plainText);
    mFunctionName = functionName;
    if (arguments == null) {
      mArguments = new ArrayListSubject<SimpleExpressionSubject>();
    } else {
      mArguments = new ArrayListSubject<SimpleExpressionSubject>
        (arguments, SimpleExpressionSubject.class);
    }
    mArguments.setParent(this);
  }

  /**
   * Creates a new function call expression using default values.
   * This constructor creates a function call expression with
   * the original text set to <CODE>null</CODE>.
   * @param functionName The function name of the new function call expression.
   * @param arguments The arguments of the new function call expression, or <CODE>null</CODE> if empty.
   */
  public FunctionCallExpressionSubject(final String functionName,
                                       final Collection<? extends SimpleExpressionProxy> arguments)
  {
    this(null,
         functionName,
         arguments);
  }


  //#########################################################################
  //# Cloning and Assigning
  @Override
  public FunctionCallExpressionSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (FunctionCallExpressionSubject) cloner.getClone(this);
  }

  @Override
  public ModelChangeEvent assignMember(final int index,
                                       final Object oldValue,
                                       final Object newValue)
  {
    if (index <= 1) {
      return super.assignMember(index, oldValue, newValue);
    } else {
      switch (index) {
      case 2:
        mFunctionName = (String) newValue;
        return ModelChangeEvent.createStateChanged(this);
      default:
        return null;
      }
    }
  }

  @Override
  protected void collectUndoInfo(final ProxySubject newState,
                                 final RecursiveUndoInfo info,
                                 final Set<? extends Subject> boundary)
  {
    super.collectUndoInfo(newState, info, boundary);
    final FunctionCallExpressionSubject downcast =
      (FunctionCallExpressionSubject) newState;
    if (!mFunctionName.equals(downcast.mFunctionName)) {
      final UndoInfo step2 =
        new ReplacementUndoInfo(2, mFunctionName, downcast.mFunctionName);
      info.add(step2);
    }
    final UndoInfo step3 =
      mArguments.createUndoInfo(downcast.mArguments, boundary);
    if (step3 != null) {
      info.add(step3);
    }
  }


  //#########################################################################
  //# Comparing
  public Class<FunctionCallExpressionProxy> getProxyInterface()
  {
    return FunctionCallExpressionProxy.class;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitFunctionCallExpressionProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.FunctionCallExpressionProxy
  public String getFunctionName()
  {
    return mFunctionName;
  }

  public List<SimpleExpressionProxy> getArguments()
  {
    final List<?> precast = mArguments;
    @SuppressWarnings("unchecked")
    final List<SimpleExpressionProxy> downcast =
      (List<SimpleExpressionProxy>) precast;
    return Collections.unmodifiableList(downcast);
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the name of the function.
   */
  public void setFunctionName(final String functionName)
  {
    if (mFunctionName.equals(functionName)) {
      return;
    }
    mFunctionName = functionName;
    fireStateChanged();
  }

  /**
   * Gets the modifiable list of arguments passed to the function.
   */
  public ListSubject<SimpleExpressionSubject> getArgumentsModifiable()
  {
    return mArguments;
  }


  //#########################################################################
  //# Data Members
  private String mFunctionName;
  private ListSubject<SimpleExpressionSubject> mArguments;

}

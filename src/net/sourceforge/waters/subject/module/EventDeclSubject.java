//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################
//# Copyright (C) 2004-2015 Robi Malik
//###########################################################################
//# This file is part of Waters.
//# Waters is free software: you can redistribute it and/or modify it under
//# the terms of the GNU General Public License as published by the Free
//# Software Foundation, either version 2 of the License, or (at your option)
//# any later version.
//# Waters is distributed in the hope that it will be useful, but WITHOUT ANY
//# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
//# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
//# details.
//# You should have received a copy of the GNU General Public License along
//# with Waters. If not, see <http://www.gnu.org/licenses/>.
//#
//# Linking Waters statically or dynamically with other modules is making a
//# combined work based on Waters. Thus, the terms and conditions of the GNU
//# General Public License cover the whole combination.
//# In addition, as a special exception, the copyright holders of Waters give
//# you permission to combine Waters with code included in the standard
//# release of Supremica under the Supremica Software License Agreement (or
//# modified versions of such code, with unchanged license). You may copy and
//# distribute such a system following the terms of the GNU GPL for Waters and
//# the licenses of the other code concerned.
//# Note that people who make modified versions of Waters are not obligated to
//# grant this special exception for their modified versions; it is their
//# choice whether to do so. The GNU General Public License gives permission
//# to release a modified version without this exception; this exception also
//# makes it possible to release a modified version which carries forward this
//# exception.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.sourceforge.waters.model.base.ProxyTools;
import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.ColorGeometryProxy;
import net.sourceforge.waters.model.module.EventDeclProxy;
import net.sourceforge.waters.model.module.IdentifierProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.SimpleExpressionProxy;
import net.sourceforge.waters.subject.base.ArrayListSubject;
import net.sourceforge.waters.subject.base.AttributeMapSubject;
import net.sourceforge.waters.subject.base.ListSubject;
import net.sourceforge.waters.subject.base.ModelChangeEvent;
import net.sourceforge.waters.subject.base.ProxySubject;
import net.sourceforge.waters.subject.base.RecursiveUndoInfo;
import net.sourceforge.waters.subject.base.ReplacementUndoInfo;
import net.sourceforge.waters.subject.base.Subject;
import net.sourceforge.waters.subject.base.UndoInfo;

import net.sourceforge.waters.xsd.base.EventKind;
import net.sourceforge.waters.xsd.module.ScopeKind;


/**
 * The subject implementation of the {@link EventDeclProxy} interface.
 *
 * @author Robi Malik
 */

public final class EventDeclSubject
  extends IdentifiedSubject
  implements EventDeclProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new event declaration.
   * @param identifier The identifier defining the name of the new event declaration.
   * @param kind The kind of the new event declaration.
   * @param observable The observability status of the new event declaration.
   * @param scope The scope of the new event declaration.
   * @param ranges The list of index ranges of the new event declaration, or <CODE>null</CODE> if empty.
   * @param colorGeometry The colour information of the new event declaration, or <CODE>null</CODE>.
   * @param attributes The attribute map of the new event declaration, or <CODE>null</CODE> if empty.
   */
  public EventDeclSubject(final IdentifierProxy identifier,
                          final EventKind kind,
                          final boolean observable,
                          final ScopeKind scope,
                          final Collection<? extends SimpleExpressionProxy> ranges,
                          final ColorGeometryProxy colorGeometry,
                          final Map<String,String> attributes)
  {
    super(identifier);
    mKind = kind;
    mIsObservable = observable;
    mScope = scope;
    if (ranges == null) {
      mRanges = new ArrayListSubject<SimpleExpressionSubject>();
    } else {
      mRanges = new ArrayListSubject<SimpleExpressionSubject>
        (ranges, SimpleExpressionSubject.class);
    }
    mRanges.setParent(this);
    mColorGeometry = (ColorGeometrySubject) colorGeometry;
    if (mColorGeometry != null) {
      mColorGeometry.setParent(this);
    }
    if (attributes == null) {
      mAttributes = new AttributeMapSubject();
    } else {
      mAttributes = new AttributeMapSubject(attributes);
    }
    mAttributes.setParent(this);
  }

  /**
   * Creates a new event declaration using default values.
   * This constructor creates an event declaration with
   * the observability status set to <CODE>true</CODE>,
   * the scope set to <CODE>ScopeKind.LOCAL</CODE>,
   * an empty list of index ranges,
   * the colour information set to <CODE>null</CODE>, and
   * an empty attribute map.
   * @param identifier The identifier defining the name of the new event declaration.
   * @param kind The kind of the new event declaration.
   */
  public EventDeclSubject(final IdentifierProxy identifier,
                          final EventKind kind)
  {
    this(identifier,
         kind,
         true,
         ScopeKind.LOCAL,
         null,
         null,
         null);
  }


  //#########################################################################
  //# Cloning and Assigning
  @Override
  public EventDeclSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (EventDeclSubject) cloner.getClone(this);
  }

  @Override
  public ModelChangeEvent assignMember(final int index,
                                       final Object oldValue,
                                       final Object newValue)
  {
    if (index <= 1) {
      return super.assignMember(index, oldValue, newValue);
    } else {
      switch (index) {
      case 2:
        mKind = (EventKind) newValue;
        return ModelChangeEvent.createStateChanged(this);
      case 3:
        mIsObservable = (Boolean) newValue;
        return ModelChangeEvent.createStateChanged(this);
      case 4:
        mScope = (ScopeKind) newValue;
        return ModelChangeEvent.createStateChanged(this);
      case 6:
        if (mColorGeometry != null) {
          mColorGeometry.setParent(null);
        }
        mColorGeometry = (ColorGeometrySubject) newValue;
        if (mColorGeometry != null) {
          mColorGeometry.setParent(this);
        }
        return ModelChangeEvent.createGeometryChanged(this, newValue);
      default:
        return null;
      }
    }
  }

  @Override
  protected void collectUndoInfo(final ProxySubject newState,
                                 final RecursiveUndoInfo info,
                                 final Set<? extends Subject> boundary)
  {
    super.collectUndoInfo(newState, info, boundary);
    final EventDeclSubject downcast = (EventDeclSubject) newState;
    if (!mKind.equals(downcast.mKind)) {
      final UndoInfo step2 =
        new ReplacementUndoInfo(2, mKind, downcast.mKind);
      info.add(step2);
    }
    if (mIsObservable != downcast.mIsObservable) {
      final UndoInfo step3 =
        new ReplacementUndoInfo(3, mIsObservable, downcast.mIsObservable);
      info.add(step3);
    }
    if (!mScope.equals(downcast.mScope)) {
      final UndoInfo step4 =
        new ReplacementUndoInfo(4, mScope, downcast.mScope);
      info.add(step4);
    }
    final UndoInfo step5 = mRanges.createUndoInfo(downcast.mRanges, boundary);
    if (step5 != null) {
      info.add(step5);
    }
    final boolean null6a = mColorGeometry == null;
    final boolean null6b = downcast.mColorGeometry == null;
    if (null6a != null6b) {
      if (boundary ==  null || !boundary.contains(mColorGeometry)) {
        final ColorGeometrySubject clone6 =
          ProxyTools.clone(downcast.mColorGeometry);
        final UndoInfo step6 =
          new ReplacementUndoInfo(6, mColorGeometry, clone6);
        info.add(step6);
      }
    } else if (!null6a) {
      final UndoInfo step6 =
        mColorGeometry.createUndoInfo(downcast.mColorGeometry, boundary);
      if (step6 != null) {
        info.add(step6);
      }
    }
    final UndoInfo step7 =
      mAttributes.createUndoInfo(downcast.mAttributes, boundary);
    if (step7 != null) {
      info.add(step7);
    }
  }


  //#########################################################################
  //# Comparing
  public Class<EventDeclProxy> getProxyInterface()
  {
    return EventDeclProxy.class;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitEventDeclProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.EventDeclProxy
  public EventKind getKind()
  {
    return mKind;
  }

  public boolean isObservable()
  {
    return mIsObservable;
  }

  public ScopeKind getScope()
  {
    return mScope;
  }

  public List<SimpleExpressionProxy> getRanges()
  {
    final List<?> precast = mRanges;
    @SuppressWarnings("unchecked")
    final List<SimpleExpressionProxy> downcast =
      (List<SimpleExpressionProxy>) precast;
    return Collections.unmodifiableList(downcast);
  }

  public ColorGeometrySubject getColorGeometry()
  {
    return mColorGeometry;
  }

  public Map<String,String> getAttributes()
  {
    final Map<?,?> precast = mAttributes;
    @SuppressWarnings("unchecked")
    final Map<String,String> downcast = (Map<String,String>) precast;
    return Collections.unmodifiableMap(downcast);
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the kind of this event declaration.
   */
  public void setKind(final EventKind kind)
  {
    if (mKind.equals(kind)) {
      return;
    }
    mKind = kind;
    fireStateChanged();
  }

  /**
   * Sets the observability status of this event declaration.
   */
  public void setObservable(final boolean observable)
  {
    if (mIsObservable == observable) {
      return;
    }
    mIsObservable = observable;
    fireStateChanged();
  }

  /**
   * Sets the scope of this event declaration.
   */
  public void setScope(final ScopeKind scope)
  {
    if (mScope.equals(scope)) {
      return;
    }
    mScope = scope;
    fireStateChanged();
  }

  /**
   * Gets the modifiable list of index ranges of this event declaration.
   */
  public ListSubject<SimpleExpressionSubject> getRangesModifiable()
  {
    return mRanges;
  }

  /**
   * Sets the colour information for this event declaration.
   */
  public void setColorGeometry(final ColorGeometrySubject colorGeometry)
  {
    if (mColorGeometry == colorGeometry) {
      return;
    }
    if (colorGeometry != null) {
      colorGeometry.setParent(this);
    }
    if (mColorGeometry != null) {
      mColorGeometry.setParent(null);
    }
    mColorGeometry = colorGeometry;
    fireGeometryChanged(mColorGeometry);
  }

  /**
   * Gets the modifiable attribute map for this event declaration.
   */
  public AttributeMapSubject getAttributesModifiable()
  {
    return mAttributes;
  }


  //#########################################################################
  //# Data Members
  private EventKind mKind;
  private boolean mIsObservable;
  private ScopeKind mScope;
  private ListSubject<SimpleExpressionSubject> mRanges;
  private ColorGeometrySubject mColorGeometry;
  private AttributeMapSubject mAttributes;

}

//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   ColorGeometrySubject
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.awt.Color;
import java.util.Collection;
import java.util.Collections;
import java.util.Set;

import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.ColorGeometryProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.subject.base.GeometrySubject;
import net.sourceforge.waters.subject.base.NotCloningGeometrySetSubject;
import net.sourceforge.waters.subject.base.ProxySubject;
import net.sourceforge.waters.subject.base.RecursiveUndoInfo;
import net.sourceforge.waters.subject.base.SimpleSetSubject;
import net.sourceforge.waters.subject.base.UndoInfo;


/**
 * The subject implementation of the {@link ColorGeometryProxy} interface.
 *
 * @author Robi Malik
 */

public final class ColorGeometrySubject
  extends GeometrySubject
  implements ColorGeometryProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new color geometry.
   * @param colorSet The colour set of the new color geometry, or <CODE>null</CODE> if empty.
   */
  public ColorGeometrySubject(final Collection<? extends Color> colorSet)
  {
    if (colorSet == null) {
      mColorSet = new NotCloningGeometrySetSubject<Color>();
    } else {
      mColorSet = new NotCloningGeometrySetSubject<Color>(colorSet);
    }
    mColorSet.setParent(this);
  }

  /**
   * Creates a new color geometry using default values.
   * This constructor creates a color geometry with
   * an empty colour set.
   */
  public ColorGeometrySubject()
  {
    this(null);
  }


  //#########################################################################
  //# Cloning and Assigning
  @Override
  public ColorGeometrySubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (ColorGeometrySubject) cloner.getClone(this);
  }

  @Override
  protected void collectUndoInfo(final ProxySubject newState,
                                 final RecursiveUndoInfo info)
  {
    super.collectUndoInfo(newState, info);
    final ColorGeometrySubject downcast = (ColorGeometrySubject) newState;
    final UndoInfo step1 = mColorSet.createUndoInfo(downcast.mColorSet);
    if (step1 != null) {
      info.add(step1);
    }
  }


  //#########################################################################
  //# Comparing
  public Class<ColorGeometryProxy> getProxyInterface()
  {
    return ColorGeometryProxy.class;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitColorGeometryProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.ColorGeometryProxy
  public Set<Color> getColorSet()
  {
    final Set<?> precast = mColorSet;
    @SuppressWarnings("unchecked")
    final Set<Color> downcast = (Set<Color>) precast;
    return Collections.unmodifiableSet(downcast);
  }


  //#########################################################################
  //# Setters
  /**
   * Gets the modifiable colour set identifying this colour geometry.
   */
  public SimpleSetSubject<Color> getColorSetModifiable()
  {
    return mColorSet;
  }


  //#########################################################################
  //# Data Members
  private SimpleSetSubject<Color> mColorSet;

}

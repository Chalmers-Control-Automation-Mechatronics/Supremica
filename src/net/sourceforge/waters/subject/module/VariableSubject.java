//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   VariableSubject
//###########################################################################
//# $Id: VariableSubject.java,v 1.13 2007-07-03 11:20:53 robi Exp $
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import net.sourceforge.waters.model.base.Proxy;
import net.sourceforge.waters.model.base.ProxyTools;
import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.SimpleExpressionProxy;
import net.sourceforge.waters.model.module.VariableProxy;
import net.sourceforge.waters.subject.base.MutableSubject;
import net.sourceforge.waters.subject.base.ProxySubject;


/**
 * The subject implementation of the {@link VariableProxy} interface.
 *
 * @author Robi Malik
 */

public final class VariableSubject
  extends MutableSubject
  implements VariableProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new variable.
   * @param name The name of the new variable.
   * @param type The type of the new variable.
   * @param initialValue The initial value of the new variable.
   * @param markedValue The marked value of the new variable, or <CODE>null</CODE>.
   */
  public VariableSubject(final String name,
                         final SimpleExpressionProxy type,
                         final SimpleExpressionProxy initialValue,
                         final SimpleExpressionProxy markedValue)
  {
    mName = name;
    mType = (SimpleExpressionSubject) type;
    mType.setParent(this);
    mInitialValue = (SimpleExpressionSubject) initialValue;
    mInitialValue.setParent(this);
    mMarkedValue = (SimpleExpressionSubject) markedValue;
    if (mMarkedValue != null) {
      mMarkedValue.setParent(this);
    }
  }

  /**
   * Creates a new variable using default values.
   * This constructor creates a variable with
   * the marked value set to <CODE>null</CODE>.
   * @param name The name of the new variable.
   * @param type The type of the new variable.
   * @param initialValue The initial value of the new variable.
   */
  public VariableSubject(final String name,
                         final SimpleExpressionProxy type,
                         final SimpleExpressionProxy initialValue)
  {
    this(name,
         type,
         initialValue,
         null);
  }


  //#########################################################################
  //# Cloning and Assigning
  public VariableSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (VariableSubject) cloner.getClone(this);
  }

  public boolean assignFrom(final ProxySubject partner)
  {
    if (this != partner) {
      final VariableSubject downcast = (VariableSubject) partner;
      boolean change = super.assignFrom(partner);
      final String name = downcast.getName();
      if (mName != name) {
        mName = name;
        change = true;
      }
      final SimpleExpressionSubject type = downcast.getType();
      mType.assignFrom(type);
      final SimpleExpressionSubject initialValue = downcast.getInitialValue();
      mInitialValue.assignFrom(initialValue);
      final SimpleExpressionSubject markedValue = downcast.getMarkedValue();
      if (mMarkedValue != null && markedValue != null) {
        mMarkedValue.assignFrom(markedValue);
      } else if (mMarkedValue == null && markedValue != null) {
        mMarkedValue = markedValue.clone();
        mMarkedValue.setParent(this);
        change = true;
      } else if (mMarkedValue != null && markedValue == null) {
        mMarkedValue.setParent(null);
        mMarkedValue = null;
        change = true;
      }
      if (change) {
        fireStateChanged();
      }
    }
    return false;
  }


  //#########################################################################
  //# Equality and Hashcode
  public Class<VariableProxy> getProxyInterface()
  {
    return VariableProxy.class;
  }

  public boolean equalsByContents(final Proxy partner)
  {
    if (super.equalsByContents(partner)) {
      final VariableProxy downcast = (VariableProxy) partner;
      return
        mName.equals(downcast.getName()) &&
        mType.equalsByContents(downcast.getType()) &&
        mInitialValue.equalsByContents(downcast.getInitialValue()) &&
        ProxyTools.equalsByContents(mMarkedValue, downcast.getMarkedValue());
    } else {
      return false;
    }
  }

  public boolean equalsWithGeometry(final Proxy partner)
  {
    if (super.equalsByContents(partner)) {
      final VariableProxy downcast = (VariableProxy) partner;
      return
        mName.equals(downcast.getName()) &&
        mType.equalsWithGeometry(downcast.getType()) &&
        mInitialValue.equalsWithGeometry(downcast.getInitialValue()) &&
        ProxyTools.equalsWithGeometry(mMarkedValue, downcast.getMarkedValue());
    } else {
      return false;
    }
  }

  public int hashCodeByContents()
  {
    int result = super.hashCodeByContents();
    result *= 5;
    result += mName.hashCode();
    result *= 5;
    result += mType.hashCodeByContents();
    result *= 5;
    result += mInitialValue.hashCodeByContents();
    result *= 5;
    result += ProxyTools.hashCodeByContents(mMarkedValue);
    return result;
  }

  public int hashCodeWithGeometry()
  {
    int result = super.hashCodeByContents();
    result *= 5;
    result += mName.hashCode();
    result *= 5;
    result += mType.hashCodeWithGeometry();
    result *= 5;
    result += mInitialValue.hashCodeWithGeometry();
    result *= 5;
    result += ProxyTools.hashCodeWithGeometry(mMarkedValue);
    return result;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitVariableProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.VariableProxy
  public String getName()
  {
    return mName;
  }

  public SimpleExpressionSubject getType()
  {
    return mType;
  }

  public SimpleExpressionSubject getInitialValue()
  {
    return mInitialValue;
  }

  public SimpleExpressionSubject getMarkedValue()
  {
    return mMarkedValue;
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the Name of this variable.
   */
  public void setName(final String name)
  {
    if (mName.equals(name)) {
      return;
    }
    mName = name;
    fireStateChanged();
  }

  /**
   * Sets the type of this variable.
   */
  public void setType(final SimpleExpressionSubject type)
  {
    if (mType == type) {
      return;
    }
    type.setParent(this);
    mType.setParent(null);
    mType = type;
    fireStateChanged();
  }

  /**
   * Sets the initial value of this variable.
   */
  public void setInitialValue(final SimpleExpressionSubject initialValue)
  {
    if (mInitialValue == initialValue) {
      return;
    }
    initialValue.setParent(this);
    mInitialValue.setParent(null);
    mInitialValue = initialValue;
    fireStateChanged();
  }

  /**
   * Sets the marked value of this variable.
   */
  public void setMarkedValue(final SimpleExpressionSubject markedValue)
  {
    if (mMarkedValue == markedValue) {
      return;
    }
    if (markedValue != null) {
      markedValue.setParent(this);
    }
    if (mMarkedValue != null) {
      mMarkedValue.setParent(null);
    }
    mMarkedValue = markedValue;
    fireStateChanged();
  }


  //#########################################################################
  //# Data Members
  private String mName;
  private SimpleExpressionSubject mType;
  private SimpleExpressionSubject mInitialValue;
  private SimpleExpressionSubject mMarkedValue;

}

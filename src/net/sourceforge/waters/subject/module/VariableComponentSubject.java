//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   VariableComponentSubject
//###########################################################################
//# $Id: VariableComponentSubject.java,v 1.2 2007-12-04 03:22:58 robi Exp $
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.util.Collection;
import java.util.Collections;
import java.util.List;

import net.sourceforge.waters.model.base.Proxy;
import net.sourceforge.waters.model.base.ProxyTools;
import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.IdentifierProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.SimpleExpressionProxy;
import net.sourceforge.waters.model.module.VariableComponentProxy;
import net.sourceforge.waters.model.module.VariableMarkingProxy;
import net.sourceforge.waters.model.unchecked.Casting;
import net.sourceforge.waters.subject.base.ArrayListSubject;
import net.sourceforge.waters.subject.base.ListSubject;
import net.sourceforge.waters.subject.base.ProxySubject;


/**
 * The subject implementation of the {@link VariableComponentProxy} interface.
 *
 * @author Robi Malik
 */

public final class VariableComponentSubject
  extends ComponentSubject
  implements VariableComponentProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new variable component.
   * @param identifier The identifier defining the name of the new variable component.
   * @param type The type of the new variable component.
   * @param deterministic The deterministic of the new variable component.
   * @param initialStatePredicate The initial state predicate of the new variable component.
   * @param variableMarkings The variable markings of the new variable component, or <CODE>null</CODE> if empty.
   */
  public VariableComponentSubject(final IdentifierProxy identifier,
                                  final SimpleExpressionProxy type,
                                  final boolean deterministic,
                                  final SimpleExpressionProxy initialStatePredicate,
                                  final Collection<? extends VariableMarkingProxy> variableMarkings)
  {
    super(identifier);
    mType = (SimpleExpressionSubject) type;
    mType.setParent(this);
    mIsDeterministic = deterministic;
    mInitialStatePredicate = (SimpleExpressionSubject) initialStatePredicate;
    mInitialStatePredicate.setParent(this);
    if (variableMarkings == null) {
      mVariableMarkings = new ArrayListSubject<VariableMarkingSubject>();
    } else {
      mVariableMarkings = new ArrayListSubject<VariableMarkingSubject>
        (variableMarkings, VariableMarkingSubject.class);
    }
    mVariableMarkings.setParent(this);
  }

  /**
   * Creates a new variable component using default values.
   * This constructor creates a variable component with
   * an empty variable markings.
   * @param identifier The identifier defining the name of the new variable component.
   * @param type The type of the new variable component.
   * @param deterministic The deterministic of the new variable component.
   * @param initialStatePredicate The initial state predicate of the new variable component.
   */
  public VariableComponentSubject(final IdentifierProxy identifier,
                                  final SimpleExpressionProxy type,
                                  final boolean deterministic,
                                  final SimpleExpressionProxy initialStatePredicate)
  {
    this(identifier,
         type,
         deterministic,
         initialStatePredicate,
         null);
  }


  //#########################################################################
  //# Cloning and Assigning
  public VariableComponentSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (VariableComponentSubject) cloner.getClone(this);
  }

  public boolean assignFrom(final ProxySubject partner)
  {
    if (this != partner) {
      final VariableComponentSubject downcast =
        (VariableComponentSubject) partner;
      boolean change = super.assignFrom(partner);
      final SimpleExpressionSubject type = downcast.getType();
      if (mType.getClass() != type.getClass()) {
        mType.setParent(null);
        mType = type.clone();
        mType.setParent(this);
        change = true;
      } else {
        mType.assignFrom(type);
      }
      final boolean deterministic = downcast.isDeterministic();
      if (mIsDeterministic != deterministic) {
        mIsDeterministic = deterministic;
        change = true;
      }
      final SimpleExpressionSubject initialStatePredicate =
        downcast.getInitialStatePredicate();
      if (mInitialStatePredicate.getClass() != initialStatePredicate.getClass()) {
        mInitialStatePredicate.setParent(null);
        mInitialStatePredicate = initialStatePredicate.clone();
        mInitialStatePredicate.setParent(this);
        change = true;
      } else {
        mInitialStatePredicate.assignFrom(initialStatePredicate);
      }
      final ListSubject<VariableMarkingSubject> variableMarkings =
        downcast.getVariableMarkingsModifiable();
      mVariableMarkings.assignFrom(variableMarkings);
      if (change) {
        fireStateChanged();
      }
    }
    return false;
  }


  //#########################################################################
  //# Equality and Hashcode
  public Class<VariableComponentProxy> getProxyInterface()
  {
    return VariableComponentProxy.class;
  }

  public boolean equalsByContents(final Proxy partner)
  {
    if (super.equalsByContents(partner)) {
      final VariableComponentProxy downcast =
        (VariableComponentProxy) partner;
      return
        mType.equalsByContents(downcast.getType()) &&
        (mIsDeterministic == downcast.isDeterministic()) &&
        mInitialStatePredicate.equalsByContents(downcast.getInitialStatePredicate()) &&
        ProxyTools.isEqualListByContents
          (mVariableMarkings, downcast.getVariableMarkings());
    } else {
      return false;
    }
  }

  public boolean equalsWithGeometry(final Proxy partner)
  {
    if (super.equalsWithGeometry(partner)) {
      final VariableComponentProxy downcast =
        (VariableComponentProxy) partner;
      return
        mType.equalsWithGeometry(downcast.getType()) &&
        (mIsDeterministic == downcast.isDeterministic()) &&
        mInitialStatePredicate.equalsWithGeometry(downcast.getInitialStatePredicate()) &&
        ProxyTools.isEqualListWithGeometry
          (mVariableMarkings, downcast.getVariableMarkings());
    } else {
      return false;
    }
  }

  public int hashCodeByContents()
  {
    int result = super.hashCodeByContents();
    result *= 5;
    result += mType.hashCodeByContents();
    result *= 5;
    if (mIsDeterministic) {
      result++;
    }
    result *= 5;
    result += mInitialStatePredicate.hashCodeByContents();
    result *= 5;
    result += ProxyTools.getListHashCodeByContents(mVariableMarkings);
    return result;
  }

  public int hashCodeWithGeometry()
  {
    int result = super.hashCodeWithGeometry();
    result *= 5;
    result += mType.hashCodeWithGeometry();
    result *= 5;
    if (mIsDeterministic) {
      result++;
    }
    result *= 5;
    result += mInitialStatePredicate.hashCodeWithGeometry();
    result *= 5;
    result += ProxyTools.getListHashCodeWithGeometry(mVariableMarkings);
    return result;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitVariableComponentProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.VariableComponentProxy
  public SimpleExpressionSubject getType()
  {
    return mType;
  }

  public boolean isDeterministic()
  {
    return mIsDeterministic;
  }

  public SimpleExpressionSubject getInitialStatePredicate()
  {
    return mInitialStatePredicate;
  }

  public List<VariableMarkingProxy> getVariableMarkings()
  {
    final List<VariableMarkingProxy> downcast =
      Casting.toList(mVariableMarkings);
    return Collections.unmodifiableList(downcast);
  }


  //#########################################################################
  //# Setters
  public void setType(final SimpleExpressionSubject type)
  {
    if (mType == type) {
      return;
    }
    type.setParent(this);
    mType.setParent(null);
    mType = type;
    fireStateChanged();
  }

  public void setDeterministic(final boolean deterministic)
  {
    if (mIsDeterministic == deterministic) {
      return;
    }
    mIsDeterministic = deterministic;
    fireStateChanged();
  }

  public void setInitialStatePredicate(final SimpleExpressionSubject initialStatePredicate)
  {
    if (mInitialStatePredicate == initialStatePredicate) {
      return;
    }
    initialStatePredicate.setParent(this);
    mInitialStatePredicate.setParent(null);
    mInitialStatePredicate = initialStatePredicate;
    fireStateChanged();
  }

  public ListSubject<VariableMarkingSubject> getVariableMarkingsModifiable()
  {
    return mVariableMarkings;
  }


  //#########################################################################
  //# Data Members
  private SimpleExpressionSubject mType;
  private boolean mIsDeterministic;
  private SimpleExpressionSubject mInitialStatePredicate;
  private ListSubject<VariableMarkingSubject> mVariableMarkings;

}

//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################
//# Copyright (C) 2004-2020 Robi Malik
//###########################################################################
//# This file is part of Waters.
//# Waters is free software: you can redistribute it and/or modify it under
//# the terms of the GNU General Public License as published by the Free
//# Software Foundation, either version 2 of the License, or (at your option)
//# any later version.
//# Waters is distributed in the hope that it will be useful, but WITHOUT ANY
//# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
//# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
//# details.
//# You should have received a copy of the GNU General Public License along
//# with Waters. If not, see <http://www.gnu.org/licenses/>.
//#
//# Linking Waters statically or dynamically with other modules is making a
//# combined work based on Waters. Thus, the terms and conditions of the GNU
//# General Public License cover the whole combination.
//# In addition, as a special exception, the copyright holders of Waters give
//# you permission to combine Waters with code included in the standard
//# release of Supremica under the Supremica Software License Agreement (or
//# modified versions of such code, with unchanged license). You may copy and
//# distribute such a system following the terms of the GNU GPL for Waters and
//# the licenses of the other code concerned.
//# Note that people who make modified versions of Waters are not obligated to
//# grant this special exception for their modified versions; it is their
//# choice whether to do so. The GNU General Public License gives permission
//# to release a modified version without this exception; this exception also
//# makes it possible to release a modified version which carries forward this
//# exception.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Set;

import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.IdentifierProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.SimpleExpressionProxy;
import net.sourceforge.waters.model.module.VariableComponentProxy;
import net.sourceforge.waters.model.module.VariableMarkingProxy;
import net.sourceforge.waters.subject.base.ArrayListSubject;
import net.sourceforge.waters.subject.base.ListSubject;
import net.sourceforge.waters.subject.base.ModelChangeEvent;
import net.sourceforge.waters.subject.base.ProxySubject;
import net.sourceforge.waters.subject.base.RecursiveUndoInfo;
import net.sourceforge.waters.subject.base.ReplacementUndoInfo;
import net.sourceforge.waters.subject.base.Subject;
import net.sourceforge.waters.subject.base.UndoInfo;


/**
 * The subject implementation of the {@link VariableComponentProxy} interface.
 *
 * @author Robi Malik
 */

public final class VariableComponentSubject
  extends ComponentSubject
  implements VariableComponentProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new variable.
   * @param identifier The identifier defining the name of the new variable.
   * @param type The range of the new variable.
   * @param initialStatePredicate The initial state predicate of the new variable.
   * @param variableMarkings The list of markings of the new variable, or <CODE>null</CODE> if empty.
   */
  public VariableComponentSubject(final IdentifierProxy identifier,
                                  final SimpleExpressionProxy type,
                                  final SimpleExpressionProxy initialStatePredicate,
                                  final Collection<? extends VariableMarkingProxy> variableMarkings)
  {
    super(identifier);
    mType = (SimpleExpressionSubject) type;
    mType.setParent(this);
    mInitialStatePredicate = (SimpleExpressionSubject) initialStatePredicate;
    mInitialStatePredicate.setParent(this);
    if (variableMarkings == null) {
      mVariableMarkings = new ArrayListSubject<VariableMarkingSubject>();
    } else {
      mVariableMarkings = new ArrayListSubject<VariableMarkingSubject>
        (variableMarkings, VariableMarkingSubject.class);
    }
    mVariableMarkings.setParent(this);
  }

  /**
   * Creates a new variable using default values.
   * This constructor creates a variable with
   * an empty list of markings.
   * @param identifier The identifier defining the name of the new variable.
   * @param type The range of the new variable.
   * @param initialStatePredicate The initial state predicate of the new variable.
   */
  public VariableComponentSubject(final IdentifierProxy identifier,
                                  final SimpleExpressionProxy type,
                                  final SimpleExpressionProxy initialStatePredicate)
  {
    this(identifier,
         type,
         initialStatePredicate,
         null);
  }


  //#########################################################################
  //# Cloning and Assigning
  @Override
  public VariableComponentSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (VariableComponentSubject) cloner.getClone(this);
  }

  @Override
  public ModelChangeEvent assignMember(final int index,
                                       final Object oldValue,
                                       final Object newValue)
  {
    if (index <= 1) {
      return super.assignMember(index, oldValue, newValue);
    } else {
      switch (index) {
      case 2:
        mType.setParent(null);
        mType = (SimpleExpressionSubject) newValue;
        mType.setParent(this);
        return ModelChangeEvent.createStateChanged(this);
      case 3:
        mInitialStatePredicate.setParent(null);
        mInitialStatePredicate = (SimpleExpressionSubject) newValue;
        mInitialStatePredicate.setParent(this);
        return ModelChangeEvent.createStateChanged(this);
      default:
        return null;
      }
    }
  }

  @Override
  protected void collectUndoInfo(final ProxySubject newState,
                                 final RecursiveUndoInfo info,
                                 final Set<? extends Subject> boundary)
  {
    super.collectUndoInfo(newState, info, boundary);
    final VariableComponentSubject downcast =
      (VariableComponentSubject) newState;
    if (mType.getClass() == downcast.mType.getClass()) {
      final UndoInfo step2 = mType.createUndoInfo(downcast.mType, boundary);
      if (step2 != null) {
        info.add(step2);
      }
    } else {
      final SimpleExpressionSubject clone2 = downcast.mType.clone();
      final UndoInfo step2 = new ReplacementUndoInfo(2, mType, clone2);
      info.add(step2);
    }
    if (mInitialStatePredicate.getClass() == downcast.mInitialStatePredicate.getClass()) {
      final UndoInfo step3 =
        mInitialStatePredicate.createUndoInfo(downcast.mInitialStatePredicate, boundary);
      if (step3 != null) {
        info.add(step3);
      }
    } else {
      final SimpleExpressionSubject clone3 =
        downcast.mInitialStatePredicate.clone();
      final UndoInfo step3 =
        new ReplacementUndoInfo(3, mInitialStatePredicate, clone3);
      info.add(step3);
    }
    final UndoInfo step4 =
      mVariableMarkings.createUndoInfo(downcast.mVariableMarkings, boundary);
    if (step4 != null) {
      info.add(step4);
    }
  }


  //#########################################################################
  //# Comparing
  public Class<VariableComponentProxy> getProxyInterface()
  {
    return VariableComponentProxy.class;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitVariableComponentProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.VariableComponentProxy
  public SimpleExpressionSubject getType()
  {
    return mType;
  }

  public SimpleExpressionSubject getInitialStatePredicate()
  {
    return mInitialStatePredicate;
  }

  public List<VariableMarkingProxy> getVariableMarkings()
  {
    final List<?> precast = mVariableMarkings;
    @SuppressWarnings("unchecked")
    final List<VariableMarkingProxy> downcast =
      (List<VariableMarkingProxy>) precast;
    return Collections.unmodifiableList(downcast);
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the range of this variable.
   */
  public void setType(final SimpleExpressionSubject type)
  {
    if (mType == type) {
      return;
    }
    type.setParent(this);
    mType.setParent(null);
    mType = type;
    fireStateChanged();
  }

  /**
   * Sets the initial state predicate for this variable.
   */
  public void setInitialStatePredicate(final SimpleExpressionSubject initialStatePredicate)
  {
    if (mInitialStatePredicate == initialStatePredicate) {
      return;
    }
    initialStatePredicate.setParent(this);
    mInitialStatePredicate.setParent(null);
    mInitialStatePredicate = initialStatePredicate;
    fireStateChanged();
  }

  /**
   * Gets the modifiable list of markings for this variable.
   */
  public ListSubject<VariableMarkingSubject> getVariableMarkingsModifiable()
  {
    return mVariableMarkings;
  }


  //#########################################################################
  //# Data Members
  private SimpleExpressionSubject mType;
  private SimpleExpressionSubject mInitialStatePredicate;
  private ListSubject<VariableMarkingSubject> mVariableMarkings;

}

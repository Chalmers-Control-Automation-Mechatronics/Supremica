//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################
//# Copyright (C) 2004-2018 Robi Malik
//###########################################################################
//# This file is part of Waters.
//# Waters is free software: you can redistribute it and/or modify it under
//# the terms of the GNU General Public License as published by the Free
//# Software Foundation, either version 2 of the License, or (at your option)
//# any later version.
//# Waters is distributed in the hope that it will be useful, but WITHOUT ANY
//# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
//# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
//# details.
//# You should have received a copy of the GNU General Public License along
//# with Waters. If not, see <http://www.gnu.org/licenses/>.
//#
//# Linking Waters statically or dynamically with other modules is making a
//# combined work based on Waters. Thus, the terms and conditions of the GNU
//# General Public License cover the whole combination.
//# In addition, as a special exception, the copyright holders of Waters give
//# you permission to combine Waters with code included in the standard
//# release of Supremica under the Supremica Software License Agreement (or
//# modified versions of such code, with unchanged license). You may copy and
//# distribute such a system following the terms of the GNU GPL for Waters and
//# the licenses of the other code concerned.
//# Note that people who make modified versions of Waters are not obligated to
//# grant this special exception for their modified versions; it is their
//# choice whether to do so. The GNU General Public License gives permission
//# to release a modified version without this exception; this exception also
//# makes it possible to release a modified version which carries forward this
//# exception.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.util.Set;

import net.sourceforge.waters.model.base.ProxyTools;
import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.EdgeProxy;
import net.sourceforge.waters.model.module.GuardActionBlockProxy;
import net.sourceforge.waters.model.module.LabelBlockProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.NodeProxy;
import net.sourceforge.waters.model.module.PointGeometryProxy;
import net.sourceforge.waters.model.module.SplineGeometryProxy;
import net.sourceforge.waters.subject.base.ModelChangeEvent;
import net.sourceforge.waters.subject.base.MutableSubject;
import net.sourceforge.waters.subject.base.ProxySubject;
import net.sourceforge.waters.subject.base.RecursiveUndoInfo;
import net.sourceforge.waters.subject.base.ReplacementUndoInfo;
import net.sourceforge.waters.subject.base.Subject;
import net.sourceforge.waters.subject.base.UndoInfo;


/**
 * The subject implementation of the {@link EdgeProxy} interface.
 *
 * @author Robi Malik
 */

public final class EdgeSubject
  extends MutableSubject
  implements EdgeProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new edge.
   * @param source The source node of the new edge, or <CODE>null</CODE>.
   * @param target The target node of the new edge, or <CODE>null</CODE>.
   * @param labelBlock The label block of the new edge, or <CODE>null</CODE> if empty.
   * @param guardActionBlock The guard action block of the new edge, or <CODE>null</CODE>.
   * @param geometry The rendering information of the new edge, or <CODE>null</CODE>.
   * @param startPoint The rendering information for the start point of the new edge, or <CODE>null</CODE>.
   * @param endPoint The rendering information for the end point of the new edge, or <CODE>null</CODE>.
   */
  public EdgeSubject(final NodeProxy source,
                     final NodeProxy target,
                     final LabelBlockProxy labelBlock,
                     final GuardActionBlockProxy guardActionBlock,
                     final SplineGeometryProxy geometry,
                     final PointGeometryProxy startPoint,
                     final PointGeometryProxy endPoint)
  {
    mSource = (NodeSubject) source;
    mTarget = (NodeSubject) target;
    if (labelBlock == null) {
      mLabelBlock = new LabelBlockSubject();
    } else {
      mLabelBlock = (LabelBlockSubject) labelBlock;
    }
    mLabelBlock.setParent(this);
    mGuardActionBlock = (GuardActionBlockSubject) guardActionBlock;
    if (mGuardActionBlock != null) {
      mGuardActionBlock.setParent(this);
    }
    mGeometry = (SplineGeometrySubject) geometry;
    if (mGeometry != null) {
      mGeometry.setParent(this);
    }
    mStartPoint = (PointGeometrySubject) startPoint;
    if (mStartPoint != null) {
      mStartPoint.setParent(this);
    }
    mEndPoint = (PointGeometrySubject) endPoint;
    if (mEndPoint != null) {
      mEndPoint.setParent(this);
    }
  }

  /**
   * Creates a new edge using default values.
   * This constructor creates an edge with
   * the source node set to <CODE>null</CODE>,
   * the target node set to <CODE>null</CODE>,
   * an empty label block,
   * the guard action block set to <CODE>null</CODE>,
   * the rendering information set to <CODE>null</CODE>,
   * the rendering information for the start point set to <CODE>null</CODE>, and
   * the rendering information for the end point set to <CODE>null</CODE>.
   */
  public EdgeSubject()
  {
    this(null,
         null,
         null,
         null,
         null,
         null,
         null);
  }


  //#########################################################################
  //# Cloning and Assigning
  @Override
  public EdgeSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (EdgeSubject) cloner.getClone(this);
  }

  @Override
  public ModelChangeEvent assignMember(final int index,
                                       final Object oldValue,
                                       final Object newValue)
  {
    if (index <= 0) {
      return super.assignMember(index, oldValue, newValue);
    } else {
      switch (index) {
      case 1:
        mSource = (NodeSubject) newValue;
        return ModelChangeEvent.createStateChanged(this);
      case 2:
        mTarget = (NodeSubject) newValue;
        return ModelChangeEvent.createStateChanged(this);
      case 3:
        mLabelBlock.setParent(null);
        mLabelBlock = (LabelBlockSubject) newValue;
        mLabelBlock.setParent(this);
        return ModelChangeEvent.createStateChanged(this);
      case 4:
        if (mGuardActionBlock != null) {
          mGuardActionBlock.setParent(null);
        }
        mGuardActionBlock = (GuardActionBlockSubject) newValue;
        if (mGuardActionBlock != null) {
          mGuardActionBlock.setParent(this);
        }
        return ModelChangeEvent.createStateChanged(this);
      case 5:
        if (mGeometry != null) {
          mGeometry.setParent(null);
        }
        mGeometry = (SplineGeometrySubject) newValue;
        if (mGeometry != null) {
          mGeometry.setParent(this);
        }
        return ModelChangeEvent.createGeometryChanged(this, newValue);
      case 6:
        if (mStartPoint != null) {
          mStartPoint.setParent(null);
        }
        mStartPoint = (PointGeometrySubject) newValue;
        if (mStartPoint != null) {
          mStartPoint.setParent(this);
        }
        return ModelChangeEvent.createGeometryChanged(this, newValue);
      case 7:
        if (mEndPoint != null) {
          mEndPoint.setParent(null);
        }
        mEndPoint = (PointGeometrySubject) newValue;
        if (mEndPoint != null) {
          mEndPoint.setParent(this);
        }
        return ModelChangeEvent.createGeometryChanged(this, newValue);
      default:
        return null;
      }
    }
  }

  @Override
  protected void collectUndoInfo(final ProxySubject newState,
                                 final RecursiveUndoInfo info,
                                 final Set<? extends Subject> boundary)
  {
    super.collectUndoInfo(newState, info, boundary);
    final EdgeSubject downcast = (EdgeSubject) newState;
    if (mSource != downcast.mSource) {
      final UndoInfo step1 =
        new ReplacementUndoInfo(1, mSource, downcast.mSource);
      info.add(step1);
    }
    if (mTarget != downcast.mTarget) {
      final UndoInfo step2 =
        new ReplacementUndoInfo(2, mTarget, downcast.mTarget);
      info.add(step2);
    }
    final UndoInfo step3 =
      mLabelBlock.createUndoInfo(downcast.mLabelBlock, boundary);
    if (step3 != null) {
      info.add(step3);
    }
    final boolean null4a = mGuardActionBlock == null;
    final boolean null4b = downcast.mGuardActionBlock == null;
    if (null4a != null4b) {
      if (boundary ==  null || !boundary.contains(mGuardActionBlock)) {
        final GuardActionBlockSubject clone4 =
          ProxyTools.clone(downcast.mGuardActionBlock);
        final UndoInfo step4 =
          new ReplacementUndoInfo(4, mGuardActionBlock, clone4);
        info.add(step4);
      }
    } else if (!null4a) {
      final UndoInfo step4 =
        mGuardActionBlock.createUndoInfo(downcast.mGuardActionBlock, boundary);
      if (step4 != null) {
        info.add(step4);
      }
    }
    final boolean null5a = mGeometry == null;
    final boolean null5b = downcast.mGeometry == null;
    if (null5a != null5b) {
      if (boundary ==  null || !boundary.contains(mGeometry)) {
        final SplineGeometrySubject clone5 =
          ProxyTools.clone(downcast.mGeometry);
        final UndoInfo step5 = new ReplacementUndoInfo(5, mGeometry, clone5);
        info.add(step5);
      }
    } else if (!null5a) {
      final UndoInfo step5 =
        mGeometry.createUndoInfo(downcast.mGeometry, boundary);
      if (step5 != null) {
        info.add(step5);
      }
    }
    final boolean null6a = mStartPoint == null;
    final boolean null6b = downcast.mStartPoint == null;
    if (null6a != null6b) {
      if (boundary ==  null || !boundary.contains(mStartPoint)) {
        final PointGeometrySubject clone6 =
          ProxyTools.clone(downcast.mStartPoint);
        final UndoInfo step6 =
          new ReplacementUndoInfo(6, mStartPoint, clone6);
        info.add(step6);
      }
    } else if (!null6a) {
      final UndoInfo step6 =
        mStartPoint.createUndoInfo(downcast.mStartPoint, boundary);
      if (step6 != null) {
        info.add(step6);
      }
    }
    final boolean null7a = mEndPoint == null;
    final boolean null7b = downcast.mEndPoint == null;
    if (null7a != null7b) {
      if (boundary ==  null || !boundary.contains(mEndPoint)) {
        final PointGeometrySubject clone7 =
          ProxyTools.clone(downcast.mEndPoint);
        final UndoInfo step7 = new ReplacementUndoInfo(7, mEndPoint, clone7);
        info.add(step7);
      }
    } else if (!null7a) {
      final UndoInfo step7 =
        mEndPoint.createUndoInfo(downcast.mEndPoint, boundary);
      if (step7 != null) {
        info.add(step7);
      }
    }
  }


  //#########################################################################
  //# Comparing
  public Class<EdgeProxy> getProxyInterface()
  {
    return EdgeProxy.class;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitEdgeProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.EdgeProxy
  public NodeSubject getSource()
  {
    return mSource;
  }

  public NodeSubject getTarget()
  {
    return mTarget;
  }

  public LabelBlockSubject getLabelBlock()
  {
    return mLabelBlock;
  }

  public GuardActionBlockSubject getGuardActionBlock()
  {
    return mGuardActionBlock;
  }

  public SplineGeometrySubject getGeometry()
  {
    return mGeometry;
  }

  public PointGeometrySubject getStartPoint()
  {
    return mStartPoint;
  }

  public PointGeometrySubject getEndPoint()
  {
    return mEndPoint;
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the source node of this edge.
   */
  public void setSource(final NodeSubject source)
  {
    if (mSource == source) {
      return;
    }
    mSource = source;
    fireStateChanged();
  }

  /**
   * Sets the target node of this edge.
   */
  public void setTarget(final NodeSubject target)
  {
    if (mTarget == target) {
      return;
    }
    mTarget = target;
    fireStateChanged();
  }

  /**
   * Sets the label block of this edge.
   */
  public void setLabelBlock(final LabelBlockSubject labelBlock)
  {
    if (mLabelBlock == labelBlock) {
      return;
    }
    labelBlock.setParent(this);
    mLabelBlock.setParent(null);
    mLabelBlock = labelBlock;
    fireStateChanged();
  }

  public void setGuardActionBlock(final GuardActionBlockSubject guardActionBlock)
  {
    if (mGuardActionBlock == guardActionBlock) {
      return;
    }
    if (guardActionBlock != null) {
      guardActionBlock.setParent(this);
    }
    if (mGuardActionBlock != null) {
      mGuardActionBlock.setParent(null);
    }
    mGuardActionBlock = guardActionBlock;
    fireStateChanged();
  }

  /**
   * Sets the rendering information for this edge.
   */
  public void setGeometry(final SplineGeometrySubject geometry)
  {
    if (mGeometry == geometry) {
      return;
    }
    if (geometry != null) {
      geometry.setParent(this);
    }
    if (mGeometry != null) {
      mGeometry.setParent(null);
    }
    mGeometry = geometry;
    fireGeometryChanged(mGeometry);
  }

  /**
   * Sets the rendering information for the start point of this edge.
   */
  public void setStartPoint(final PointGeometrySubject startPoint)
  {
    if (mStartPoint == startPoint) {
      return;
    }
    if (startPoint != null) {
      startPoint.setParent(this);
    }
    if (mStartPoint != null) {
      mStartPoint.setParent(null);
    }
    mStartPoint = startPoint;
    fireGeometryChanged(mStartPoint);
  }

  /**
   * Sets the rendering information for the end point of this edge.
   */
  public void setEndPoint(final PointGeometrySubject endPoint)
  {
    if (mEndPoint == endPoint) {
      return;
    }
    if (endPoint != null) {
      endPoint.setParent(this);
    }
    if (mEndPoint != null) {
      mEndPoint.setParent(null);
    }
    mEndPoint = endPoint;
    fireGeometryChanged(mEndPoint);
  }


  //#########################################################################
  //# Data Members
  private NodeSubject mSource;
  private NodeSubject mTarget;
  private LabelBlockSubject mLabelBlock;
  private GuardActionBlockSubject mGuardActionBlock;
  private SplineGeometrySubject mGeometry;
  private PointGeometrySubject mStartPoint;
  private PointGeometrySubject mEndPoint;

}

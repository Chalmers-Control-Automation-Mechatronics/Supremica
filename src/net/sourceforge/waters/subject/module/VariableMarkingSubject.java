//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   VariableMarkingSubject
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.IdentifierProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.SimpleExpressionProxy;
import net.sourceforge.waters.model.module.VariableMarkingProxy;
import net.sourceforge.waters.subject.base.ModelChangeEvent;
import net.sourceforge.waters.subject.base.MutableSubject;
import net.sourceforge.waters.subject.base.ProxySubject;
import net.sourceforge.waters.subject.base.RecursiveUndoInfo;
import net.sourceforge.waters.subject.base.ReplacementUndoInfo;
import net.sourceforge.waters.subject.base.UndoInfo;


/**
 * The subject implementation of the {@link VariableMarkingProxy} interface.
 *
 * @author Robi Malik
 */

public final class VariableMarkingSubject
  extends MutableSubject
  implements VariableMarkingProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new variable marking.
   * @param proposition The proposition event of the new variable marking.
   * @param predicate The marking predicate of the new variable marking.
   */
  public VariableMarkingSubject(final IdentifierProxy proposition,
                                final SimpleExpressionProxy predicate)
  {
    mProposition = (IdentifierSubject) proposition;
    mProposition.setParent(this);
    mPredicate = (SimpleExpressionSubject) predicate;
    mPredicate.setParent(this);
  }


  //#########################################################################
  //# Cloning and Assigning
  @Override
  public VariableMarkingSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (VariableMarkingSubject) cloner.getClone(this);
  }

  @Override
  public ModelChangeEvent assignMember(final int index,
                                       final Object oldValue,
                                       final Object newValue)
  {
    if (index <= 0) {
      return super.assignMember(index, oldValue, newValue);
    } else {
      switch (index) {
      case 1:
        mProposition.setParent(null);
        mProposition = (IdentifierSubject) newValue;
        mProposition.setParent(this);
        return ModelChangeEvent.createStateChanged(this);
      case 2:
        mPredicate.setParent(null);
        mPredicate = (SimpleExpressionSubject) newValue;
        mPredicate.setParent(this);
        return ModelChangeEvent.createStateChanged(this);
      default:
        return null;
      }
    }
  }

  @Override
  protected void collectUndoInfo(final ProxySubject newState,
                                 final RecursiveUndoInfo info)
  {
    super.collectUndoInfo(newState, info);
    final VariableMarkingSubject downcast = (VariableMarkingSubject) newState;
    if (mProposition.getClass() == downcast.mProposition.getClass()) {
      final UndoInfo step1 =
        mProposition.createUndoInfo(downcast.mProposition);
      if (step1 != null) {
        info.add(step1);
      }
    } else {
      final IdentifierSubject clone1 = downcast.mProposition.clone();
      final UndoInfo step1 = new ReplacementUndoInfo(1, mProposition, clone1);
      info.add(step1);
    }
    if (mPredicate.getClass() == downcast.mPredicate.getClass()) {
      final UndoInfo step2 = mPredicate.createUndoInfo(downcast.mPredicate);
      if (step2 != null) {
        info.add(step2);
      }
    } else {
      final SimpleExpressionSubject clone2 = downcast.mPredicate.clone();
      final UndoInfo step2 = new ReplacementUndoInfo(2, mPredicate, clone2);
      info.add(step2);
    }
  }


  //#########################################################################
  //# Comparing
  public Class<VariableMarkingProxy> getProxyInterface()
  {
    return VariableMarkingProxy.class;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitVariableMarkingProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.VariableMarkingProxy
  public IdentifierSubject getProposition()
  {
    return mProposition;
  }

  public SimpleExpressionSubject getPredicate()
  {
    return mPredicate;
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the proposition event of this marking.
   */
  public void setProposition(final IdentifierSubject proposition)
  {
    if (mProposition == proposition) {
      return;
    }
    proposition.setParent(this);
    mProposition.setParent(null);
    mProposition = proposition;
    fireStateChanged();
  }

  /**
   * Sets the marking predicate of this marking.
   */
  public void setPredicate(final SimpleExpressionSubject predicate)
  {
    if (mPredicate == predicate) {
      return;
    }
    predicate.setParent(this);
    mPredicate.setParent(null);
    mPredicate = predicate;
    fireStateChanged();
  }


  //#########################################################################
  //# Data Members
  private IdentifierSubject mProposition;
  private SimpleExpressionSubject mPredicate;

}

//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   VariableMarkingSubject
//###########################################################################
//# $Id: VariableMarkingSubject.java,v 1.2 2007-12-04 03:22:58 robi Exp $
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import net.sourceforge.waters.model.base.Proxy;
import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.IdentifierProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.SimpleExpressionProxy;
import net.sourceforge.waters.model.module.VariableMarkingProxy;
import net.sourceforge.waters.subject.base.MutableSubject;
import net.sourceforge.waters.subject.base.ProxySubject;


/**
 * The subject implementation of the {@link VariableMarkingProxy} interface.
 *
 * @author Robi Malik
 */

public final class VariableMarkingSubject
  extends MutableSubject
  implements VariableMarkingProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new variable marking.
   * @param proposition The proposition of the new variable marking.
   * @param predicate The predicate of the new variable marking.
   */
  public VariableMarkingSubject(final IdentifierProxy proposition,
                                final SimpleExpressionProxy predicate)
  {
    mProposition = (IdentifierSubject) proposition;
    mProposition.setParent(this);
    mPredicate = (SimpleExpressionSubject) predicate;
    mPredicate.setParent(this);
  }


  //#########################################################################
  //# Cloning and Assigning
  public VariableMarkingSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (VariableMarkingSubject) cloner.getClone(this);
  }

  public boolean assignFrom(final ProxySubject partner)
  {
    if (this != partner) {
      final VariableMarkingSubject downcast =
        (VariableMarkingSubject) partner;
      boolean change = super.assignFrom(partner);
      final IdentifierSubject proposition = downcast.getProposition();
      if (mProposition.getClass() != proposition.getClass()) {
        mProposition.setParent(null);
        mProposition = proposition.clone();
        mProposition.setParent(this);
        change = true;
      } else {
        mProposition.assignFrom(proposition);
      }
      final SimpleExpressionSubject predicate = downcast.getPredicate();
      if (mPredicate.getClass() != predicate.getClass()) {
        mPredicate.setParent(null);
        mPredicate = predicate.clone();
        mPredicate.setParent(this);
        change = true;
      } else {
        mPredicate.assignFrom(predicate);
      }
      if (change) {
        fireStateChanged();
      }
    }
    return false;
  }


  //#########################################################################
  //# Equality and Hashcode
  public Class<VariableMarkingProxy> getProxyInterface()
  {
    return VariableMarkingProxy.class;
  }

  public boolean equalsByContents(final Proxy partner)
  {
    if (super.equalsByContents(partner)) {
      final VariableMarkingProxy downcast = (VariableMarkingProxy) partner;
      return
        mProposition.equalsByContents(downcast.getProposition()) &&
        mPredicate.equalsByContents(downcast.getPredicate());
    } else {
      return false;
    }
  }

  public boolean equalsWithGeometry(final Proxy partner)
  {
    if (super.equalsByContents(partner)) {
      final VariableMarkingProxy downcast = (VariableMarkingProxy) partner;
      return
        mProposition.equalsWithGeometry(downcast.getProposition()) &&
        mPredicate.equalsWithGeometry(downcast.getPredicate());
    } else {
      return false;
    }
  }

  public int hashCodeByContents()
  {
    int result = super.hashCodeByContents();
    result *= 5;
    result += mProposition.hashCodeByContents();
    result *= 5;
    result += mPredicate.hashCodeByContents();
    return result;
  }

  public int hashCodeWithGeometry()
  {
    int result = super.hashCodeByContents();
    result *= 5;
    result += mProposition.hashCodeWithGeometry();
    result *= 5;
    result += mPredicate.hashCodeWithGeometry();
    return result;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitVariableMarkingProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.VariableMarkingProxy
  public IdentifierSubject getProposition()
  {
    return mProposition;
  }

  public SimpleExpressionSubject getPredicate()
  {
    return mPredicate;
  }


  //#########################################################################
  //# Setters
  public void setProposition(final IdentifierSubject proposition)
  {
    if (mProposition == proposition) {
      return;
    }
    proposition.setParent(this);
    mProposition.setParent(null);
    mProposition = proposition;
    fireStateChanged();
  }

  public void setPredicate(final SimpleExpressionSubject predicate)
  {
    if (mPredicate == predicate) {
      return;
    }
    predicate.setParent(this);
    mPredicate.setParent(null);
    mPredicate = predicate;
    fireStateChanged();
  }


  //#########################################################################
  //# Data Members
  private IdentifierSubject mProposition;
  private SimpleExpressionSubject mPredicate;

}

//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   GraphSubject
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.util.Collection;
import java.util.Collections;
import java.util.Set;

import net.sourceforge.waters.model.base.ProxyTools;
import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.EdgeProxy;
import net.sourceforge.waters.model.module.GraphProxy;
import net.sourceforge.waters.model.module.LabelBlockProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.NodeProxy;
import net.sourceforge.waters.subject.base.ArrayListSubject;
import net.sourceforge.waters.subject.base.IndexedSetSubject;
import net.sourceforge.waters.subject.base.ListSubject;
import net.sourceforge.waters.subject.base.ModelChangeEvent;
import net.sourceforge.waters.subject.base.MutableSubject;
import net.sourceforge.waters.subject.base.ProxySubject;
import net.sourceforge.waters.subject.base.RecursiveUndoInfo;
import net.sourceforge.waters.subject.base.ReplacementUndoInfo;
import net.sourceforge.waters.subject.base.UndoInfo;


/**
 * The subject implementation of the {@link GraphProxy} interface.
 *
 * @author Robi Malik
 */

public final class GraphSubject
  extends MutableSubject
  implements GraphProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new graph.
   * @param deterministic The determinism status of the new graph.
   * @param blockedEvents The list of blocked events of the new graph, or <CODE>null</CODE>.
   * @param nodes The set of nodes of the new graph, or <CODE>null</CODE> if empty.
   * @param edges The collection of edges of the new graph, or <CODE>null</CODE> if empty.
   */
  public GraphSubject(final boolean deterministic,
                      final LabelBlockProxy blockedEvents,
                      final Collection<? extends NodeProxy> nodes,
                      final Collection<? extends EdgeProxy> edges)
  {
    mIsDeterministic = deterministic;
    mBlockedEvents = (LabelBlockSubject) blockedEvents;
    if (mBlockedEvents != null) {
      mBlockedEvents.setParent(this);
    }
    if (nodes == null) {
      mNodes = new NodeSetSubject();
    } else {
      mNodes = new NodeSetSubject(nodes);
    }
    mNodes.setParent(this);
    if (edges == null) {
      mEdges = new ArrayListSubject<EdgeSubject>();
    } else {
      mEdges = new ArrayListSubject<EdgeSubject>
        (edges, EdgeSubject.class);
    }
    mEdges.setParent(this);
  }

  /**
   * Creates a new graph using default values.
   * This constructor creates a graph with
   * the determinism status set to <CODE>true</CODE>,
   * the list of blocked events set to <CODE>null</CODE>,
   * an empty set of nodes, and
   * an empty collection of edges.
   */
  public GraphSubject()
  {
    this(true,
         null,
         null,
         null);
  }


  //#########################################################################
  //# Cloning and Assigning
  @Override
  public GraphSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (GraphSubject) cloner.getClone(this);
  }

  @Override
  public ModelChangeEvent assignMember(final int index,
                                       final Object oldValue,
                                       final Object newValue)
  {
    if (index <= 0) {
      return super.assignMember(index, oldValue, newValue);
    } else {
      switch (index) {
      case 1:
        mIsDeterministic = (Boolean) newValue;
        return ModelChangeEvent.createStateChanged(this);
      case 2:
        if (mBlockedEvents != null) {
          mBlockedEvents.setParent(null);
        }
        mBlockedEvents = (LabelBlockSubject) newValue;
        if (mBlockedEvents != null) {
          mBlockedEvents.setParent(this);
        }
        return ModelChangeEvent.createStateChanged(this);
      default:
        return null;
      }
    }
  }

  @Override
  protected void collectUndoInfo(final ProxySubject newState,
                                 final RecursiveUndoInfo info)
  {
    super.collectUndoInfo(newState, info);
    final GraphSubject downcast = (GraphSubject) newState;
    if (mIsDeterministic != downcast.mIsDeterministic) {
      final UndoInfo step1 =
        new ReplacementUndoInfo(1, mIsDeterministic, downcast.mIsDeterministic);
      info.add(step1);
    }
    final boolean null2a = mBlockedEvents == null;
    final boolean null2b = downcast.mBlockedEvents == null;
    if (null2a != null2b) {
      final LabelBlockSubject clone2 =
        ProxyTools.clone(downcast.mBlockedEvents);
      final UndoInfo step2 =
        new ReplacementUndoInfo(2, mBlockedEvents, clone2);
      info.add(step2);
    } else if (!null2a) {
      final UndoInfo step2 =
        mBlockedEvents.createUndoInfo(downcast.mBlockedEvents);
      if (step2 != null) {
        info.add(step2);
      }
    }
    final UndoInfo step3 = mNodes.createUndoInfo(downcast.mNodes);
    if (step3 != null) {
      info.add(step3);
    }
    final UndoInfo step4 = mEdges.createUndoInfo(downcast.mEdges);
    if (step4 != null) {
      info.add(step4);
    }
  }


  //#########################################################################
  //# Comparing
  public Class<GraphProxy> getProxyInterface()
  {
    return GraphProxy.class;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitGraphProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.GraphProxy
  public boolean isDeterministic()
  {
    return mIsDeterministic;
  }

  public LabelBlockSubject getBlockedEvents()
  {
    return mBlockedEvents;
  }

  public Set<NodeProxy> getNodes()
  {
    final Set<?> precast = mNodes;
    @SuppressWarnings("unchecked")
    final Set<NodeProxy> downcast = (Set<NodeProxy>) precast;
    return Collections.unmodifiableSet(downcast);
  }

  public Collection<EdgeProxy> getEdges()
  {
    final Collection<?> precast = mEdges;
    @SuppressWarnings("unchecked")
    final Collection<EdgeProxy> downcast = (Collection<EdgeProxy>) precast;
    return Collections.unmodifiableCollection(downcast);
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the determinism status of this graph.
   */
  public void setDeterministic(final boolean deterministic)
  {
    if (mIsDeterministic == deterministic) {
      return;
    }
    mIsDeterministic = deterministic;
    fireStateChanged();
  }

  /**
   * Sets the list of blocked events of this graph.
   */
  public void setBlockedEvents(final LabelBlockSubject blockedEvents)
  {
    if (mBlockedEvents == blockedEvents) {
      return;
    }
    if (blockedEvents != null) {
      blockedEvents.setParent(this);
    }
    if (mBlockedEvents != null) {
      mBlockedEvents.setParent(null);
    }
    mBlockedEvents = blockedEvents;
    fireStateChanged();
  }

  /**
   * Gets the modifiable set of nodes of this graph.
   */
  public IndexedSetSubject<NodeSubject> getNodesModifiable()
  {
    return mNodes;
  }

  /**
   * Gets the modifiable collection of edges of this graph.
   */
  public ListSubject<EdgeSubject> getEdgesModifiable()
  {
    return mEdges;
  }


  //#########################################################################
  //# Data Members
  private boolean mIsDeterministic;
  private LabelBlockSubject mBlockedEvents;
  private IndexedSetSubject<NodeSubject> mNodes;
  private ListSubject<EdgeSubject> mEdges;

}

//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   SimpleComponentSubject
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.util.Collections;
import java.util.Map;
import java.util.Set;

import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.GraphProxy;
import net.sourceforge.waters.model.module.IdentifierProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.SimpleComponentProxy;
import net.sourceforge.waters.subject.base.AttributeMapSubject;
import net.sourceforge.waters.subject.base.ModelChangeEvent;
import net.sourceforge.waters.subject.base.ProxySubject;
import net.sourceforge.waters.subject.base.RecursiveUndoInfo;
import net.sourceforge.waters.subject.base.ReplacementUndoInfo;
import net.sourceforge.waters.subject.base.Subject;
import net.sourceforge.waters.subject.base.UndoInfo;

import net.sourceforge.waters.xsd.base.ComponentKind;


/**
 * The subject implementation of the {@link SimpleComponentProxy} interface.
 *
 * @author Robi Malik
 */

public final class SimpleComponentSubject
  extends ComponentSubject
  implements SimpleComponentProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new simple component.
   * @param identifier The identifier defining the name of the new simple component.
   * @param kind The kind of the new simple component.
   * @param graph The graph that defines the automaton of the new simple component.
   * @param attributes The attribute map of the new simple component, or <CODE>null</CODE> if empty.
   */
  public SimpleComponentSubject(final IdentifierProxy identifier,
                                final ComponentKind kind,
                                final GraphProxy graph,
                                final Map<String,String> attributes)
  {
    super(identifier);
    mKind = kind;
    mGraph = (GraphSubject) graph;
    mGraph.setParent(this);
    if (attributes == null) {
      mAttributes = new AttributeMapSubject();
    } else {
      mAttributes = new AttributeMapSubject(attributes);
    }
    mAttributes.setParent(this);
  }

  /**
   * Creates a new simple component using default values.
   * This constructor creates a simple component with
   * an empty attribute map.
   * @param identifier The identifier defining the name of the new simple component.
   * @param kind The kind of the new simple component.
   * @param graph The graph that defines the automaton of the new simple component.
   */
  public SimpleComponentSubject(final IdentifierProxy identifier,
                                final ComponentKind kind,
                                final GraphProxy graph)
  {
    this(identifier,
         kind,
         graph,
         null);
  }


  //#########################################################################
  //# Cloning and Assigning
  @Override
  public SimpleComponentSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (SimpleComponentSubject) cloner.getClone(this);
  }

  @Override
  public ModelChangeEvent assignMember(final int index,
                                       final Object oldValue,
                                       final Object newValue)
  {
    if (index <= 1) {
      return super.assignMember(index, oldValue, newValue);
    } else {
      switch (index) {
      case 2:
        mKind = (ComponentKind) newValue;
        return ModelChangeEvent.createStateChanged(this);
      case 3:
        mGraph.setParent(null);
        mGraph = (GraphSubject) newValue;
        mGraph.setParent(this);
        return ModelChangeEvent.createStateChanged(this);
      default:
        return null;
      }
    }
  }

  @Override
  protected void collectUndoInfo(final ProxySubject newState,
                                 final RecursiveUndoInfo info,
                                 final Set<? extends Subject> boundary)
  {
    super.collectUndoInfo(newState, info, boundary);
    final SimpleComponentSubject downcast = (SimpleComponentSubject) newState;
    if (!mKind.equals(downcast.mKind)) {
      final UndoInfo step2 =
        new ReplacementUndoInfo(2, mKind, downcast.mKind);
      info.add(step2);
    }
    final UndoInfo step3 = mGraph.createUndoInfo(downcast.mGraph, boundary);
    if (step3 != null) {
      info.add(step3);
    }
    final UndoInfo step4 =
      mAttributes.createUndoInfo(downcast.mAttributes, boundary);
    if (step4 != null) {
      info.add(step4);
    }
  }


  //#########################################################################
  //# Comparing
  public Class<SimpleComponentProxy> getProxyInterface()
  {
    return SimpleComponentProxy.class;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitSimpleComponentProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.SimpleComponentProxy
  public ComponentKind getKind()
  {
    return mKind;
  }

  public GraphSubject getGraph()
  {
    return mGraph;
  }

  public Map<String,String> getAttributes()
  {
    final Map<?,?> precast = mAttributes;
    @SuppressWarnings("unchecked")
    final Map<String,String> downcast = (Map<String,String>) precast;
    return Collections.unmodifiableMap(downcast);
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the kind (plant, specification, etc.
   */
  public void setKind(final ComponentKind kind)
  {
    if (mKind.equals(kind)) {
      return;
    }
    mKind = kind;
    fireStateChanged();
  }

  /**
   * Sets the graph that defines the automaton of this simple component.
   */
  public void setGraph(final GraphSubject graph)
  {
    if (mGraph == graph) {
      return;
    }
    graph.setParent(this);
    mGraph.setParent(null);
    mGraph = graph;
    fireStateChanged();
  }

  /**
   * Gets the modifiable attribute map for this simple component.
   */
  public AttributeMapSubject getAttributesModifiable()
  {
    return mAttributes;
  }


  //#########################################################################
  //# Data Members
  private ComponentKind mKind;
  private GraphSubject mGraph;
  private AttributeMapSubject mAttributes;

}

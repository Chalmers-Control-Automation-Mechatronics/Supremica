//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   SimpleComponentSubject
//###########################################################################
//# $Id: SimpleComponentSubject.java,v 1.13 2007-07-03 11:20:53 robi Exp $
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.util.Collection;
import java.util.Collections;
import java.util.List;

import net.sourceforge.waters.model.base.Proxy;
import net.sourceforge.waters.model.base.ProxyTools;
import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.GraphProxy;
import net.sourceforge.waters.model.module.IdentifierProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.SimpleComponentProxy;
import net.sourceforge.waters.model.module.VariableProxy;
import net.sourceforge.waters.model.unchecked.Casting;
import net.sourceforge.waters.subject.base.ArrayListSubject;
import net.sourceforge.waters.subject.base.ListSubject;
import net.sourceforge.waters.subject.base.ProxySubject;

import net.sourceforge.waters.xsd.base.ComponentKind;


/**
 * The subject implementation of the {@link SimpleComponentProxy} interface.
 *
 * @author Robi Malik
 */

public final class SimpleComponentSubject
  extends ComponentSubject
  implements SimpleComponentProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new simple component.
   * @param identifier The identifier defining the name of the new simple component.
   * @param kind The kind of the new simple component.
   * @param graph The graph of the new simple component.
   * @param variables The variables of the new simple component, or <CODE>null</CODE> if empty.
   */
  public SimpleComponentSubject(final IdentifierProxy identifier,
                                final ComponentKind kind,
                                final GraphProxy graph,
                                final Collection<? extends VariableProxy> variables)
  {
    super(identifier);
    mKind = kind;
    mGraph = (GraphSubject) graph;
    mGraph.setParent(this);
    if (variables == null) {
      mVariables = new ArrayListSubject<VariableSubject>();
    } else {
      mVariables = new ArrayListSubject<VariableSubject>
        (variables, VariableSubject.class);
    }
    mVariables.setParent(this);
  }

  /**
   * Creates a new simple component using default values.
   * This constructor creates a simple component with
   * an empty variables.
   * @param identifier The identifier defining the name of the new simple component.
   * @param kind The kind of the new simple component.
   * @param graph The graph of the new simple component.
   */
  public SimpleComponentSubject(final IdentifierProxy identifier,
                                final ComponentKind kind,
                                final GraphProxy graph)
  {
    this(identifier,
         kind,
         graph,
         null);
  }


  //#########################################################################
  //# Cloning and Assigning
  public SimpleComponentSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (SimpleComponentSubject) cloner.getClone(this);
  }

  public boolean assignFrom(final ProxySubject partner)
  {
    if (this != partner) {
      final SimpleComponentSubject downcast =
        (SimpleComponentSubject) partner;
      boolean change = super.assignFrom(partner);
      final ComponentKind kind = downcast.getKind();
      if (mKind != kind) {
        mKind = kind;
        change = true;
      }
      final GraphSubject graph = downcast.getGraph();
      mGraph.assignFrom(graph);
      final ListSubject<VariableSubject> variables =
        downcast.getVariablesModifiable();
      mVariables.assignFrom(variables);
      if (change) {
        fireStateChanged();
      }
    }
    return false;
  }


  //#########################################################################
  //# Equality and Hashcode
  public Class<SimpleComponentProxy> getProxyInterface()
  {
    return SimpleComponentProxy.class;
  }

  public boolean equalsByContents(final Proxy partner)
  {
    if (super.equalsByContents(partner)) {
      final SimpleComponentProxy downcast = (SimpleComponentProxy) partner;
      return
        mKind.equals(downcast.getKind()) &&
        mGraph.equalsByContents(downcast.getGraph()) &&
        ProxyTools.isEqualListByContents
          (mVariables, downcast.getVariables());
    } else {
      return false;
    }
  }

  public boolean equalsWithGeometry(final Proxy partner)
  {
    if (super.equalsWithGeometry(partner)) {
      final SimpleComponentProxy downcast = (SimpleComponentProxy) partner;
      return
        mKind.equals(downcast.getKind()) &&
        mGraph.equalsWithGeometry(downcast.getGraph()) &&
        ProxyTools.isEqualListWithGeometry
          (mVariables, downcast.getVariables());
    } else {
      return false;
    }
  }

  public int hashCodeByContents()
  {
    int result = super.hashCodeByContents();
    result *= 5;
    result += mKind.hashCode();
    result *= 5;
    result += mGraph.hashCodeByContents();
    result *= 5;
    result += ProxyTools.getListHashCodeByContents(mVariables);
    return result;
  }

  public int hashCodeWithGeometry()
  {
    int result = super.hashCodeWithGeometry();
    result *= 5;
    result += mKind.hashCode();
    result *= 5;
    result += mGraph.hashCodeWithGeometry();
    result *= 5;
    result += ProxyTools.getListHashCodeWithGeometry(mVariables);
    return result;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitSimpleComponentProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.SimpleComponentProxy
  public ComponentKind getKind()
  {
    return mKind;
  }

  public GraphSubject getGraph()
  {
    return mGraph;
  }

  public List<VariableProxy> getVariables()
  {
    final List<VariableProxy> downcast = Casting.toList(mVariables);
    return Collections.unmodifiableList(downcast);
  }


  //#########################################################################
  //# Setters
  public void setKind(final ComponentKind kind)
  {
    if (mKind.equals(kind)) {
      return;
    }
    mKind = kind;
    fireStateChanged();
  }

  public void setGraph(final GraphSubject graph)
  {
    if (mGraph == graph) {
      return;
    }
    graph.setParent(this);
    mGraph.setParent(null);
    mGraph = graph;
    fireStateChanged();
  }

  public ListSubject<VariableSubject> getVariablesModifiable()
  {
    return mVariables;
  }


  //#########################################################################
  //# Data Members
  private ComponentKind mKind;
  private GraphSubject mGraph;
  private ListSubject<VariableSubject> mVariables;

}

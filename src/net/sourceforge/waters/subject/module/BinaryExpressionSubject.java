//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   BinaryExpressionSubject
//###########################################################################
//# $Id: BinaryExpressionSubject.java,v 1.9 2007-03-02 05:21:14 robi Exp $
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import net.sourceforge.waters.model.base.Proxy;
import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.expr.BinaryOperator;
import net.sourceforge.waters.model.module.BinaryExpressionProxy;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.SimpleExpressionProxy;
import net.sourceforge.waters.subject.base.ProxySubject;


/**
 * The subject implementation of the {@link BinaryExpressionProxy} interface.
 *
 * @author Robi Malik
 */

public final class BinaryExpressionSubject
  extends SimpleExpressionSubject
  implements BinaryExpressionProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new binary expression.
   * @param plainText The original text of the new binary expression, or <CODE>null</CODE>.
   * @param operator The operator of the new binary expression.
   * @param left The left subterm of the new binary expression.
   * @param right The right subterm of the new binary expression.
   */
  public BinaryExpressionSubject(final String plainText,
                                 final BinaryOperator operator,
                                 final SimpleExpressionProxy left,
                                 final SimpleExpressionProxy right)
  {
    super(plainText);
    mOperator = operator;
    mLeft = (SimpleExpressionSubject) left;
    mLeft.setParent(this);
    mRight = (SimpleExpressionSubject) right;
    mRight.setParent(this);
  }

  /**
   * Creates a new binary expression using default values.
   * This constructor creates a binary expression with
   * the original text set to <CODE>null</CODE>.
   * @param operator The operator of the new binary expression.
   * @param left The left subterm of the new binary expression.
   * @param right The right subterm of the new binary expression.
   */
  public BinaryExpressionSubject(final BinaryOperator operator,
                                 final SimpleExpressionProxy left,
                                 final SimpleExpressionProxy right)
  {
    this(null,
         operator,
         left,
         right);
  }


  //#########################################################################
  //# Cloning and Assigning
  public BinaryExpressionSubject clone()
  {
    final BinaryExpressionSubject cloned = (BinaryExpressionSubject) super.clone();
    cloned.mLeft = mLeft.clone();
    cloned.mLeft.setParent(cloned);
    cloned.mRight = mRight.clone();
    cloned.mRight.setParent(cloned);
    return cloned;
  }

  public boolean assignFrom(final ProxySubject partner)
  {
    if (this != partner) {
      final BinaryExpressionSubject downcast = (BinaryExpressionSubject) partner;
      boolean change = super.assignFrom(partner);
      final BinaryOperator operator = downcast.getOperator();
      if (mOperator != operator) {
        mOperator = operator;
        change = true;
      }
      final SimpleExpressionSubject left = downcast.getLeft();
      mLeft.assignFrom(left);
      final SimpleExpressionSubject right = downcast.getRight();
      mRight.assignFrom(right);
      if (change) {
        fireStateChanged();
      }
    }
    return false;
  }


  //#########################################################################
  //# Equality and Hashcode
  public boolean equalsByContents(final Proxy partner)
  {
    if (super.equalsByContents(partner)) {
      final BinaryExpressionSubject downcast = (BinaryExpressionSubject) partner;
      return
        mOperator.equals(downcast.mOperator) &&
        mLeft.equalsByContents(downcast.mLeft) &&
        mRight.equalsByContents(downcast.mRight);
    } else {
      return false;
    }
  }

  public boolean equalsWithGeometry(final Proxy partner)
  {
    if (super.equalsWithGeometry(partner)) {
      final BinaryExpressionSubject downcast = (BinaryExpressionSubject) partner;
      return
        mOperator.equals(downcast.mOperator) &&
        mLeft.equalsWithGeometry(downcast.mLeft) &&
        mRight.equalsWithGeometry(downcast.mRight);
    } else {
      return false;
    }
  }

  public int hashCodeByContents()
  {
    int result = super.hashCodeByContents();
    result *= 5;
    result += mOperator.hashCode();
    result *= 5;
    result += mLeft.hashCodeByContents();
    result *= 5;
    result += mRight.hashCodeByContents();
    return result;
  }

  public int hashCodeWithGeometry()
  {
    int result = super.hashCodeWithGeometry();
    result *= 5;
    result += mOperator.hashCode();
    result *= 5;
    result += mLeft.hashCodeWithGeometry();
    result *= 5;
    result += mRight.hashCodeWithGeometry();
    return result;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitBinaryExpressionProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.BinaryExpressionProxy
  public BinaryOperator getOperator()
  {
    return mOperator;
  }

  public SimpleExpressionSubject getLeft()
  {
    return mLeft;
  }

  public SimpleExpressionSubject getRight()
  {
    return mRight;
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the operator of this expression.
   */
  public void setOperator(final BinaryOperator operator)
  {
    if (mOperator.equals(operator)) {
      return;
    }
    mOperator = operator;
    fireStateChanged();
  }

  /**
   * Sets the left subterm of this expression.
   */
  public void setLeft(final SimpleExpressionSubject left)
  {
    if (mLeft == left) {
      return;
    }
    left.setParent(this);
    mLeft.setParent(null);
    mLeft = left;
    fireStateChanged();
  }

  /**
   * Sets the right subterm of this expression.
   */
  public void setRight(final SimpleExpressionSubject right)
  {
    if (mRight == right) {
      return;
    }
    right.setParent(this);
    mRight.setParent(null);
    mRight = right;
    fireStateChanged();
  }


  //#########################################################################
  //# Data Members
  private BinaryOperator mOperator;
  private SimpleExpressionSubject mLeft;
  private SimpleExpressionSubject mRight;

}

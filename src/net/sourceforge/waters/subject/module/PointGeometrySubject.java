//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   PointGeometrySubject
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.awt.geom.Point2D;
import java.util.Set;

import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.PointGeometryProxy;
import net.sourceforge.waters.subject.base.GeometrySubject;
import net.sourceforge.waters.subject.base.ModelChangeEvent;
import net.sourceforge.waters.subject.base.ProxySubject;
import net.sourceforge.waters.subject.base.RecursiveUndoInfo;
import net.sourceforge.waters.subject.base.ReplacementUndoInfo;
import net.sourceforge.waters.subject.base.Subject;
import net.sourceforge.waters.subject.base.UndoInfo;


/**
 * The subject implementation of the {@link PointGeometryProxy} interface.
 *
 * @author Robi Malik
 */

public final class PointGeometrySubject
  extends GeometrySubject
  implements PointGeometryProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new point geometry.
   * @param point The point of the new point geometry.
   */
  public PointGeometrySubject(final Point2D point)
  {
    mPoint = (Point2D) point.clone();
  }


  //#########################################################################
  //# Cloning and Assigning
  @Override
  public PointGeometrySubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (PointGeometrySubject) cloner.getClone(this);
  }

  @Override
  public ModelChangeEvent assignMember(final int index,
                                       final Object oldValue,
                                       final Object newValue)
  {
    if (index <= 0) {
      return super.assignMember(index, oldValue, newValue);
    } else {
      switch (index) {
      case 1:
        mPoint = (Point2D) newValue;
        return ModelChangeEvent.createGeometryChanged(this, newValue);
      default:
        return null;
      }
    }
  }

  @Override
  protected void collectUndoInfo(final ProxySubject newState,
                                 final RecursiveUndoInfo info,
                                 final Set<? extends Subject> boundary)
  {
    super.collectUndoInfo(newState, info, boundary);
    final PointGeometrySubject downcast = (PointGeometrySubject) newState;
    if (!mPoint.equals(downcast.mPoint)) {
      final UndoInfo step1 =
        new ReplacementUndoInfo(1, mPoint, downcast.mPoint);
      info.add(step1);
    }
  }


  //#########################################################################
  //# Comparing
  public Class<PointGeometryProxy> getProxyInterface()
  {
    return PointGeometryProxy.class;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitPointGeometryProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.PointGeometryProxy
  public Point2D getPoint()
  {
    return (Point2D) mPoint.clone();
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the point identifying this PointGeometry.
   */
  public void setPoint(final Point2D point)
  {
    if (mPoint.equals(point)) {
      return;
    }
    mPoint = (Point2D) point.clone();
    fireGeometryChanged();
  }


  //#########################################################################
  //# Data Members
  private Point2D mPoint;

}

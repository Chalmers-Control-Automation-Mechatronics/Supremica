//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   PointGeometrySubject
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.awt.geom.Point2D;

import net.sourceforge.waters.model.base.Proxy;
import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.PointGeometryProxy;
import net.sourceforge.waters.subject.base.GeometrySubject;
import net.sourceforge.waters.subject.base.ProxySubject;


/**
 * The subject implementation of the {@link PointGeometryProxy} interface.
 *
 * @author Robi Malik
 */

public final class PointGeometrySubject
  extends GeometrySubject
  implements PointGeometryProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new point geometry.
   * @param point The point of the new point geometry.
   */
  public PointGeometrySubject(final Point2D point)
  {
    mPoint = (Point2D) point.clone();
  }


  //#########################################################################
  //# Cloning and Assigning
  public PointGeometrySubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (PointGeometrySubject) cloner.getClone(this);
  }

  public boolean assignFrom(final ProxySubject partner)
  {
    if (this != partner) {
      final PointGeometrySubject downcast = (PointGeometrySubject) partner;
      boolean change = super.assignFrom(partner);
      final Point2D point = downcast.getPoint();
      if (!mPoint.equals(point)) {
        mPoint = (Point2D) point.clone();
        change = true;
      }
      if (change) {
        fireStateChanged();
      }
    }
    return false;
  }


  //#########################################################################
  //# Equality and Hashcode
  public Class<PointGeometryProxy> getProxyInterface()
  {
    return PointGeometryProxy.class;
  }

  public boolean equalsByContents(final Proxy partner)
  {
    if (super.equalsByContents(partner)) {
      final PointGeometryProxy downcast = (PointGeometryProxy) partner;
      return
        mPoint.equals(downcast.getPoint());
    } else {
      return false;
    }
  }

  public int hashCodeByContents()
  {
    int result = super.hashCodeByContents();
    result *= 5;
    result += mPoint.hashCode();
    return result;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitPointGeometryProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.PointGeometryProxy
  public Point2D getPoint()
  {
    return (Point2D) mPoint.clone();
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the point identifying this PointGeometry.
   */
  public void setPoint(final Point2D point)
  {
    if (mPoint.equals(point)) {
      return;
    }
    mPoint = (Point2D) point.clone();
    fireGeometryChanged();
  }


  //#########################################################################
  //# Data Members
  private Point2D mPoint;

}

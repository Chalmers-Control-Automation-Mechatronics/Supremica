//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.subject.module
//# CLASS:   SimpleNodeSubject
//###########################################################################
//# $Id: SimpleNodeSubject.java,v 1.15 2007-12-04 03:22:58 robi Exp $
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.util.Collections;
import java.util.Set;

import net.sourceforge.waters.model.base.Proxy;
import net.sourceforge.waters.model.base.ProxyTools;
import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.LabelGeometryProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.NodeProxy;
import net.sourceforge.waters.model.module.PlainEventListProxy;
import net.sourceforge.waters.model.module.PointGeometryProxy;
import net.sourceforge.waters.model.module.SimpleNodeProxy;
import net.sourceforge.waters.subject.base.ProxySubject;


/**
 * The subject implementation of the {@link SimpleNodeProxy} interface.
 *
 * @author Robi Malik
 */

public final class SimpleNodeSubject
  extends NodeSubject
  implements SimpleNodeProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new simple node.
   * @param name The name of the new simple node.
   * @param propositions The list of propositions of the new simple node, or <CODE>null</CODE> if empty.
   * @param initial The initial status of the new simple node.
   * @param pointGeometry The geometric position of the new simple node, or <CODE>null</CODE>.
   * @param initialArrowGeometry The position of the initial state arrow of the new simple node, or <CODE>null</CODE>.
   * @param labelGeometry The geometric position of the label of the new simple node, or <CODE>null</CODE>.
   */
  public SimpleNodeSubject(final String name,
                           final PlainEventListProxy propositions,
                           final boolean initial,
                           final PointGeometryProxy pointGeometry,
                           final PointGeometryProxy initialArrowGeometry,
                           final LabelGeometryProxy labelGeometry)
  {
    super(name, propositions);
    mIsInitial = initial;
    mPointGeometry = (PointGeometrySubject) pointGeometry;
    if (mPointGeometry != null) {
      mPointGeometry.setParent(this);
    }
    mInitialArrowGeometry = (PointGeometrySubject) initialArrowGeometry;
    if (mInitialArrowGeometry != null) {
      mInitialArrowGeometry.setParent(this);
    }
    mLabelGeometry = (LabelGeometrySubject) labelGeometry;
    if (mLabelGeometry != null) {
      mLabelGeometry.setParent(this);
    }
  }

  /**
   * Creates a new simple node using default values.
   * This constructor creates a simple node with
   * an empty list of propositions,
   * the initial status set to <CODE>false</CODE>,
   * the geometric position set to <CODE>null</CODE>,
   * the position of the initial state arrow set to <CODE>null</CODE>, and
   * the geometric position of the label set to <CODE>null</CODE>.
   * @param name The name of the new simple node.
   */
  public SimpleNodeSubject(final String name)
  {
    this(name,
         null,
         false,
         null,
         null,
         null);
  }


  //#########################################################################
  //# Cloning and Assigning
  public SimpleNodeSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (SimpleNodeSubject) cloner.getClone(this);
  }

  public boolean assignFrom(final ProxySubject partner)
  {
    if (this != partner) {
      final SimpleNodeSubject downcast = (SimpleNodeSubject) partner;
      boolean change = super.assignFrom(partner);
      final boolean initial = downcast.isInitial();
      if (mIsInitial != initial) {
        mIsInitial = initial;
        change = true;
      }
      final PointGeometrySubject pointGeometry = downcast.getPointGeometry();
      if (mPointGeometry == pointGeometry) {
        // nothing
      } else if (mPointGeometry == null) {
        mPointGeometry = pointGeometry.clone();
        mPointGeometry.setParent(this);
        fireGeometryChanged(mPointGeometry);
      } else if (pointGeometry == null) {
        mPointGeometry.setParent(null);
        mPointGeometry = null;
        fireGeometryChanged(null);
      } else {
        mPointGeometry.assignFrom(pointGeometry);
      }
      final PointGeometrySubject initialArrowGeometry =
        downcast.getInitialArrowGeometry();
      if (mInitialArrowGeometry == initialArrowGeometry) {
        // nothing
      } else if (mInitialArrowGeometry == null) {
        mInitialArrowGeometry = initialArrowGeometry.clone();
        mInitialArrowGeometry.setParent(this);
        fireGeometryChanged(mInitialArrowGeometry);
      } else if (initialArrowGeometry == null) {
        mInitialArrowGeometry.setParent(null);
        mInitialArrowGeometry = null;
        fireGeometryChanged(null);
      } else {
        mInitialArrowGeometry.assignFrom(initialArrowGeometry);
      }
      final LabelGeometrySubject labelGeometry = downcast.getLabelGeometry();
      if (mLabelGeometry == labelGeometry) {
        // nothing
      } else if (mLabelGeometry == null) {
        mLabelGeometry = labelGeometry.clone();
        mLabelGeometry.setParent(this);
        fireGeometryChanged(mLabelGeometry);
      } else if (labelGeometry == null) {
        mLabelGeometry.setParent(null);
        mLabelGeometry = null;
        fireGeometryChanged(null);
      } else {
        mLabelGeometry.assignFrom(labelGeometry);
      }
      if (change) {
        fireStateChanged();
      }
    }
    return false;
  }


  //#########################################################################
  //# Equality and Hashcode
  public Class<SimpleNodeProxy> getProxyInterface()
  {
    return SimpleNodeProxy.class;
  }

  public boolean equalsByContents(final Proxy partner)
  {
    if (super.equalsByContents(partner)) {
      final SimpleNodeProxy downcast = (SimpleNodeProxy) partner;
      return
        (mIsInitial == downcast.isInitial());
    } else {
      return false;
    }
  }

  public boolean equalsWithGeometry(final Proxy partner)
  {
    if (super.equalsByContents(partner)) {
      final SimpleNodeProxy downcast = (SimpleNodeProxy) partner;
      return
        (mIsInitial == downcast.isInitial()) &&
        ProxyTools.equalsWithGeometry(mPointGeometry, downcast.getPointGeometry()) &&
        ProxyTools.equalsWithGeometry(mInitialArrowGeometry, downcast.getInitialArrowGeometry()) &&
        ProxyTools.equalsWithGeometry(mLabelGeometry, downcast.getLabelGeometry());
    } else {
      return false;
    }
  }

  public int hashCodeByContents()
  {
    int result = super.hashCodeByContents();
    result *= 5;
    if (mIsInitial) {
      result++;
    }
    return result;
  }

  public int hashCodeWithGeometry()
  {
    int result = super.hashCodeByContents();
    result *= 5;
    if (mIsInitial) {
      result++;
    }
    result *= 5;
    result += ProxyTools.hashCodeWithGeometry(mPointGeometry);
    result *= 5;
    result += ProxyTools.hashCodeWithGeometry(mInitialArrowGeometry);
    result *= 5;
    result += ProxyTools.hashCodeWithGeometry(mLabelGeometry);
    return result;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitSimpleNodeProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.SimpleNodeProxy
  public boolean isInitial()
  {
    return mIsInitial;
  }

  public PointGeometrySubject getPointGeometry()
  {
    return mPointGeometry;
  }

  public PointGeometrySubject getInitialArrowGeometry()
  {
    return mInitialArrowGeometry;
  }

  public LabelGeometrySubject getLabelGeometry()
  {
    return mLabelGeometry;
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the initial status of this node.
   */
  public void setInitial(final boolean initial)
  {
    if (mIsInitial == initial) {
      return;
    }
    mIsInitial = initial;
    fireStateChanged();
  }

  /**
   * Sets the geometric position of this node.
   */
  public void setPointGeometry(final PointGeometrySubject pointGeometry)
  {
    if (mPointGeometry == pointGeometry) {
      return;
    }
    if (pointGeometry != null) {
      pointGeometry.setParent(this);
    }
    if (mPointGeometry != null) {
      mPointGeometry.setParent(null);
    }
    mPointGeometry = pointGeometry;
    fireGeometryChanged(mPointGeometry);
  }

  /**
   * Sets the position of the initial state arrow of this node.
   */
  public void setInitialArrowGeometry(final PointGeometrySubject initialArrowGeometry)
  {
    if (mInitialArrowGeometry == initialArrowGeometry) {
      return;
    }
    if (initialArrowGeometry != null) {
      initialArrowGeometry.setParent(this);
    }
    if (mInitialArrowGeometry != null) {
      mInitialArrowGeometry.setParent(null);
    }
    mInitialArrowGeometry = initialArrowGeometry;
    fireGeometryChanged(mInitialArrowGeometry);
  }

  /**
   * Sets the geometric position of the label of this node.
   */
  public void setLabelGeometry(final LabelGeometrySubject labelGeometry)
  {
    if (mLabelGeometry == labelGeometry) {
      return;
    }
    if (labelGeometry != null) {
      labelGeometry.setParent(this);
    }
    if (mLabelGeometry != null) {
      mLabelGeometry.setParent(null);
    }
    mLabelGeometry = labelGeometry;
    fireGeometryChanged(mLabelGeometry);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.NodeProxy
  public Set<NodeProxy> getImmediateChildNodes()
  {
    return Collections.emptySet();
  }


  //#########################################################################
  //# Data Members
  private boolean mIsInitial;
  private PointGeometrySubject mPointGeometry;
  private PointGeometrySubject mInitialArrowGeometry;
  private LabelGeometrySubject mLabelGeometry;

}

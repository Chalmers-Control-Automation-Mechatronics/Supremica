//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################
//# Copyright (C) 2004-2018 Robi Malik
//###########################################################################
//# This file is part of Waters.
//# Waters is free software: you can redistribute it and/or modify it under
//# the terms of the GNU General Public License as published by the Free
//# Software Foundation, either version 2 of the License, or (at your option)
//# any later version.
//# Waters is distributed in the hope that it will be useful, but WITHOUT ANY
//# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
//# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
//# details.
//# You should have received a copy of the GNU General Public License along
//# with Waters. If not, see <http://www.gnu.org/licenses/>.
//#
//# Linking Waters statically or dynamically with other modules is making a
//# combined work based on Waters. Thus, the terms and conditions of the GNU
//# General Public License cover the whole combination.
//# In addition, as a special exception, the copyright holders of Waters give
//# you permission to combine Waters with code included in the standard
//# release of Supremica under the Supremica Software License Agreement (or
//# modified versions of such code, with unchanged license). You may copy and
//# distribute such a system following the terms of the GNU GPL for Waters and
//# the licenses of the other code concerned.
//# Note that people who make modified versions of Waters are not obligated to
//# grant this special exception for their modified versions; it is their
//# choice whether to do so. The GNU General Public License gives permission
//# to release a modified version without this exception; this exception also
//# makes it possible to release a modified version which carries forward this
//# exception.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.util.Collections;
import java.util.Map;
import java.util.Set;

import net.sourceforge.waters.model.base.ProxyTools;
import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.LabelGeometryProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.NodeProxy;
import net.sourceforge.waters.model.module.PlainEventListProxy;
import net.sourceforge.waters.model.module.PointGeometryProxy;
import net.sourceforge.waters.model.module.SimpleNodeProxy;
import net.sourceforge.waters.subject.base.ModelChangeEvent;
import net.sourceforge.waters.subject.base.ProxySubject;
import net.sourceforge.waters.subject.base.RecursiveUndoInfo;
import net.sourceforge.waters.subject.base.ReplacementUndoInfo;
import net.sourceforge.waters.subject.base.Subject;
import net.sourceforge.waters.subject.base.UndoInfo;


/**
 * The subject implementation of the {@link SimpleNodeProxy} interface.
 *
 * @author Robi Malik
 */

public final class SimpleNodeSubject
  extends NodeSubject
  implements SimpleNodeProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new simple node.
   * @param name The name of the new simple node.
   * @param propositions The list of propositions of the new simple node, or <CODE>null</CODE> if empty.
   * @param attributes The attribute map of the new simple node, or <CODE>null</CODE> if empty.
   * @param initial The initial status of the new simple node.
   * @param pointGeometry The geometric position of the new simple node, or <CODE>null</CODE>.
   * @param initialArrowGeometry The position of the initial state arrow of the new simple node, or <CODE>null</CODE>.
   * @param labelGeometry The geometric position of the label of the new simple node, or <CODE>null</CODE>.
   */
  public SimpleNodeSubject(final String name,
                           final PlainEventListProxy propositions,
                           final Map<String,String> attributes,
                           final boolean initial,
                           final PointGeometryProxy pointGeometry,
                           final PointGeometryProxy initialArrowGeometry,
                           final LabelGeometryProxy labelGeometry)
  {
    super(name, propositions, attributes);
    mIsInitial = initial;
    mPointGeometry = (PointGeometrySubject) pointGeometry;
    if (mPointGeometry != null) {
      mPointGeometry.setParent(this);
    }
    mInitialArrowGeometry = (PointGeometrySubject) initialArrowGeometry;
    if (mInitialArrowGeometry != null) {
      mInitialArrowGeometry.setParent(this);
    }
    mLabelGeometry = (LabelGeometrySubject) labelGeometry;
    if (mLabelGeometry != null) {
      mLabelGeometry.setParent(this);
    }
  }

  /**
   * Creates a new simple node using default values.
   * This constructor creates a simple node with
   * an empty list of propositions,
   * an empty attribute map,
   * the initial status set to <CODE>false</CODE>,
   * the geometric position set to <CODE>null</CODE>,
   * the position of the initial state arrow set to <CODE>null</CODE>, and
   * the geometric position of the label set to <CODE>null</CODE>.
   * @param name The name of the new simple node.
   */
  public SimpleNodeSubject(final String name)
  {
    this(name,
         null,
         null,
         false,
         null,
         null,
         null);
  }


  //#########################################################################
  //# Cloning and Assigning
  @Override
  public SimpleNodeSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (SimpleNodeSubject) cloner.getClone(this);
  }

  @Override
  public ModelChangeEvent assignMember(final int index,
                                       final Object oldValue,
                                       final Object newValue)
  {
    if (index <= 3) {
      return super.assignMember(index, oldValue, newValue);
    } else {
      switch (index) {
      case 4:
        mIsInitial = (Boolean) newValue;
        return ModelChangeEvent.createStateChanged(this);
      case 5:
        if (mPointGeometry != null) {
          mPointGeometry.setParent(null);
        }
        mPointGeometry = (PointGeometrySubject) newValue;
        if (mPointGeometry != null) {
          mPointGeometry.setParent(this);
        }
        return ModelChangeEvent.createGeometryChanged(this, newValue);
      case 6:
        if (mInitialArrowGeometry != null) {
          mInitialArrowGeometry.setParent(null);
        }
        mInitialArrowGeometry = (PointGeometrySubject) newValue;
        if (mInitialArrowGeometry != null) {
          mInitialArrowGeometry.setParent(this);
        }
        return ModelChangeEvent.createGeometryChanged(this, newValue);
      case 7:
        if (mLabelGeometry != null) {
          mLabelGeometry.setParent(null);
        }
        mLabelGeometry = (LabelGeometrySubject) newValue;
        if (mLabelGeometry != null) {
          mLabelGeometry.setParent(this);
        }
        return ModelChangeEvent.createGeometryChanged(this, newValue);
      default:
        return null;
      }
    }
  }

  @Override
  protected void collectUndoInfo(final ProxySubject newState,
                                 final RecursiveUndoInfo info,
                                 final Set<? extends Subject> boundary)
  {
    super.collectUndoInfo(newState, info, boundary);
    final SimpleNodeSubject downcast = (SimpleNodeSubject) newState;
    if (mIsInitial != downcast.mIsInitial) {
      final UndoInfo step4 =
        new ReplacementUndoInfo(4, mIsInitial, downcast.mIsInitial);
      info.add(step4);
    }
    final boolean null5a = mPointGeometry == null;
    final boolean null5b = downcast.mPointGeometry == null;
    if (null5a != null5b) {
      if (boundary ==  null || !boundary.contains(mPointGeometry)) {
        final PointGeometrySubject clone5 =
          ProxyTools.clone(downcast.mPointGeometry);
        final UndoInfo step5 =
          new ReplacementUndoInfo(5, mPointGeometry, clone5);
        info.add(step5);
      }
    } else if (!null5a) {
      final UndoInfo step5 =
        mPointGeometry.createUndoInfo(downcast.mPointGeometry, boundary);
      if (step5 != null) {
        info.add(step5);
      }
    }
    final boolean null6a = mInitialArrowGeometry == null;
    final boolean null6b = downcast.mInitialArrowGeometry == null;
    if (null6a != null6b) {
      if (boundary ==  null || !boundary.contains(mInitialArrowGeometry)) {
        final PointGeometrySubject clone6 =
          ProxyTools.clone(downcast.mInitialArrowGeometry);
        final UndoInfo step6 =
          new ReplacementUndoInfo(6, mInitialArrowGeometry, clone6);
        info.add(step6);
      }
    } else if (!null6a) {
      final UndoInfo step6 =
        mInitialArrowGeometry.createUndoInfo(downcast.mInitialArrowGeometry, boundary);
      if (step6 != null) {
        info.add(step6);
      }
    }
    final boolean null7a = mLabelGeometry == null;
    final boolean null7b = downcast.mLabelGeometry == null;
    if (null7a != null7b) {
      if (boundary ==  null || !boundary.contains(mLabelGeometry)) {
        final LabelGeometrySubject clone7 =
          ProxyTools.clone(downcast.mLabelGeometry);
        final UndoInfo step7 =
          new ReplacementUndoInfo(7, mLabelGeometry, clone7);
        info.add(step7);
      }
    } else if (!null7a) {
      final UndoInfo step7 =
        mLabelGeometry.createUndoInfo(downcast.mLabelGeometry, boundary);
      if (step7 != null) {
        info.add(step7);
      }
    }
  }


  //#########################################################################
  //# Comparing
  public Class<SimpleNodeProxy> getProxyInterface()
  {
    return SimpleNodeProxy.class;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitSimpleNodeProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.SimpleNodeProxy
  public boolean isInitial()
  {
    return mIsInitial;
  }

  public PointGeometrySubject getPointGeometry()
  {
    return mPointGeometry;
  }

  public PointGeometrySubject getInitialArrowGeometry()
  {
    return mInitialArrowGeometry;
  }

  public LabelGeometrySubject getLabelGeometry()
  {
    return mLabelGeometry;
  }


  //#########################################################################
  //# Setters
  /**
   * Sets the initial status of this node.
   */
  public void setInitial(final boolean initial)
  {
    if (mIsInitial == initial) {
      return;
    }
    mIsInitial = initial;
    fireStateChanged();
  }

  /**
   * Sets the geometric position of this node.
   */
  public void setPointGeometry(final PointGeometrySubject pointGeometry)
  {
    if (mPointGeometry == pointGeometry) {
      return;
    }
    if (pointGeometry != null) {
      pointGeometry.setParent(this);
    }
    if (mPointGeometry != null) {
      mPointGeometry.setParent(null);
    }
    mPointGeometry = pointGeometry;
    fireGeometryChanged(mPointGeometry);
  }

  /**
   * Sets the position of the initial state arrow of this node.
   */
  public void setInitialArrowGeometry(final PointGeometrySubject initialArrowGeometry)
  {
    if (mInitialArrowGeometry == initialArrowGeometry) {
      return;
    }
    if (initialArrowGeometry != null) {
      initialArrowGeometry.setParent(this);
    }
    if (mInitialArrowGeometry != null) {
      mInitialArrowGeometry.setParent(null);
    }
    mInitialArrowGeometry = initialArrowGeometry;
    fireGeometryChanged(mInitialArrowGeometry);
  }

  /**
   * Sets the geometric position of the label of this node.
   */
  public void setLabelGeometry(final LabelGeometrySubject labelGeometry)
  {
    if (mLabelGeometry == labelGeometry) {
      return;
    }
    if (labelGeometry != null) {
      labelGeometry.setParent(this);
    }
    if (mLabelGeometry != null) {
      mLabelGeometry.setParent(null);
    }
    mLabelGeometry = labelGeometry;
    fireGeometryChanged(mLabelGeometry);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.NodeProxy
  public Set<NodeProxy> getImmediateChildNodes()
  {
    return Collections.emptySet();
  }


  //#########################################################################
  //# Data Members
  private boolean mIsInitial;
  private PointGeometrySubject mPointGeometry;
  private PointGeometrySubject mInitialArrowGeometry;
  private LabelGeometrySubject mLabelGeometry;

}

//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################
//# Copyright (C) 2004-2023 Robi Malik
//###########################################################################
//# This file is part of Waters.
//# Waters is free software: you can redistribute it and/or modify it under
//# the terms of the GNU General Public License as published by the Free
//# Software Foundation, either version 2 of the License, or (at your option)
//# any later version.
//# Waters is distributed in the hope that it will be useful, but WITHOUT ANY
//# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
//# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
//# details.
//# You should have received a copy of the GNU General Public License along
//# with Waters. If not, see <http://www.gnu.org/licenses/>.
//#
//# Linking Waters statically or dynamically with other modules is making a
//# combined work based on Waters. Thus, the terms and conditions of the GNU
//# General Public License cover the whole combination.
//# In addition, as a special exception, the copyright holders of Waters give
//# you permission to combine Waters with code included in the standard
//# release of Supremica under the Supremica Software License Agreement (or
//# modified versions of such code, with unchanged license). You may copy and
//# distribute such a system following the terms of the GNU GPL for Waters and
//# the licenses of the other code concerned.
//# Note that people who make modified versions of Waters are not obligated to
//# grant this special exception for their modified versions; it is their
//# choice whether to do so. The GNU General Public License gives permission
//# to release a modified version without this exception; this exception also
//# makes it possible to release a modified version which carries forward this
//# exception.
//###########################################################################

package net.sourceforge.waters.subject.module;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Set;

import net.sourceforge.waters.model.base.Proxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.NestedBlockProxy;
import net.sourceforge.waters.subject.base.AbstractSubject;
import net.sourceforge.waters.subject.base.ArrayListSubject;
import net.sourceforge.waters.subject.base.ListSubject;
import net.sourceforge.waters.subject.base.MutableSubject;
import net.sourceforge.waters.subject.base.ProxySubject;
import net.sourceforge.waters.subject.base.RecursiveUndoInfo;
import net.sourceforge.waters.subject.base.Subject;
import net.sourceforge.waters.subject.base.UndoInfo;


/**
 * The subject implementation of the {@link NestedBlockProxy} interface.
 *
 * @author Robi Malik
 */

public abstract class NestedBlockSubject
  extends MutableSubject
  implements NestedBlockProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new nested block.
   * @param body The list of body objects of the new nested block, or <CODE>null</CODE> if empty.
   */
  protected NestedBlockSubject(final Collection<? extends Proxy> body)
  {
    if (body == null) {
      mBody = new ArrayListSubject<AbstractSubject>();
    } else {
      mBody = new ArrayListSubject<AbstractSubject>
        (body, AbstractSubject.class);
    }
    mBody.setParent(this);
  }

  /**
   * Creates a new nested block using default values.
   * This constructor creates a nested block with
   * an empty list of body objects.
   */
  protected NestedBlockSubject()
  {
    this(null);
  }


  //#########################################################################
  //# Cloning and Assigning
  @Override
  public NestedBlockSubject clone()
  {
    final ModuleProxyCloner cloner =
      ModuleSubjectFactory.getCloningInstance();
    return (NestedBlockSubject) cloner.getClone(this);
  }

  @Override
  protected void collectUndoInfo(final ProxySubject newState,
                                 final RecursiveUndoInfo info,
                                 final Set<? extends Subject> boundary)
  {
    super.collectUndoInfo(newState, info, boundary);
    final NestedBlockSubject downcast = (NestedBlockSubject) newState;
    final UndoInfo step1 = mBody.createUndoInfo(downcast.mBody, boundary);
    if (step1 != null) {
      info.add(step1);
    }
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.NestedBlockProxy
  public List<Proxy> getBody()
  {
    final List<?> precast = mBody;
    @SuppressWarnings("unchecked")
    final List<Proxy> downcast = (List<Proxy>) precast;
    return Collections.unmodifiableList(downcast);
  }


  //#########################################################################
  //# Setters
  /**
   * Gets the modifiable list of body objects of this nested block.
   */
  public ListSubject<AbstractSubject> getBodyModifiable()
  {
    return mBody;
  }


  //#########################################################################
  //# Data Members
  private ListSubject<AbstractSubject> mBody;

}

//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################
//# Copyright (C) 2004-2018 Robi Malik
//###########################################################################
//# This file is part of Waters.
//# Waters is free software: you can redistribute it and/or modify it under
//# the terms of the GNU General Public License as published by the Free
//# Software Foundation, either version 2 of the License, or (at your option)
//# any later version.
//# Waters is distributed in the hope that it will be useful, but WITHOUT ANY
//# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
//# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
//# details.
//# You should have received a copy of the GNU General Public License along
//# with Waters. If not, see <http://www.gnu.org/licenses/>.
//#
//# Linking Waters statically or dynamically with other modules is making a
//# combined work based on Waters. Thus, the terms and conditions of the GNU
//# General Public License cover the whole combination.
//# In addition, as a special exception, the copyright holders of Waters give
//# you permission to combine Waters with code included in the standard
//# release of Supremica under the Supremica Software License Agreement (or
//# modified versions of such code, with unchanged license). You may copy and
//# distribute such a system following the terms of the GNU GPL for Waters and
//# the licenses of the other code concerned.
//# Note that people who make modified versions of Waters are not obligated to
//# grant this special exception for their modified versions; it is their
//# choice whether to do so. The GNU General Public License gives permission
//# to release a modified version without this exception; this exception also
//# makes it possible to release a modified version which carries forward this
//# exception.
//###########################################################################

package net.sourceforge.waters.model.module;

import java.util.Collection;
import java.util.List;
import java.util.Set;

import net.sourceforge.waters.model.base.DescendingProxyVisitor;
import net.sourceforge.waters.model.base.Proxy;
import net.sourceforge.waters.model.base.VisitorException;


/**
 * <P>An empty implementation of the {@link ModuleProxyVisitor} interface.</P>
 *
 * <P>This is an adapter class to make it more convenient to implement
 * visitors that do not explicitly implement all the visit methods.
 * All the visit methods in this adapter class call the visit
 * method for the immediate superclass and
 * afterwards visit all children of their argument.
 * In all cases, <CODE>null</CODE> is returned.</P>
 *
 * @author Robi Malik
 */

public class DescendingModuleProxyVisitor
  extends DescendingProxyVisitor
  implements ModuleProxyVisitor
{

  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.ModuleProxyVisitor
  @Override
  public Object visitAliasProxy(final AliasProxy proxy)
    throws VisitorException
  {
    visitIdentifiedProxy(proxy);
    final ExpressionProxy expression = proxy.getExpression();
    expression.acceptVisitor(this);
    return null;
  }

  @Override
  public Object visitBinaryExpressionProxy(final BinaryExpressionProxy proxy)
    throws VisitorException
  {
    visitSimpleExpressionProxy(proxy);
    final SimpleExpressionProxy left = proxy.getLeft();
    left.acceptVisitor(this);
    final SimpleExpressionProxy right = proxy.getRight();
    right.acceptVisitor(this);
    return null;
  }

  @Override
  public Object visitBoxGeometryProxy(final BoxGeometryProxy proxy)
    throws VisitorException
  {
    return visitGeometryProxy(proxy);
  }

  @Override
  public Object visitColorGeometryProxy(final ColorGeometryProxy proxy)
    throws VisitorException
  {
    return visitGeometryProxy(proxy);
  }

  @Override
  public Object visitComponentProxy(final ComponentProxy proxy)
    throws VisitorException
  {
    return visitIdentifiedProxy(proxy);
  }

  @Override
  public Object visitConstantAliasProxy(final ConstantAliasProxy proxy)
    throws VisitorException
  {
    return visitAliasProxy(proxy);
  }

  @Override
  public Object visitEdgeProxy(final EdgeProxy proxy)
    throws VisitorException
  {
    visitProxy(proxy);
    final NodeProxy source = proxy.getSource();
    if (source != null) {
      source.acceptVisitor(this);
    }
    final NodeProxy target = proxy.getTarget();
    if (target != null) {
      target.acceptVisitor(this);
    }
    final LabelBlockProxy labelBlock = proxy.getLabelBlock();
    visitLabelBlockProxy(labelBlock);
    final GuardActionBlockProxy guardActionBlock =
      proxy.getGuardActionBlock();
    if (guardActionBlock != null) {
      visitGuardActionBlockProxy(guardActionBlock);
    }
    final SplineGeometryProxy geometry = proxy.getGeometry();
    visitSplineGeometryProxy(geometry);
    final PointGeometryProxy startPoint = proxy.getStartPoint();
    visitPointGeometryProxy(startPoint);
    final PointGeometryProxy endPoint = proxy.getEndPoint();
    visitPointGeometryProxy(endPoint);
    return null;
  }

  @Override
  public Object visitEnumSetExpressionProxy(final EnumSetExpressionProxy proxy)
    throws VisitorException
  {
    visitSimpleExpressionProxy(proxy);
    final List<SimpleIdentifierProxy> items = proxy.getItems();
    visitCollection(items);
    return null;
  }

  @Override
  public Object visitEventAliasProxy(final EventAliasProxy proxy)
    throws VisitorException
  {
    return visitAliasProxy(proxy);
  }

  @Override
  public Object visitEventDeclProxy(final EventDeclProxy proxy)
    throws VisitorException
  {
    visitIdentifiedProxy(proxy);
    final List<SimpleExpressionProxy> ranges = proxy.getRanges();
    visitCollection(ranges);
    final ColorGeometryProxy colorGeometry = proxy.getColorGeometry();
    visitColorGeometryProxy(colorGeometry);
    return null;
  }

  @Override
  public Object visitEventListExpressionProxy(final EventListExpressionProxy proxy)
    throws VisitorException
  {
    visitExpressionProxy(proxy);
    final List<Proxy> eventIdentifierList = proxy.getEventIdentifierList();
    visitCollection(eventIdentifierList);
    return null;
  }

  @Override
  public Object visitExpressionProxy(final ExpressionProxy proxy)
    throws VisitorException
  {
    return visitProxy(proxy);
  }

  @Override
  public Object visitForeachProxy(final ForeachProxy proxy)
    throws VisitorException
  {
    visitNamedProxy(proxy);
    final SimpleExpressionProxy range = proxy.getRange();
    range.acceptVisitor(this);
    final SimpleExpressionProxy guard = proxy.getGuard();
    if (guard != null) {
      guard.acceptVisitor(this);
    }
    final List<Proxy> body = proxy.getBody();
    visitCollection(body);
    return null;
  }

  @Override
  public Object visitFunctionCallExpressionProxy(final FunctionCallExpressionProxy proxy)
    throws VisitorException
  {
    visitSimpleExpressionProxy(proxy);
    final List<SimpleExpressionProxy> arguments = proxy.getArguments();
    visitCollection(arguments);
    return null;
  }

  @Override
  public Object visitGraphProxy(final GraphProxy proxy)
    throws VisitorException
  {
    visitProxy(proxy);
    final LabelBlockProxy blockedEvents = proxy.getBlockedEvents();
    if (blockedEvents != null) {
      visitLabelBlockProxy(blockedEvents);
    }
    final Set<NodeProxy> nodes = proxy.getNodes();
    visitCollection(nodes);
    final Collection<EdgeProxy> edges = proxy.getEdges();
    visitCollection(edges);
    return null;
  }

  @Override
  public Object visitGroupNodeProxy(final GroupNodeProxy proxy)
    throws VisitorException
  {
    visitNodeProxy(proxy);
    final Set<NodeProxy> immediateChildNodes = proxy.getImmediateChildNodes();
    visitCollection(immediateChildNodes);
    final BoxGeometryProxy geometry = proxy.getGeometry();
    visitBoxGeometryProxy(geometry);
    return null;
  }

  @Override
  public Object visitGuardActionBlockProxy(final GuardActionBlockProxy proxy)
    throws VisitorException
  {
    visitProxy(proxy);
    final List<SimpleExpressionProxy> guards = proxy.getGuards();
    visitCollection(guards);
    final List<BinaryExpressionProxy> actions = proxy.getActions();
    visitCollection(actions);
    final LabelGeometryProxy geometry = proxy.getGeometry();
    visitLabelGeometryProxy(geometry);
    return null;
  }

  @Override
  public Object visitIdentifiedProxy(final IdentifiedProxy proxy)
    throws VisitorException
  {
    visitNamedProxy(proxy);
    final IdentifierProxy identifier = proxy.getIdentifier();
    identifier.acceptVisitor(this);
    return null;
  }

  @Override
  public Object visitIdentifierProxy(final IdentifierProxy proxy)
    throws VisitorException
  {
    return visitSimpleExpressionProxy(proxy);
  }

  @Override
  public Object visitIndexedIdentifierProxy(final IndexedIdentifierProxy proxy)
    throws VisitorException
  {
    visitIdentifierProxy(proxy);
    final List<SimpleExpressionProxy> indexes = proxy.getIndexes();
    visitCollection(indexes);
    return null;
  }

  @Override
  public Object visitInstanceProxy(final InstanceProxy proxy)
    throws VisitorException
  {
    visitComponentProxy(proxy);
    final List<ParameterBindingProxy> bindingList = proxy.getBindingList();
    visitCollection(bindingList);
    return null;
  }

  @Override
  public Object visitIntConstantProxy(final IntConstantProxy proxy)
    throws VisitorException
  {
    return visitSimpleExpressionProxy(proxy);
  }

  @Override
  public Object visitLabelBlockProxy(final LabelBlockProxy proxy)
    throws VisitorException
  {
    visitEventListExpressionProxy(proxy);
    final LabelGeometryProxy geometry = proxy.getGeometry();
    visitLabelGeometryProxy(geometry);
    return null;
  }

  @Override
  public Object visitLabelGeometryProxy(final LabelGeometryProxy proxy)
    throws VisitorException
  {
    return visitGeometryProxy(proxy);
  }

  @Override
  public Object visitModuleProxy(final ModuleProxy proxy)
    throws VisitorException
  {
    visitDocumentProxy(proxy);
    final List<ConstantAliasProxy> constantAliasList =
      proxy.getConstantAliasList();
    visitCollection(constantAliasList);
    final List<EventDeclProxy> eventDeclList = proxy.getEventDeclList();
    visitCollection(eventDeclList);
    final List<Proxy> eventAliasList = proxy.getEventAliasList();
    visitCollection(eventAliasList);
    final List<Proxy> componentList = proxy.getComponentList();
    visitCollection(componentList);
    return null;
  }

  @Override
  public Object visitModuleSequenceProxy(final ModuleSequenceProxy proxy)
    throws VisitorException
  {
    visitDocumentProxy(proxy);
    final List<ModuleProxy> modules = proxy.getModules();
    visitCollection(modules);
    return null;
  }

  @Override
  public Object visitNodeProxy(final NodeProxy proxy)
    throws VisitorException
  {
    visitNamedProxy(proxy);
    final PlainEventListProxy propositions = proxy.getPropositions();
    visitPlainEventListProxy(propositions);
    return null;
  }

  @Override
  public Object visitParameterBindingProxy(final ParameterBindingProxy proxy)
    throws VisitorException
  {
    visitNamedProxy(proxy);
    final ExpressionProxy expression = proxy.getExpression();
    expression.acceptVisitor(this);
    return null;
  }

  @Override
  public Object visitPlainEventListProxy(final PlainEventListProxy proxy)
    throws VisitorException
  {
    return visitEventListExpressionProxy(proxy);
  }

  @Override
  public Object visitPointGeometryProxy(final PointGeometryProxy proxy)
    throws VisitorException
  {
    return visitGeometryProxy(proxy);
  }

  @Override
  public Object visitQualifiedIdentifierProxy(final QualifiedIdentifierProxy proxy)
    throws VisitorException
  {
    visitIdentifierProxy(proxy);
    final IdentifierProxy baseIdentifier = proxy.getBaseIdentifier();
    baseIdentifier.acceptVisitor(this);
    final IdentifierProxy componentIdentifier =
      proxy.getComponentIdentifier();
    componentIdentifier.acceptVisitor(this);
    return null;
  }

  @Override
  public Object visitSimpleComponentProxy(final SimpleComponentProxy proxy)
    throws VisitorException
  {
    visitComponentProxy(proxy);
    final GraphProxy graph = proxy.getGraph();
    visitGraphProxy(graph);
    return null;
  }

  @Override
  public Object visitSimpleExpressionProxy(final SimpleExpressionProxy proxy)
    throws VisitorException
  {
    return visitExpressionProxy(proxy);
  }

  @Override
  public Object visitSimpleIdentifierProxy(final SimpleIdentifierProxy proxy)
    throws VisitorException
  {
    return visitIdentifierProxy(proxy);
  }

  @Override
  public Object visitSimpleNodeProxy(final SimpleNodeProxy proxy)
    throws VisitorException
  {
    visitNodeProxy(proxy);
    final PointGeometryProxy pointGeometry = proxy.getPointGeometry();
    visitPointGeometryProxy(pointGeometry);
    final PointGeometryProxy initialArrowGeometry =
      proxy.getInitialArrowGeometry();
    visitPointGeometryProxy(initialArrowGeometry);
    final LabelGeometryProxy labelGeometry = proxy.getLabelGeometry();
    visitLabelGeometryProxy(labelGeometry);
    return null;
  }

  @Override
  public Object visitSplineGeometryProxy(final SplineGeometryProxy proxy)
    throws VisitorException
  {
    return visitGeometryProxy(proxy);
  }

  @Override
  public Object visitUnaryExpressionProxy(final UnaryExpressionProxy proxy)
    throws VisitorException
  {
    visitSimpleExpressionProxy(proxy);
    final SimpleExpressionProxy subTerm = proxy.getSubTerm();
    subTerm.acceptVisitor(this);
    return null;
  }

  @Override
  public Object visitVariableComponentProxy(final VariableComponentProxy proxy)
    throws VisitorException
  {
    visitComponentProxy(proxy);
    final SimpleExpressionProxy type = proxy.getType();
    type.acceptVisitor(this);
    final SimpleExpressionProxy initialStatePredicate =
      proxy.getInitialStatePredicate();
    initialStatePredicate.acceptVisitor(this);
    final List<VariableMarkingProxy> variableMarkings =
      proxy.getVariableMarkings();
    visitCollection(variableMarkings);
    return null;
  }

  @Override
  public Object visitVariableMarkingProxy(final VariableMarkingProxy proxy)
    throws VisitorException
  {
    visitProxy(proxy);
    final IdentifierProxy proposition = proxy.getProposition();
    proposition.acceptVisitor(this);
    final SimpleExpressionProxy predicate = proxy.getPredicate();
    predicate.acceptVisitor(this);
    return null;
  }

}

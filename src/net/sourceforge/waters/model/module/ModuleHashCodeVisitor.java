//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.model.module
//# CLASS:   ModuleHashCodeVisitor
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.model.module;

import java.awt.Color;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.sourceforge.waters.model.base.AbstractHashCodeVisitor;
import net.sourceforge.waters.model.base.Proxy;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.expr.BinaryOperator;
import net.sourceforge.waters.model.expr.UnaryOperator;

import net.sourceforge.waters.xsd.base.ComponentKind;
import net.sourceforge.waters.xsd.base.EventKind;
import net.sourceforge.waters.xsd.module.AnchorPosition;
import net.sourceforge.waters.xsd.module.ScopeKind;
import net.sourceforge.waters.xsd.module.SplineKind;


/**
 * A visitor to compute hash code for Module objects based on
 * their contents. The ModuleHashCodeVisitor can be parameterised to respect
 * or not to respect geometry information.
 *
 * @author Robi Malik
 */

public class ModuleHashCodeVisitor
  extends AbstractHashCodeVisitor
  implements ModuleProxyVisitor
{

  //#########################################################################
  //# Singleton Pattern
  public static ModuleHashCodeVisitor getInstance(final boolean geo)
  {
    if (geo) {
      return SingletonHolderWithGeometry.INSTANCE;
    } else {
      return SingletonHolderWithoutGeometry.INSTANCE;
    }
  }

  private ModuleHashCodeVisitor(final boolean geo)
  {
    super (geo);
  }

  private static class SingletonHolderWithoutGeometry {
    private static final ModuleHashCodeVisitor INSTANCE =
      new ModuleHashCodeVisitor(false);
  }

  private static class SingletonHolderWithGeometry {
    private static final ModuleHashCodeVisitor INSTANCE =
      new ModuleHashCodeVisitor(true);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.ModuleProxyVisitor
  public Integer visitAliasProxy
    (final AliasProxy proxy)
    throws VisitorException
  {
    int result = visitIdentifiedProxy(proxy);
    final ExpressionProxy expression = proxy.getExpression();
    result *= 5;
    result += getProxyHashCode(expression);
    return result;
  }

  public Integer visitBinaryExpressionProxy
    (final BinaryExpressionProxy proxy)
    throws VisitorException
  {
    int result = visitSimpleExpressionProxy(proxy);
    final BinaryOperator operator = proxy.getOperator();
    result *= 5;
    result += getOptionalHashCode(operator);
    final SimpleExpressionProxy left = proxy.getLeft();
    result *= 5;
    result += getProxyHashCode(left);
    final SimpleExpressionProxy right = proxy.getRight();
    result *= 5;
    result += getProxyHashCode(right);
    return result;
  }

  public Integer visitBoxGeometryProxy
    (final BoxGeometryProxy proxy)
    throws VisitorException
  {
    int result = visitGeometryProxy(proxy);
    final Rectangle2D rectangle = proxy.getRectangle();
    result *= 5;
    result += getOptionalHashCode(rectangle);
    return result;
  }

  public Integer visitColorGeometryProxy
    (final ColorGeometryProxy proxy)
    throws VisitorException
  {
    int result = visitGeometryProxy(proxy);
    final Set<Color> colorSet = proxy.getColorSet();
    result *= 5;
    result += getOptionalHashCode(colorSet);
    return result;
  }

  public Integer visitComponentProxy
    (final ComponentProxy proxy)
    throws VisitorException
  {
    return visitIdentifiedProxy(proxy);
  }

  public Integer visitConstantAliasProxy
    (final ConstantAliasProxy proxy)
    throws VisitorException
  {
    int result = visitAliasProxy(proxy);
    final ScopeKind scope = proxy.getScope();
    result *= 5;
    result += getOptionalHashCode(scope);
    return result;
  }

  public Integer visitEdgeProxy
    (final EdgeProxy proxy)
    throws VisitorException
  {
    int result = visitProxy(proxy);
    final NodeProxy source = proxy.getSource();
    result *= 5;
    result += getRefHashCode(source);
    final NodeProxy target = proxy.getTarget();
    result *= 5;
    result += getRefHashCode(target);
    final LabelBlockProxy labelBlock = proxy.getLabelBlock();
    result *= 5;
    result += getProxyHashCode(labelBlock);
    final GuardActionBlockProxy guardActionBlock =
      proxy.getGuardActionBlock();
    result *= 5;
    result += getProxyHashCode(guardActionBlock);
    if (isRespectingGeometry()) {
      final SplineGeometryProxy geometry = proxy.getGeometry();
      result *= 5;
      result += getProxyHashCode(geometry);
      final PointGeometryProxy startPoint = proxy.getStartPoint();
      result *= 5;
      result += getProxyHashCode(startPoint);
      final PointGeometryProxy endPoint = proxy.getEndPoint();
      result *= 5;
      result += getProxyHashCode(endPoint);
    }
    return result;
  }

  public Integer visitEnumSetExpressionProxy
    (final EnumSetExpressionProxy proxy)
    throws VisitorException
  {
    int result = visitSimpleExpressionProxy(proxy);
    final List<SimpleIdentifierProxy> items = proxy.getItems();
    result *= 5;
    result += getListHashCode(items);
    return result;
  }

  public Integer visitEventAliasProxy
    (final EventAliasProxy proxy)
    throws VisitorException
  {
    return visitAliasProxy(proxy);
  }

  public Integer visitEventDeclProxy
    (final EventDeclProxy proxy)
    throws VisitorException
  {
    int result = visitIdentifiedProxy(proxy);
    final EventKind kind = proxy.getKind();
    result *= 5;
    result += getOptionalHashCode(kind);
    final boolean observable = proxy.isObservable();
    result *= 5;
    if (observable) {
      result++;
    }
    final ScopeKind scope = proxy.getScope();
    result *= 5;
    result += getOptionalHashCode(scope);
    final List<SimpleExpressionProxy> ranges = proxy.getRanges();
    result *= 5;
    result += getListHashCode(ranges);
    final Map<String,String> attributes = proxy.getAttributes();
    result *= 5;
    result += getOptionalHashCode(attributes);
    if (isRespectingGeometry()) {
      final ColorGeometryProxy colorGeometry = proxy.getColorGeometry();
      result *= 5;
      result += getProxyHashCode(colorGeometry);
    }
    return result;
  }

  public Integer visitEventListExpressionProxy
    (final EventListExpressionProxy proxy)
    throws VisitorException
  {
    int result = visitExpressionProxy(proxy);
    final List<Proxy> eventList = proxy.getEventList();
    result *= 5;
    result += getListHashCode(eventList);
    return result;
  }

  public Integer visitExpressionProxy
    (final ExpressionProxy proxy)
    throws VisitorException
  {
    return visitProxy(proxy);
  }

  public Integer visitForeachComponentProxy
    (final ForeachComponentProxy proxy)
    throws VisitorException
  {
    return visitForeachProxy(proxy);
  }

  public Integer visitForeachEventAliasProxy
    (final ForeachEventAliasProxy proxy)
    throws VisitorException
  {
    return visitForeachProxy(proxy);
  }

  public Integer visitForeachEventProxy
    (final ForeachEventProxy proxy)
    throws VisitorException
  {
    return visitForeachProxy(proxy);
  }

  public Integer visitForeachProxy
    (final ForeachProxy proxy)
    throws VisitorException
  {
    int result = visitNamedProxy(proxy);
    final SimpleExpressionProxy range = proxy.getRange();
    result *= 5;
    result += getProxyHashCode(range);
    final SimpleExpressionProxy guard = proxy.getGuard();
    result *= 5;
    result += getProxyHashCode(guard);
    final List<Proxy> body = proxy.getBody();
    result *= 5;
    result += getListHashCode(body);
    return result;
  }

  public Integer visitGraphProxy
    (final GraphProxy proxy)
    throws VisitorException
  {
    int result = visitProxy(proxy);
    final boolean deterministic = proxy.isDeterministic();
    result *= 5;
    if (deterministic) {
      result++;
    }
    final LabelBlockProxy blockedEvents = proxy.getBlockedEvents();
    result *= 5;
    result += getProxyHashCode(blockedEvents);
    final Set<NodeProxy> nodes = proxy.getNodes();
    result *= 5;
    result += getCollectionHashCode(nodes);
    final Collection<EdgeProxy> edges = proxy.getEdges();
    result *= 5;
    result += getCollectionHashCode(edges);
    return result;
  }

  public Integer visitGroupNodeProxy
    (final GroupNodeProxy proxy)
    throws VisitorException
  {
    int result = visitNodeProxy(proxy);
    final Set<NodeProxy> immediateChildNodes = proxy.getImmediateChildNodes();
    result *= 5;
    result += getRefCollectionHashCode(immediateChildNodes);
    if (isRespectingGeometry()) {
      final BoxGeometryProxy geometry = proxy.getGeometry();
      result *= 5;
      result += getProxyHashCode(geometry);
    }
    return result;
  }

  public Integer visitGuardActionBlockProxy
    (final GuardActionBlockProxy proxy)
    throws VisitorException
  {
    int result = visitProxy(proxy);
    final List<SimpleExpressionProxy> guards = proxy.getGuards();
    result *= 5;
    result += getListHashCode(guards);
    final List<BinaryExpressionProxy> actions = proxy.getActions();
    result *= 5;
    result += getListHashCode(actions);
    if (isRespectingGeometry()) {
      final LabelGeometryProxy geometry = proxy.getGeometry();
      result *= 5;
      result += getProxyHashCode(geometry);
    }
    return result;
  }

  public Integer visitIdentifiedProxy
    (final IdentifiedProxy proxy)
    throws VisitorException
  {
    int result = visitProxy(proxy);
    final IdentifierProxy identifier = proxy.getIdentifier();
    result *= 5;
    result += getProxyHashCode(identifier);
    return result;
  }

  public Integer visitIdentifierProxy
    (final IdentifierProxy proxy)
    throws VisitorException
  {
    return visitSimpleExpressionProxy(proxy);
  }

  public Integer visitIndexedIdentifierProxy
    (final IndexedIdentifierProxy proxy)
    throws VisitorException
  {
    int result = visitIdentifierProxy(proxy);
    final String name = proxy.getName();
    result *= 5;
    result += getOptionalHashCode(name);
    final List<SimpleExpressionProxy> indexes = proxy.getIndexes();
    result *= 5;
    result += getListHashCode(indexes);
    return result;
  }

  public Integer visitInstanceProxy
    (final InstanceProxy proxy)
    throws VisitorException
  {
    int result = visitComponentProxy(proxy);
    final String moduleName = proxy.getModuleName();
    result *= 5;
    result += getOptionalHashCode(moduleName);
    final List<ParameterBindingProxy> bindingList = proxy.getBindingList();
    result *= 5;
    result += getListHashCode(bindingList);
    return result;
  }

  public Integer visitIntConstantProxy
    (final IntConstantProxy proxy)
    throws VisitorException
  {
    int result = visitSimpleExpressionProxy(proxy);
    final int value = proxy.getValue();
    result *= 5;
    result += value;
    return result;
  }

  public Integer visitLabelBlockProxy
    (final LabelBlockProxy proxy)
    throws VisitorException
  {
    int result = visitEventListExpressionProxy(proxy);
    if (isRespectingGeometry()) {
      final LabelGeometryProxy geometry = proxy.getGeometry();
      result *= 5;
      result += getProxyHashCode(geometry);
    }
    return result;
  }

  public Integer visitLabelGeometryProxy
    (final LabelGeometryProxy proxy)
    throws VisitorException
  {
    int result = visitGeometryProxy(proxy);
    final Point2D offset = proxy.getOffset();
    result *= 5;
    result += getOptionalHashCode(offset);
    final AnchorPosition anchor = proxy.getAnchor();
    result *= 5;
    result += getOptionalHashCode(anchor);
    return result;
  }

  public Integer visitModuleProxy
    (final ModuleProxy proxy)
    throws VisitorException
  {
    int result = visitDocumentProxy(proxy);
    final List<ConstantAliasProxy> constantAliasList =
      proxy.getConstantAliasList();
    result *= 5;
    result += getListHashCode(constantAliasList);
    final List<EventDeclProxy> eventDeclList = proxy.getEventDeclList();
    result *= 5;
    result += getListHashCode(eventDeclList);
    final List<Proxy> eventAliasList = proxy.getEventAliasList();
    result *= 5;
    result += getListHashCode(eventAliasList);
    final List<Proxy> componentList = proxy.getComponentList();
    result *= 5;
    result += getListHashCode(componentList);
    return result;
  }

  public Integer visitModuleSequenceProxy
    (final ModuleSequenceProxy proxy)
    throws VisitorException
  {
    int result = visitDocumentProxy(proxy);
    final List<ModuleProxy> modules = proxy.getModules();
    result *= 5;
    result += getListHashCode(modules);
    return result;
  }

  public Integer visitNodeProxy
    (final NodeProxy proxy)
    throws VisitorException
  {
    int result = visitNamedProxy(proxy);
    final PlainEventListProxy propositions = proxy.getPropositions();
    result *= 5;
    result += getProxyHashCode(propositions);
    return result;
  }

  public Integer visitParameterBindingProxy
    (final ParameterBindingProxy proxy)
    throws VisitorException
  {
    int result = visitNamedProxy(proxy);
    final ExpressionProxy expression = proxy.getExpression();
    result *= 5;
    result += getProxyHashCode(expression);
    return result;
  }

  public Integer visitPlainEventListProxy
    (final PlainEventListProxy proxy)
    throws VisitorException
  {
    return visitEventListExpressionProxy(proxy);
  }

  public Integer visitPointGeometryProxy
    (final PointGeometryProxy proxy)
    throws VisitorException
  {
    int result = visitGeometryProxy(proxy);
    final Point2D point = proxy.getPoint();
    result *= 5;
    result += getOptionalHashCode(point);
    return result;
  }

  public Integer visitQualifiedIdentifierProxy
    (final QualifiedIdentifierProxy proxy)
    throws VisitorException
  {
    int result = visitIdentifierProxy(proxy);
    final IdentifierProxy baseIdentifier = proxy.getBaseIdentifier();
    result *= 5;
    result += getProxyHashCode(baseIdentifier);
    final IdentifierProxy componentIdentifier =
      proxy.getComponentIdentifier();
    result *= 5;
    result += getProxyHashCode(componentIdentifier);
    return result;
  }

  public Integer visitSimpleComponentProxy
    (final SimpleComponentProxy proxy)
    throws VisitorException
  {
    int result = visitComponentProxy(proxy);
    final ComponentKind kind = proxy.getKind();
    result *= 5;
    result += getOptionalHashCode(kind);
    final GraphProxy graph = proxy.getGraph();
    result *= 5;
    result += getProxyHashCode(graph);
    final Map<String,String> attributes = proxy.getAttributes();
    result *= 5;
    result += getOptionalHashCode(attributes);
    return result;
  }

  public Integer visitSimpleExpressionProxy
    (final SimpleExpressionProxy proxy)
    throws VisitorException
  {
    int result = visitExpressionProxy(proxy);
    if (isRespectingGeometry()) {
      final String plainText = proxy.getPlainText();
      result *= 5;
      result += getOptionalHashCode(plainText);
    }
    return result;
  }

  public Integer visitSimpleIdentifierProxy
    (final SimpleIdentifierProxy proxy)
    throws VisitorException
  {
    int result = visitIdentifierProxy(proxy);
    final String name = proxy.getName();
    result *= 5;
    result += getOptionalHashCode(name);
    return result;
  }

  public Integer visitSimpleNodeProxy
    (final SimpleNodeProxy proxy)
    throws VisitorException
  {
    int result = visitNodeProxy(proxy);
    final boolean initial = proxy.isInitial();
    result *= 5;
    if (initial) {
      result++;
    }
    if (isRespectingGeometry()) {
      final PointGeometryProxy pointGeometry = proxy.getPointGeometry();
      result *= 5;
      result += getProxyHashCode(pointGeometry);
      final PointGeometryProxy initialArrowGeometry =
        proxy.getInitialArrowGeometry();
      result *= 5;
      result += getProxyHashCode(initialArrowGeometry);
      final LabelGeometryProxy labelGeometry = proxy.getLabelGeometry();
      result *= 5;
      result += getProxyHashCode(labelGeometry);
    }
    return result;
  }

  public Integer visitSplineGeometryProxy
    (final SplineGeometryProxy proxy)
    throws VisitorException
  {
    int result = visitGeometryProxy(proxy);
    final List<Point2D> points = proxy.getPoints();
    result *= 5;
    result += getOptionalHashCode(points);
    final SplineKind kind = proxy.getKind();
    result *= 5;
    result += getOptionalHashCode(kind);
    return result;
  }

  public Integer visitUnaryExpressionProxy
    (final UnaryExpressionProxy proxy)
    throws VisitorException
  {
    int result = visitSimpleExpressionProxy(proxy);
    final UnaryOperator operator = proxy.getOperator();
    result *= 5;
    result += getOptionalHashCode(operator);
    final SimpleExpressionProxy subTerm = proxy.getSubTerm();
    result *= 5;
    result += getProxyHashCode(subTerm);
    return result;
  }

  public Integer visitVariableComponentProxy
    (final VariableComponentProxy proxy)
    throws VisitorException
  {
    int result = visitComponentProxy(proxy);
    final SimpleExpressionProxy type = proxy.getType();
    result *= 5;
    result += getProxyHashCode(type);
    final boolean deterministic = proxy.isDeterministic();
    result *= 5;
    if (deterministic) {
      result++;
    }
    final SimpleExpressionProxy initialStatePredicate =
      proxy.getInitialStatePredicate();
    result *= 5;
    result += getProxyHashCode(initialStatePredicate);
    final List<VariableMarkingProxy> variableMarkings =
      proxy.getVariableMarkings();
    result *= 5;
    result += getListHashCode(variableMarkings);
    return result;
  }

  public Integer visitVariableMarkingProxy
    (final VariableMarkingProxy proxy)
    throws VisitorException
  {
    int result = visitProxy(proxy);
    final IdentifierProxy proposition = proxy.getProposition();
    result *= 5;
    result += getProxyHashCode(proposition);
    final SimpleExpressionProxy predicate = proxy.getPredicate();
    result *= 5;
    result += getProxyHashCode(predicate);
    return result;
  }

}

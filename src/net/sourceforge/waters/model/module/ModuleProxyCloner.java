//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.model.module
//# CLASS:   ModuleProxyCloner
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.model.module;

import gnu.trove.set.hash.THashSet;
import java.awt.Color;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.sourceforge.waters.model.base.Proxy;
import net.sourceforge.waters.model.base.ProxyCloner;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.expr.BinaryOperator;
import net.sourceforge.waters.model.expr.UnaryOperator;

import net.sourceforge.waters.xsd.base.ComponentKind;
import net.sourceforge.waters.xsd.base.EventKind;
import net.sourceforge.waters.xsd.module.AnchorPosition;
import net.sourceforge.waters.xsd.module.ScopeKind;
import net.sourceforge.waters.xsd.module.SplineKind;


/**
 * A tool to create deep copies of Module objects.
 * Parameterised by a factory, this visitor can accept objects from
 * one {@link Proxy} implementation and translate them to another.
 *
 * @author Robi Malik
 */

public class ModuleProxyCloner
  extends DefaultModuleProxyVisitor
  implements ProxyCloner
{

  //#########################################################################
  //# Constructor
  public ModuleProxyCloner(final ModuleProxyFactory factory)
  {
    mFactory = factory;
    mNodeMap = null;
  }


  //#########################################################################
  //# Invocation
  public Proxy getClone(final Proxy proxy)
  {
    if (proxy == null) {
      return null;
    } else {
      try {
        return (Proxy) proxy.acceptVisitor(this);
      } catch (final VisitorException exception) {
        throw exception.getRuntimeException();
      }
    }
  }

  public <P extends Proxy>
  List<P> getClonedList(final Collection<? extends P> collection)
  {
    final int size = collection.size();
    final List<Proxy> result = new ArrayList<Proxy>(size);
    for (final P proxy : collection) {
      final Proxy cloned = getClone(proxy);
      result.add(cloned);
    }
    final List<?> precast = result;
    @SuppressWarnings("unchecked")
    final List<P> cast = (List<P>) precast;
    return cast;
  }

  public <P extends Proxy>
  Set<P> getClonedSet(final Collection<? extends P> collection)
  {
    final int size = collection.size();
    final Set<Proxy> result = new THashSet<Proxy>(size);
    for (final P proxy : collection) {
      final Proxy cloned = getClone(proxy);
      result.add(cloned);
    }
    final Set<?> precast = result;
    @SuppressWarnings("unchecked")
    final Set<P> cast = (Set<P>) precast;
    return cast;
  }

  /**
   * Creates a clone of the given graph using two factories.
   * This methods creates a clone of a graph's nodes and edges using
   * the standard factory of this cloner, then creates a new graph 
   * using another factory given as an argument.
   * @param  proxy    The graph to be duplicated.
   * @param  factory  The factory used to create the new graph.
   * @return The cloned graph.
   */
  public GraphProxy getClonedGraph(final GraphProxy proxy,
                                   final ModuleProxyFactory factory)
  {
    final int size = proxy.getNodes().size();
    mNodeMap = new HashMap<String,NodeProxy>(size);
    try {
      final boolean deterministic = proxy.isDeterministic();
      final LabelBlockProxy blockedEvents0 = proxy.getBlockedEvents();
      final LabelBlockProxy blockedEvents =
        blockedEvents0 == null ? null : visitLabelBlockProxy(blockedEvents0);
      final Collection<NodeProxy> nodes0 = proxy.getNodes();
      final Collection<NodeProxy> nodes = lookupNodeProxyCollection(nodes0);
      final Collection<EdgeProxy> edges0 = proxy.getEdges();
      final Collection<EdgeProxy> edges = cloneProxyCollection(edges0);
      return factory.createGraphProxy(deterministic,
                                      blockedEvents,
                                      nodes,
                                      edges);
    } catch (final VisitorException exception) {
      throw exception.getRuntimeException();
    } finally {
      mNodeMap = null;
    }
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.ModuleProxyVisitor
  @Override
  public AliasProxy visitAliasProxy
    (final AliasProxy proxy)
    throws VisitorException
  {
    return (AliasProxy) proxy.acceptVisitor(this);
  }

  @Override
  public BinaryExpressionProxy visitBinaryExpressionProxy
    (final BinaryExpressionProxy proxy)
    throws VisitorException
  {
    final String plainText = proxy.getPlainText();
    final BinaryOperator operator = proxy.getOperator();
    final SimpleExpressionProxy left0 = proxy.getLeft();
    final SimpleExpressionProxy left = visitSimpleExpressionProxy(left0);
    final SimpleExpressionProxy right0 = proxy.getRight();
    final SimpleExpressionProxy right = visitSimpleExpressionProxy(right0);
    return mFactory.createBinaryExpressionProxy(plainText,
                                                operator,
                                                left,
                                                right);
  }

  @Override
  public BoxGeometryProxy visitBoxGeometryProxy
    (final BoxGeometryProxy proxy)
    throws VisitorException
  {
    final Rectangle2D rectangle = proxy.getRectangle();
    return mFactory.createBoxGeometryProxy(rectangle);
  }

  @Override
  public ColorGeometryProxy visitColorGeometryProxy
    (final ColorGeometryProxy proxy)
    throws VisitorException
  {
    final Collection<Color> colorSet = proxy.getColorSet();
    return mFactory.createColorGeometryProxy(colorSet);
  }

  @Override
  public ComponentProxy visitComponentProxy
    (final ComponentProxy proxy)
    throws VisitorException
  {
    return (ComponentProxy) proxy.acceptVisitor(this);
  }

  @Override
  public ConstantAliasProxy visitConstantAliasProxy
    (final ConstantAliasProxy proxy)
    throws VisitorException
  {
    final IdentifierProxy identifier0 = proxy.getIdentifier();
    final IdentifierProxy identifier = visitIdentifierProxy(identifier0);
    final ExpressionProxy expression0 = proxy.getExpression();
    final ExpressionProxy expression = visitExpressionProxy(expression0);
    final ScopeKind scope = proxy.getScope();
    return mFactory.createConstantAliasProxy(identifier,
                                             expression,
                                             scope);
  }

  @Override
  public EdgeProxy visitEdgeProxy
    (final EdgeProxy proxy)
    throws VisitorException
  {
    final NodeProxy source0 = proxy.getSource();
    final NodeProxy source =
      source0 == null ? null : lookupNodeProxy(source0);
    final NodeProxy target0 = proxy.getTarget();
    final NodeProxy target =
      target0 == null ? null : lookupNodeProxy(target0);
    final LabelBlockProxy labelBlock0 = proxy.getLabelBlock();
    final LabelBlockProxy labelBlock = visitLabelBlockProxy(labelBlock0);
    final GuardActionBlockProxy guardActionBlock0 =
      proxy.getGuardActionBlock();
    final GuardActionBlockProxy guardActionBlock =
      guardActionBlock0 == null ? null : visitGuardActionBlockProxy(guardActionBlock0);
    final SplineGeometryProxy geometry0 = proxy.getGeometry();
    final SplineGeometryProxy geometry =
      geometry0 == null ? null : visitSplineGeometryProxy(geometry0);
    final PointGeometryProxy startPoint0 = proxy.getStartPoint();
    final PointGeometryProxy startPoint =
      startPoint0 == null ? null : visitPointGeometryProxy(startPoint0);
    final PointGeometryProxy endPoint0 = proxy.getEndPoint();
    final PointGeometryProxy endPoint =
      endPoint0 == null ? null : visitPointGeometryProxy(endPoint0);
    return mFactory.createEdgeProxy(source,
                                    target,
                                    labelBlock,
                                    guardActionBlock,
                                    geometry,
                                    startPoint,
                                    endPoint);
  }

  @Override
  public EnumSetExpressionProxy visitEnumSetExpressionProxy
    (final EnumSetExpressionProxy proxy)
    throws VisitorException
  {
    final String plainText = proxy.getPlainText();
    final Collection<SimpleIdentifierProxy> items0 = proxy.getItems();
    final Collection<SimpleIdentifierProxy> items =
      cloneProxyCollection(items0);
    return mFactory.createEnumSetExpressionProxy(plainText,
                                                 items);
  }

  @Override
  public EventAliasProxy visitEventAliasProxy
    (final EventAliasProxy proxy)
    throws VisitorException
  {
    final IdentifierProxy identifier0 = proxy.getIdentifier();
    final IdentifierProxy identifier = visitIdentifierProxy(identifier0);
    final ExpressionProxy expression0 = proxy.getExpression();
    final ExpressionProxy expression = visitExpressionProxy(expression0);
    return mFactory.createEventAliasProxy(identifier,
                                          expression);
  }

  @Override
  public EventDeclProxy visitEventDeclProxy
    (final EventDeclProxy proxy)
    throws VisitorException
  {
    final IdentifierProxy identifier0 = proxy.getIdentifier();
    final IdentifierProxy identifier = visitIdentifierProxy(identifier0);
    final EventKind kind = proxy.getKind();
    final boolean observable = proxy.isObservable();
    final ScopeKind scope = proxy.getScope();
    final Collection<SimpleExpressionProxy> ranges0 = proxy.getRanges();
    final Collection<SimpleExpressionProxy> ranges =
      cloneProxyCollection(ranges0);
    final ColorGeometryProxy colorGeometry0 = proxy.getColorGeometry();
    final ColorGeometryProxy colorGeometry =
      colorGeometry0 == null ? null : visitColorGeometryProxy(colorGeometry0);
    final Map<String,String> attributes = proxy.getAttributes();
    return mFactory.createEventDeclProxy(identifier,
                                         kind,
                                         observable,
                                         scope,
                                         ranges,
                                         colorGeometry,
                                         attributes);
  }

  @Override
  public EventListExpressionProxy visitEventListExpressionProxy
    (final EventListExpressionProxy proxy)
    throws VisitorException
  {
    return (EventListExpressionProxy) proxy.acceptVisitor(this);
  }

  @Override
  public ExpressionProxy visitExpressionProxy
    (final ExpressionProxy proxy)
    throws VisitorException
  {
    return (ExpressionProxy) proxy.acceptVisitor(this);
  }

  @Override
  public ForeachProxy visitForeachProxy
    (final ForeachProxy proxy)
    throws VisitorException
  {
    final String name = proxy.getName();
    final SimpleExpressionProxy range0 = proxy.getRange();
    final SimpleExpressionProxy range = visitSimpleExpressionProxy(range0);
    final SimpleExpressionProxy guard0 = proxy.getGuard();
    final SimpleExpressionProxy guard =
      guard0 == null ? null : visitSimpleExpressionProxy(guard0);
    final Collection<Proxy> body0 = proxy.getBody();
    final Collection<Proxy> body = cloneProxyCollection(body0);
    return mFactory.createForeachProxy(name,
                                       range,
                                       guard,
                                       body);
  }

  @Override
  public FunctionCallExpressionProxy visitFunctionCallExpressionProxy
    (final FunctionCallExpressionProxy proxy)
    throws VisitorException
  {
    final String plainText = proxy.getPlainText();
    final String functionName = proxy.getFunctionName();
    final Collection<SimpleExpressionProxy> arguments0 = proxy.getArguments();
    final Collection<SimpleExpressionProxy> arguments =
      cloneProxyCollection(arguments0);
    return mFactory.createFunctionCallExpressionProxy(plainText,
                                                      functionName,
                                                      arguments);
  }

  @Override
  public GraphProxy visitGraphProxy
    (final GraphProxy proxy)
    throws VisitorException
  {
    final int size = proxy.getNodes().size();
    mNodeMap = new HashMap<String,NodeProxy>(size);
    try {
      final boolean deterministic = proxy.isDeterministic();
      final LabelBlockProxy blockedEvents0 = proxy.getBlockedEvents();
      final LabelBlockProxy blockedEvents =
        blockedEvents0 == null ? null : visitLabelBlockProxy(blockedEvents0);
      final Collection<NodeProxy> nodes0 = proxy.getNodes();
      final Collection<NodeProxy> nodes = lookupNodeProxyCollection(nodes0);
      final Collection<EdgeProxy> edges0 = proxy.getEdges();
      final Collection<EdgeProxy> edges = cloneProxyCollection(edges0);
      return mFactory.createGraphProxy(deterministic,
                                       blockedEvents,
                                       nodes,
                                       edges);
    } finally {
      mNodeMap = null;
    }
  }

  @Override
  public GroupNodeProxy visitGroupNodeProxy
    (final GroupNodeProxy proxy)
    throws VisitorException
  {
    final String name = proxy.getName();
    final PlainEventListProxy propositions0 = proxy.getPropositions();
    final PlainEventListProxy propositions =
      visitPlainEventListProxy(propositions0);
    final Map<String,String> attributes = proxy.getAttributes();
    final Collection<NodeProxy> immediateChildNodes0 =
      proxy.getImmediateChildNodes();
    final Collection<NodeProxy> immediateChildNodes =
      lookupNodeProxyCollection(immediateChildNodes0);
    final BoxGeometryProxy geometry0 = proxy.getGeometry();
    final BoxGeometryProxy geometry =
      geometry0 == null ? null : visitBoxGeometryProxy(geometry0);
    return mFactory.createGroupNodeProxy(name,
                                         propositions,
                                         attributes,
                                         immediateChildNodes,
                                         geometry);
  }

  @Override
  public GuardActionBlockProxy visitGuardActionBlockProxy
    (final GuardActionBlockProxy proxy)
    throws VisitorException
  {
    final Collection<SimpleExpressionProxy> guards0 = proxy.getGuards();
    final Collection<SimpleExpressionProxy> guards =
      cloneProxyCollection(guards0);
    final Collection<BinaryExpressionProxy> actions0 = proxy.getActions();
    final Collection<BinaryExpressionProxy> actions =
      cloneProxyCollection(actions0);
    final LabelGeometryProxy geometry0 = proxy.getGeometry();
    final LabelGeometryProxy geometry =
      geometry0 == null ? null : visitLabelGeometryProxy(geometry0);
    return mFactory.createGuardActionBlockProxy(guards,
                                                actions,
                                                geometry);
  }

  @Override
  public IdentifiedProxy visitIdentifiedProxy
    (final IdentifiedProxy proxy)
    throws VisitorException
  {
    return (IdentifiedProxy) proxy.acceptVisitor(this);
  }

  @Override
  public IdentifierProxy visitIdentifierProxy
    (final IdentifierProxy proxy)
    throws VisitorException
  {
    return (IdentifierProxy) proxy.acceptVisitor(this);
  }

  @Override
  public IndexedIdentifierProxy visitIndexedIdentifierProxy
    (final IndexedIdentifierProxy proxy)
    throws VisitorException
  {
    final String plainText = proxy.getPlainText();
    final String name = proxy.getName();
    final Collection<SimpleExpressionProxy> indexes0 = proxy.getIndexes();
    final Collection<SimpleExpressionProxy> indexes =
      cloneProxyCollection(indexes0);
    return mFactory.createIndexedIdentifierProxy(plainText,
                                                 name,
                                                 indexes);
  }

  @Override
  public InstanceProxy visitInstanceProxy
    (final InstanceProxy proxy)
    throws VisitorException
  {
    final IdentifierProxy identifier0 = proxy.getIdentifier();
    final IdentifierProxy identifier = visitIdentifierProxy(identifier0);
    final String moduleName = proxy.getModuleName();
    final Collection<ParameterBindingProxy> bindingList0 =
      proxy.getBindingList();
    final Collection<ParameterBindingProxy> bindingList =
      cloneProxyCollection(bindingList0);
    return mFactory.createInstanceProxy(identifier,
                                        moduleName,
                                        bindingList);
  }

  @Override
  public IntConstantProxy visitIntConstantProxy
    (final IntConstantProxy proxy)
    throws VisitorException
  {
    final String plainText = proxy.getPlainText();
    final int value = proxy.getValue();
    return mFactory.createIntConstantProxy(plainText,
                                           value);
  }

  @Override
  public LabelBlockProxy visitLabelBlockProxy
    (final LabelBlockProxy proxy)
    throws VisitorException
  {
    final Collection<Proxy> eventIdentifierList0 =
      proxy.getEventIdentifierList();
    final Collection<Proxy> eventIdentifierList =
      cloneProxyCollection(eventIdentifierList0);
    final LabelGeometryProxy geometry0 = proxy.getGeometry();
    final LabelGeometryProxy geometry =
      geometry0 == null ? null : visitLabelGeometryProxy(geometry0);
    return mFactory.createLabelBlockProxy(eventIdentifierList,
                                          geometry);
  }

  @Override
  public LabelGeometryProxy visitLabelGeometryProxy
    (final LabelGeometryProxy proxy)
    throws VisitorException
  {
    final Point2D offset = proxy.getOffset();
    final AnchorPosition anchor = proxy.getAnchor();
    return mFactory.createLabelGeometryProxy(offset,
                                             anchor);
  }

  @Override
  public ModuleProxy visitModuleProxy
    (final ModuleProxy proxy)
    throws VisitorException
  {
    final String name = proxy.getName();
    final String comment = proxy.getComment();
    final Collection<ConstantAliasProxy> constantAliasList0 =
      proxy.getConstantAliasList();
    final Collection<ConstantAliasProxy> constantAliasList =
      cloneProxyCollection(constantAliasList0);
    final Collection<EventDeclProxy> eventDeclList0 =
      proxy.getEventDeclList();
    final Collection<EventDeclProxy> eventDeclList =
      cloneProxyCollection(eventDeclList0);
    final Collection<Proxy> eventAliasList0 = proxy.getEventAliasList();
    final Collection<Proxy> eventAliasList =
      cloneProxyCollection(eventAliasList0);
    final Collection<Proxy> componentList0 = proxy.getComponentList();
    final Collection<Proxy> componentList =
      cloneProxyCollection(componentList0);
    return mFactory.createModuleProxy(name,
                                      comment,
                                      null,
                                      constantAliasList,
                                      eventDeclList,
                                      eventAliasList,
                                      componentList);
  }

  @Override
  public ModuleSequenceProxy visitModuleSequenceProxy
    (final ModuleSequenceProxy proxy)
    throws VisitorException
  {
    final String name = proxy.getName();
    final String comment = proxy.getComment();
    final Collection<ModuleProxy> modules0 = proxy.getModules();
    final Collection<ModuleProxy> modules = cloneProxyCollection(modules0);
    return mFactory.createModuleSequenceProxy(name,
                                              comment,
                                              null,
                                              modules);
  }

  @Override
  public NodeProxy visitNodeProxy
    (final NodeProxy proxy)
    throws VisitorException
  {
    return (NodeProxy) proxy.acceptVisitor(this);
  }

  @Override
  public ParameterBindingProxy visitParameterBindingProxy
    (final ParameterBindingProxy proxy)
    throws VisitorException
  {
    final String name = proxy.getName();
    final ExpressionProxy expression0 = proxy.getExpression();
    final ExpressionProxy expression = visitExpressionProxy(expression0);
    return mFactory.createParameterBindingProxy(name,
                                                expression);
  }

  @Override
  public PlainEventListProxy visitPlainEventListProxy
    (final PlainEventListProxy proxy)
    throws VisitorException
  {
    final Collection<Proxy> eventIdentifierList0 =
      proxy.getEventIdentifierList();
    final Collection<Proxy> eventIdentifierList =
      cloneProxyCollection(eventIdentifierList0);
    return mFactory.createPlainEventListProxy(eventIdentifierList);
  }

  @Override
  public PointGeometryProxy visitPointGeometryProxy
    (final PointGeometryProxy proxy)
    throws VisitorException
  {
    final Point2D point = proxy.getPoint();
    return mFactory.createPointGeometryProxy(point);
  }

  @Override
  public Proxy visitProxy
    (final Proxy proxy)
    throws VisitorException
  {
    return (Proxy) proxy.acceptVisitor(this);
  }

  @Override
  public QualifiedIdentifierProxy visitQualifiedIdentifierProxy
    (final QualifiedIdentifierProxy proxy)
    throws VisitorException
  {
    final String plainText = proxy.getPlainText();
    final IdentifierProxy baseIdentifier0 = proxy.getBaseIdentifier();
    final IdentifierProxy baseIdentifier =
      visitIdentifierProxy(baseIdentifier0);
    final IdentifierProxy componentIdentifier0 =
      proxy.getComponentIdentifier();
    final IdentifierProxy componentIdentifier =
      visitIdentifierProxy(componentIdentifier0);
    return mFactory.createQualifiedIdentifierProxy(plainText,
                                                   baseIdentifier,
                                                   componentIdentifier);
  }

  @Override
  public SimpleComponentProxy visitSimpleComponentProxy
    (final SimpleComponentProxy proxy)
    throws VisitorException
  {
    final IdentifierProxy identifier0 = proxy.getIdentifier();
    final IdentifierProxy identifier = visitIdentifierProxy(identifier0);
    final ComponentKind kind = proxy.getKind();
    final GraphProxy graph0 = proxy.getGraph();
    final GraphProxy graph = visitGraphProxy(graph0);
    final Map<String,String> attributes = proxy.getAttributes();
    return mFactory.createSimpleComponentProxy(identifier,
                                               kind,
                                               graph,
                                               attributes);
  }

  @Override
  public SimpleExpressionProxy visitSimpleExpressionProxy
    (final SimpleExpressionProxy proxy)
    throws VisitorException
  {
    return (SimpleExpressionProxy) proxy.acceptVisitor(this);
  }

  @Override
  public SimpleIdentifierProxy visitSimpleIdentifierProxy
    (final SimpleIdentifierProxy proxy)
    throws VisitorException
  {
    final String plainText = proxy.getPlainText();
    final String name = proxy.getName();
    return mFactory.createSimpleIdentifierProxy(plainText,
                                                name);
  }

  @Override
  public SimpleNodeProxy visitSimpleNodeProxy
    (final SimpleNodeProxy proxy)
    throws VisitorException
  {
    final String name = proxy.getName();
    final PlainEventListProxy propositions0 = proxy.getPropositions();
    final PlainEventListProxy propositions =
      visitPlainEventListProxy(propositions0);
    final Map<String,String> attributes = proxy.getAttributes();
    final boolean initial = proxy.isInitial();
    final PointGeometryProxy pointGeometry0 = proxy.getPointGeometry();
    final PointGeometryProxy pointGeometry =
      pointGeometry0 == null ? null : visitPointGeometryProxy(pointGeometry0);
    final PointGeometryProxy initialArrowGeometry0 =
      proxy.getInitialArrowGeometry();
    final PointGeometryProxy initialArrowGeometry =
      initialArrowGeometry0 == null ? null : visitPointGeometryProxy(initialArrowGeometry0);
    final LabelGeometryProxy labelGeometry0 = proxy.getLabelGeometry();
    final LabelGeometryProxy labelGeometry =
      labelGeometry0 == null ? null : visitLabelGeometryProxy(labelGeometry0);
    return mFactory.createSimpleNodeProxy(name,
                                          propositions,
                                          attributes,
                                          initial,
                                          pointGeometry,
                                          initialArrowGeometry,
                                          labelGeometry);
  }

  @Override
  public SplineGeometryProxy visitSplineGeometryProxy
    (final SplineGeometryProxy proxy)
    throws VisitorException
  {
    final Collection<Point2D> points = proxy.getPoints();
    final SplineKind kind = proxy.getKind();
    return mFactory.createSplineGeometryProxy(points,
                                              kind);
  }

  @Override
  public UnaryExpressionProxy visitUnaryExpressionProxy
    (final UnaryExpressionProxy proxy)
    throws VisitorException
  {
    final String plainText = proxy.getPlainText();
    final UnaryOperator operator = proxy.getOperator();
    final SimpleExpressionProxy subTerm0 = proxy.getSubTerm();
    final SimpleExpressionProxy subTerm =
      visitSimpleExpressionProxy(subTerm0);
    return mFactory.createUnaryExpressionProxy(plainText,
                                               operator,
                                               subTerm);
  }

  @Override
  public VariableComponentProxy visitVariableComponentProxy
    (final VariableComponentProxy proxy)
    throws VisitorException
  {
    final IdentifierProxy identifier0 = proxy.getIdentifier();
    final IdentifierProxy identifier = visitIdentifierProxy(identifier0);
    final SimpleExpressionProxy type0 = proxy.getType();
    final SimpleExpressionProxy type = visitSimpleExpressionProxy(type0);
    final SimpleExpressionProxy initialStatePredicate0 =
      proxy.getInitialStatePredicate();
    final SimpleExpressionProxy initialStatePredicate =
      visitSimpleExpressionProxy(initialStatePredicate0);
    final Collection<VariableMarkingProxy> variableMarkings0 =
      proxy.getVariableMarkings();
    final Collection<VariableMarkingProxy> variableMarkings =
      cloneProxyCollection(variableMarkings0);
    return mFactory.createVariableComponentProxy(identifier,
                                                 type,
                                                 initialStatePredicate,
                                                 variableMarkings);
  }

  @Override
  public VariableMarkingProxy visitVariableMarkingProxy
    (final VariableMarkingProxy proxy)
    throws VisitorException
  {
    final IdentifierProxy proposition0 = proxy.getProposition();
    final IdentifierProxy proposition = visitIdentifierProxy(proposition0);
    final SimpleExpressionProxy predicate0 = proxy.getPredicate();
    final SimpleExpressionProxy predicate =
      visitSimpleExpressionProxy(predicate0);
    return mFactory.createVariableMarkingProxy(proposition,
                                               predicate);
  }


  //#########################################################################
  //# Auxiliary Methods
  private NodeProxy lookupNodeProxy(final NodeProxy orig)
    throws VisitorException
  {
    if (mNodeMap == null) {
      return orig;
    } else {
      final String name = orig.getName();
      NodeProxy node = mNodeMap.get(name);
      if (node == null) {
        node = visitNodeProxy(orig);
        mNodeMap.put(name, node);
      }
      return node;
    }
  }

  private Collection<NodeProxy> lookupNodeProxyCollection
    (final Collection<? extends NodeProxy> orig)
    throws VisitorException
  {
    final Collection<NodeProxy> result = new LinkedList<NodeProxy>();
    for (final NodeProxy orignode : orig) {
      final NodeProxy resnode = lookupNodeProxy(orignode);
      result.add(resnode);
    }
    return result;
  }

  private <P extends Proxy>
  Collection<P> cloneProxyCollection(final Collection<P> orig)
    throws VisitorException
  {
    final Collection<Proxy> result = new LinkedList<Proxy>();
    for (final Proxy origelem : orig) {
      final Proxy reselem = (Proxy) origelem.acceptVisitor(this);
      result.add(reselem);
    }
    final Collection<?> precast = result;
    @SuppressWarnings("unchecked")
    Collection<P> cast = (Collection<P>) precast;
    return cast;
  }


  //#########################################################################
  //# Data Members
  private final ModuleProxyFactory mFactory;
  private Map<String,NodeProxy> mNodeMap;

}

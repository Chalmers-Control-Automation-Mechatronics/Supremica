//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# Copyright (C) 2004-2015 Robi Malik
//###########################################################################
//# This file is part of Waters.
//# Waters is free software: you can redistribute it and/or modify it under
//# the terms of the GNU General Public License as published by the Free
//# Software Foundation, either version 2 of the License, or (at your option)
//# any later version.
//# Waters is distributed in the hope that it will be useful, but WITHOUT ANY
//# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
//# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
//# details.
//# You should have received a copy of the GNU General Public License along
//# with Waters. If not, see <http://www.gnu.org/licenses/>.
//#
//# Linking Waters statically or dynamically with other modules is making a
//# combined work based on Waters. Thus, the terms and conditions of the GNU
//# General Public License cover the whole combination.
//# In addition, as a special exception, the copyright holders of Waters give
//# you permission to combine Waters with code included in the standard
//# release of Supremica under the Supremica Software License Agreement (or
//# modified versions of such code, with unchanged license). You may copy and
//# distribute such a system following the terms of the GNU GPL for Waters and
//# the licenses of the other code concerned.
//# Note that people who make modified versions of Waters are not obligated to
//# grant this special exception for their modified versions; it is their
//# choice whether to do so. The GNU General Public License gives permission
//# to release a modified version without this exception; this exception also
//# makes it possible to release a modified version which carries forward this
//# exception.
//###########################################################################

package net.sourceforge.waters.model.marshaller;

import java.io.File;
import java.io.IOException;
import java.net.URI;

import net.sourceforge.waters.model.base.WatersException;

import org.xml.sax.SAXParseException;


/**
 * An exception indicating that reading or importing Waters data structures
 * from a file has failed. This exception is typically used to wrap
 * exceptions generated by other packages into a {@link WatersException}.
 *
 * @author Robi Malik
 */

public class WatersUnmarshalException extends WatersException {

  //#########################################################################
  //# Constructors
  /**
   * Constructs a new exception with <CODE>null</CODE> as its detail message.
   */
  public WatersUnmarshalException()
  {
  }

  /**
   * Constructs a new exception with the specified cause. The detail
   * message will be <CODE>(cause==null ? null : cause.toString())</CODE>
   * (which typically contains the class and detail message of cause).
   */
  public WatersUnmarshalException(final Throwable cause)
  {
    super(cause);
  }

  /**
   * Constructs a new exception with the specified detail message.
   */
  public WatersUnmarshalException(final String message)
  {
    super(message);
  }

  /**
   * Constructs a new exception with the specified detail message and cause.
   */
  public WatersUnmarshalException(final String message,
                                  final Throwable cause)
  {
    super(message, cause);
  }

  /**
   * Constructs a new exception indicating that the specified URI
   * cannot be accessed.
   */
  public WatersUnmarshalException(final URI uri)
  {
    mCulprit = uri.toString();
  }

  /**
   * Constructs a new exception indicating that the specified URI
   * cannot be accessed, with a specified cause.
   */
  public WatersUnmarshalException(final URI uri, final Throwable cause)
  {
    super(cause);
    mCulprit = uri.toString();
  }

  /**
   * Constructs a new exception indicating that the specified file
   * cannot be loaded.
   */
  public WatersUnmarshalException(final File filename)
  {
    mCulprit = filename.toString();
  }

  /**
   * Constructs a new exception indicating that the specified file
   * cannot be loaded, with a specified cause.
   */
  public WatersUnmarshalException(final File filename, final Throwable cause)
  {
    super(cause);
    mCulprit = filename.toString();
  }


  //#########################################################################
  //# Overrides for java.lang.Throwable
  @Override
  public String getMessage()
  {
    Throwable cause = this;
    while (cause.getCause() != null) {
      cause = cause.getCause();
    }
    if (cause instanceof IOException) {
      final String msg = cause.getMessage();
      if (msg != null) {
        return msg;
      }
    } else if (cause instanceof SAXParseException) {
      final String msg = cause.getMessage();
      if (msg != null) {
        final StringBuilder buffer = new StringBuilder();
        final SAXParseException saxCause = (SAXParseException) cause;
        final String sysid = saxCause.getSystemId();
        if (sysid != null) {
          if (sysid.startsWith("file:")) {
            buffer.append("In file ");
            buffer.append(sysid.substring(5));
          } else {
            buffer.append("At ");
            buffer.append(sysid);
          }
        }
        final int lineno = saxCause.getLineNumber();
        if (lineno > 0) {
          buffer.append(", line ");
          buffer.append(lineno);
        }
        buffer.append(": ");
        buffer.append(msg.replaceAll(":", ""));
        return buffer.toString();
      }
    }
    if (mCulprit != null) {
      return "Failed to open '" + mCulprit + "'!";
    }
    return super.getMessage();
  }


  //#########################################################################
  //# Data Members
  private String mCulprit;


  //#########################################################################
  //# Static Class Variables
  public static final long serialVersionUID = 1;

}









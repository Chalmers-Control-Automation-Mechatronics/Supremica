//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.model.marshaller
//# CLASS:   WatersUnmarshalException
//###########################################################################
//# $Id$
//###########################################################################

package net.sourceforge.waters.model.marshaller;

import java.io.File;
import java.io.IOException;
import java.net.URI;

import net.sourceforge.waters.model.base.WatersException;

import org.xml.sax.SAXParseException;


/**
 * An exception indicating that reading or importing Waters data structures
 * from a file has failed. This exception is typically used to wrap
 * exceptions generated by other packages into a {@link WatersException}.
 *
 * @author Robi Malik
 */

public class WatersUnmarshalException extends WatersException {

  //#########################################################################
  //# Constructors
  /**
   * Constructs a new exception with <CODE>null</CODE> as its detail message.
   */
  public WatersUnmarshalException()
  {
  }

  /**
   * Constructs a new exception with the specified cause. The detail
   * message will be <CODE>(cause==null ? null : cause.toString())</CODE>
   * (which typically contains the class and detail message of cause).
   */
  public WatersUnmarshalException(final Throwable cause)
  {
    super(cause);
  }

  /**
   * Constructs a new exception with the specified detail message.
   */
  public WatersUnmarshalException(final String message)
  {
    super(message);
  }

  /**
   * Constructs a new exception with the specified detail message and cause.
   */
  public WatersUnmarshalException(final String message,
                                  final Throwable cause)
  {
    super(message, cause);
  }

  /**
   * Constructs a new exception indicating that the specified URI
   * cannot be accessed.
   */
  public WatersUnmarshalException(final URI uri)
  {
    mCulprit = uri.toString();
  }

  /**
   * Constructs a new exception indicating that the specified URI
   * cannot be accessed, with a specified cause.
   */
  public WatersUnmarshalException(final URI uri, final Throwable cause)
  {
    super(cause);
    mCulprit = uri.toString();
  }

  /**
   * Constructs a new exception indicating that the specified file
   * cannot be loaded.
   */
  public WatersUnmarshalException(final File filename)
  {
    mCulprit = filename.toString();
  }

  /**
   * Constructs a new exception indicating that the specified file
   * cannot be loaded, with a specified cause.
   */
  public WatersUnmarshalException(final File filename, final Throwable cause)
  {
    super(cause);
    mCulprit = filename.toString();
  }


  //#########################################################################
  //# Overrides for java.lang.Throwable
  @Override
  public String getMessage()
  {
    Throwable cause = this;
    while (cause.getCause() != null) {
      cause = cause.getCause();
    }
    if (cause instanceof IOException) {
      final String msg = cause.getMessage();
      if (msg != null) {
        return msg;
      }
    } else if (cause instanceof SAXParseException) {
      final String msg = cause.getMessage();
      if (msg != null) {
        final StringBuffer buffer = new StringBuffer();
        final SAXParseException saxCause = (SAXParseException) cause;
        final String sysid = saxCause.getSystemId();
        if (sysid != null) {
          if (sysid.startsWith("file:")) {
            buffer.append("In file ");
            buffer.append(sysid.substring(5));
          } else {
            buffer.append("At ");
            buffer.append(sysid);
          }
        }
        final int lineno = saxCause.getLineNumber();
        if (lineno > 0) {
          buffer.append(", line ");
          buffer.append(lineno);
        }
        buffer.append(": ");
        buffer.append(msg.replaceAll(":", ""));
        return buffer.toString();
      }
    }
    if (mCulprit != null) {
      return "Failed to open '" + mCulprit + "'!";
    }
    return super.getMessage();
  }


  //#########################################################################
  //# Data Members
  private String mCulprit;


  //#########################################################################
  //# Static Class Variables
  public static final long serialVersionUID = 1;

}

//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# Copyright (C) 2004-2018 Robi Malik
//###########################################################################
//# This file is part of Waters.
//# Waters is free software: you can redistribute it and/or modify it under
//# the terms of the GNU General Public License as published by the Free
//# Software Foundation, either version 2 of the License, or (at your option)
//# any later version.
//# Waters is distributed in the hope that it will be useful, but WITHOUT ANY
//# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
//# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
//# details.
//# You should have received a copy of the GNU General Public License along
//# with Waters. If not, see <http://www.gnu.org/licenses/>.
//#
//# Linking Waters statically or dynamically with other modules is making a
//# combined work based on Waters. Thus, the terms and conditions of the GNU
//# General Public License cover the whole combination.
//# In addition, as a special exception, the copyright holders of Waters give
//# you permission to combine Waters with code included in the standard
//# release of Supremica under the Supremica Software License Agreement (or
//# modified versions of such code, with unchanged license). You may copy and
//# distribute such a system following the terms of the GNU GPL for Waters and
//# the licenses of the other code concerned.
//# Note that people who make modified versions of Waters are not obligated to
//# grant this special exception for their modified versions; it is their
//# choice whether to do so. The GNU General Public License gives permission
//# to release a modified version without this exception; this exception also
//# makes it possible to release a modified version which carries forward this
//# exception.
//###########################################################################

package net.sourceforge.waters.model.compiler.efsm;

import java.util.Map;

import net.sourceforge.waters.model.base.ProxyTools;
import net.sourceforge.waters.model.compiler.constraint.ConstraintList;
import net.sourceforge.waters.model.module.EventDeclProxy;
import net.sourceforge.waters.model.module.IdentifierProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyFactory;
import net.sourceforge.waters.model.module.QualifiedIdentifierProxy;
import net.sourceforge.waters.plain.module.ModuleElementFactory;
import net.sourceforge.waters.xsd.base.EventKind;
import net.sourceforge.waters.xsd.module.ScopeKind;


/**
 * A compiler-internal representation of an atomic event in a system of
 * synchronised EFSMs. This class represents the actual events generated by
 * the compiler. Each EFSM event is associated with an
 * {@link EFSMEventDeclaration} representing the event declaration it was
 * generated from and a normalised guard expression ({@link ConstraintList})
 * resulting from splitting the original guards.
 *
 * @see EFSMCompiler
 * @author Robi Malik
 */

class EFSMEventInstance implements Comparable<EFSMEventInstance> {

  //#########################################################################
  //# Constructor
  EFSMEventInstance(final EFSMEventDeclaration decl)
  {
    this(decl, ConstraintList.TRUE);
  }

  EFSMEventInstance(final EFSMEventDeclaration decl,
                    final ConstraintList ga)
  {
    mEFSMEventDecl = decl;
    mGuardedActions = ga;
  }


  //#########################################################################
  //# Simple Access
  EFSMEventDeclaration getEFSMEventDeclaration()
  {
    return mEFSMEventDecl;
  }

  ConstraintList getGuardedActions()
  {
    return mGuardedActions;
  }

  void setSuffix(final String suffix)
  {
    mSuffix = suffix;
  }


  //#########################################################################
  //# Interface java.util.Comparable<EFSMEventInstance>
  @Override
  public int compareTo(final EFSMEventInstance inst)
  {
    return ProxyTools.compare(mSuffix, inst.mSuffix);
  }


  //#########################################################################
  //# Event Compilation
  EventDeclProxy createEventDeclProxy(final ModuleProxyFactory factory)
  {
    final IdentifierProxy ident = createIdentifier(factory);
    final EventDeclProxy source = mEFSMEventDecl.getEventDeclProxy();
    final EventKind kind = source.getKind();
    final boolean observable = source.isObservable();
    final ScopeKind scope = source.getScope();
    final Map<String,String> attribs = source.getAttributes();
    return factory.createEventDeclProxy
      (ident, kind, observable, scope, null, null, attribs);
  }

  IdentifierProxy createIdentifier(final ModuleProxyFactory factory)
  {
    final EventDeclProxy source = mEFSMEventDecl.getEventDeclProxy();
    final IdentifierProxy sourceIdent = source.getIdentifier();
    return appendSuffix(factory, sourceIdent);
  }


  //#########################################################################
  //# Auxiliary Methods
  private IdentifierProxy appendSuffix(final ModuleProxyFactory factory,
                                       final IdentifierProxy ident)
  {
    final ModuleProxyCloner cloner = factory.getCloner();
    if (ident instanceof QualifiedIdentifierProxy) {
      final QualifiedIdentifierProxy qual = (QualifiedIdentifierProxy) ident;
      final IdentifierProxy base = qual.getBaseIdentifier();
      final IdentifierProxy comp = qual.getComponentIdentifier();
      final IdentifierProxy clonedBase =
        (IdentifierProxy) cloner.getClone(base);
      final IdentifierProxy clonedComp = appendSuffix(factory, comp);
      return factory.createQualifiedIdentifierProxy(clonedBase, clonedComp);
    } else if (mSuffix != null && mSuffix.length() > 0) {
      final IdentifierProxy base = (IdentifierProxy) cloner.getClone(ident);
      final IdentifierProxy comp =
        factory.createSimpleIdentifierProxy(mSuffix);
      return factory.createQualifiedIdentifierProxy(base, comp);
    } else {
      return (IdentifierProxy) cloner.getClone(ident);
    }
  }


  //#########################################################################
  //# Debugging
  @Override
  public String toString()
  {
    if (mSuffix == null) {
      final EventDeclProxy decl = mEFSMEventDecl.getEventDeclProxy();
      final IdentifierProxy ident = decl.getIdentifier();
      return ident + ".*";
    } else {
      final ModuleProxyFactory factory = ModuleElementFactory.getInstance();
      final IdentifierProxy ident = createIdentifier(factory);
      return ident.toString();
    }
  }


  //#########################################################################
  //# Data Members
  private final EFSMEventDeclaration mEFSMEventDecl;
  private final ConstraintList mGuardedActions;
  private String mSuffix;

}

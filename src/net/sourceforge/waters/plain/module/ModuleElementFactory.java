//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################
//# Copyright (C) 2004-2015 Robi Malik
//###########################################################################
//# This file is part of Waters.
//# Waters is free software: you can redistribute it and/or modify it under
//# the terms of the GNU General Public License as published by the Free
//# Software Foundation, either version 2 of the License, or (at your option)
//# any later version.
//# Waters is distributed in the hope that it will be useful, but WITHOUT ANY
//# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
//# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
//# details.
//# You should have received a copy of the GNU General Public License along
//# with Waters. If not, see <http://www.gnu.org/licenses/>.
//#
//# Linking Waters statically or dynamically with other modules is making a
//# combined work based on Waters. Thus, the terms and conditions of the GNU
//# General Public License cover the whole combination.
//# In addition, as a special exception, the copyright holders of Waters give
//# you permission to combine Waters with code included in the standard
//# release of Supremica under the Supremica Software License Agreement (or
//# modified versions of such code, with unchanged license). You may copy and
//# distribute such a system following the terms of the GNU GPL for Waters and
//# the licenses of the other code concerned.
//# Note that people who make modified versions of Waters are not obligated to
//# grant this special exception for their modified versions; it is their
//# choice whether to do so. The GNU General Public License gives permission
//# to release a modified version without this exception; this exception also
//# makes it possible to release a modified version which carries forward this
//# exception.
//###########################################################################

package net.sourceforge.waters.plain.module;

import java.awt.Color;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.net.URI;
import java.util.Collection;
import java.util.Map;

import net.sourceforge.waters.model.base.Proxy;
import net.sourceforge.waters.model.expr.BinaryOperator;
import net.sourceforge.waters.model.expr.UnaryOperator;
import net.sourceforge.waters.model.module.BinaryExpressionProxy;
import net.sourceforge.waters.model.module.BoxGeometryProxy;
import net.sourceforge.waters.model.module.ColorGeometryProxy;
import net.sourceforge.waters.model.module.ConstantAliasProxy;
import net.sourceforge.waters.model.module.EdgeProxy;
import net.sourceforge.waters.model.module.EventDeclProxy;
import net.sourceforge.waters.model.module.ExpressionProxy;
import net.sourceforge.waters.model.module.GraphProxy;
import net.sourceforge.waters.model.module.GuardActionBlockProxy;
import net.sourceforge.waters.model.module.IdentifierProxy;
import net.sourceforge.waters.model.module.LabelBlockProxy;
import net.sourceforge.waters.model.module.LabelGeometryProxy;
import net.sourceforge.waters.model.module.ModuleProxy;
import net.sourceforge.waters.model.module.ModuleProxyCloner;
import net.sourceforge.waters.model.module.ModuleProxyFactory;
import net.sourceforge.waters.model.module.NodeProxy;
import net.sourceforge.waters.model.module.ParameterBindingProxy;
import net.sourceforge.waters.model.module.PlainEventListProxy;
import net.sourceforge.waters.model.module.PointGeometryProxy;
import net.sourceforge.waters.model.module.SimpleExpressionProxy;
import net.sourceforge.waters.model.module.SimpleIdentifierProxy;
import net.sourceforge.waters.model.module.SplineGeometryProxy;
import net.sourceforge.waters.model.module.VariableMarkingProxy;

import net.sourceforge.waters.xsd.base.ComponentKind;
import net.sourceforge.waters.xsd.base.EventKind;
import net.sourceforge.waters.xsd.module.AnchorPosition;
import net.sourceforge.waters.xsd.module.ScopeKind;
import net.sourceforge.waters.xsd.module.SplineKind;


public class ModuleElementFactory
  implements ModuleProxyFactory
{

  //#########################################################################
  //# Static Class Methods
  /**
   * Gets the single instance of this class.
   */
  public static ModuleElementFactory getInstance()
  {
    return INSTANCE;
  }

  /**
   * Gets the cloning visitor that can convert Module objects from
   * arbitrary implementations into this implementation.
   */
  public static ModuleProxyCloner getCloningInstance()
  {
    if (CLONING_INSTANCE == null) {
      CLONING_INSTANCE = new ModuleProxyCloner(INSTANCE);
    }
    return CLONING_INSTANCE;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.ModuleProxyFactory
  public ModuleProxyCloner getCloner()
  {
    return getCloningInstance();
  }

  public BinaryExpressionElement createBinaryExpressionProxy
      (final String plainText,
       final BinaryOperator operator,
       final SimpleExpressionProxy left,
       final SimpleExpressionProxy right)
  {
    return new BinaryExpressionElement(plainText,
                                       operator,
                                       left,
                                       right);
  }

  public BinaryExpressionElement createBinaryExpressionProxy
      (final BinaryOperator operator,
       final SimpleExpressionProxy left,
       final SimpleExpressionProxy right)
  {
    return new BinaryExpressionElement(operator,
                                       left,
                                       right);
  }

  public BoxGeometryElement createBoxGeometryProxy
      (final Rectangle2D rectangle)
  {
    return new BoxGeometryElement(rectangle);
  }

  public ColorGeometryElement createColorGeometryProxy
      (final Collection<? extends Color> colorSet)
  {
    return new ColorGeometryElement(colorSet);
  }

  public ColorGeometryElement createColorGeometryProxy()
  {
    return new ColorGeometryElement();
  }

  public ConstantAliasElement createConstantAliasProxy
      (final IdentifierProxy identifier,
       final ExpressionProxy expression,
       final ScopeKind scope)
  {
    return new ConstantAliasElement(identifier,
                                    expression,
                                    scope);
  }

  public ConstantAliasElement createConstantAliasProxy
      (final IdentifierProxy identifier,
       final ExpressionProxy expression)
  {
    return new ConstantAliasElement(identifier,
                                    expression);
  }

  public EdgeElement createEdgeProxy
      (final NodeProxy source,
       final NodeProxy target,
       final LabelBlockProxy labelBlock,
       final GuardActionBlockProxy guardActionBlock,
       final SplineGeometryProxy geometry,
       final PointGeometryProxy startPoint,
       final PointGeometryProxy endPoint)
  {
    return new EdgeElement(source,
                           target,
                           labelBlock,
                           guardActionBlock,
                           geometry,
                           startPoint,
                           endPoint);
  }

  public EdgeElement createEdgeProxy()
  {
    return new EdgeElement();
  }

  public EnumSetExpressionElement createEnumSetExpressionProxy
      (final String plainText,
       final Collection<? extends SimpleIdentifierProxy> items)
  {
    return new EnumSetExpressionElement(plainText,
                                        items);
  }

  public EnumSetExpressionElement createEnumSetExpressionProxy
      (final Collection<? extends SimpleIdentifierProxy> items)
  {
    return new EnumSetExpressionElement(items);
  }

  public EventAliasElement createEventAliasProxy
      (final IdentifierProxy identifier,
       final ExpressionProxy expression)
  {
    return new EventAliasElement(identifier,
                                 expression);
  }

  public EventDeclElement createEventDeclProxy
      (final IdentifierProxy identifier,
       final EventKind kind,
       final boolean observable,
       final ScopeKind scope,
       final Collection<? extends SimpleExpressionProxy> ranges,
       final ColorGeometryProxy colorGeometry,
       final Map<String,String> attributes)
  {
    return new EventDeclElement(identifier,
                                kind,
                                observable,
                                scope,
                                ranges,
                                colorGeometry,
                                attributes);
  }

  public EventDeclElement createEventDeclProxy
      (final IdentifierProxy identifier,
       final EventKind kind)
  {
    return new EventDeclElement(identifier,
                                kind);
  }

  public ForeachElement createForeachProxy
      (final String name,
       final SimpleExpressionProxy range,
       final SimpleExpressionProxy guard,
       final Collection<? extends Proxy> body)
  {
    return new ForeachElement(name,
                              range,
                              guard,
                              body);
  }

  public ForeachElement createForeachProxy
      (final String name,
       final SimpleExpressionProxy range)
  {
    return new ForeachElement(name,
                              range);
  }

  public FunctionCallExpressionElement createFunctionCallExpressionProxy
      (final String plainText,
       final String functionName,
       final Collection<? extends SimpleExpressionProxy> arguments)
  {
    return new FunctionCallExpressionElement(plainText,
                                             functionName,
                                             arguments);
  }

  public FunctionCallExpressionElement createFunctionCallExpressionProxy
      (final String functionName,
       final Collection<? extends SimpleExpressionProxy> arguments)
  {
    return new FunctionCallExpressionElement(functionName,
                                             arguments);
  }

  public GraphElement createGraphProxy
      (final boolean deterministic,
       final LabelBlockProxy blockedEvents,
       final Collection<? extends NodeProxy> nodes,
       final Collection<? extends EdgeProxy> edges)
  {
    return new GraphElement(deterministic,
                            blockedEvents,
                            nodes,
                            edges);
  }

  public GraphElement createGraphProxy()
  {
    return new GraphElement();
  }

  public GroupNodeElement createGroupNodeProxy
      (final String name,
       final PlainEventListProxy propositions,
       final Map<String,String> attributes,
       final Collection<? extends NodeProxy> immediateChildNodes,
       final BoxGeometryProxy geometry)
  {
    return new GroupNodeElement(name,
                                propositions,
                                attributes,
                                immediateChildNodes,
                                geometry);
  }

  public GroupNodeElement createGroupNodeProxy
      (final String name)
  {
    return new GroupNodeElement(name);
  }

  public GuardActionBlockElement createGuardActionBlockProxy
      (final Collection<? extends SimpleExpressionProxy> guards,
       final Collection<? extends BinaryExpressionProxy> actions,
       final LabelGeometryProxy geometry)
  {
    return new GuardActionBlockElement(guards,
                                       actions,
                                       geometry);
  }

  public GuardActionBlockElement createGuardActionBlockProxy()
  {
    return new GuardActionBlockElement();
  }

  public IndexedIdentifierElement createIndexedIdentifierProxy
      (final String plainText,
       final String name,
       final Collection<? extends SimpleExpressionProxy> indexes)
  {
    return new IndexedIdentifierElement(plainText,
                                        name,
                                        indexes);
  }

  public IndexedIdentifierElement createIndexedIdentifierProxy
      (final String name,
       final Collection<? extends SimpleExpressionProxy> indexes)
  {
    return new IndexedIdentifierElement(name,
                                        indexes);
  }

  public InstanceElement createInstanceProxy
      (final IdentifierProxy identifier,
       final String moduleName,
       final Collection<? extends ParameterBindingProxy> bindingList)
  {
    return new InstanceElement(identifier,
                               moduleName,
                               bindingList);
  }

  public InstanceElement createInstanceProxy
      (final IdentifierProxy identifier,
       final String moduleName)
  {
    return new InstanceElement(identifier,
                               moduleName);
  }

  public IntConstantElement createIntConstantProxy
      (final String plainText,
       final int value)
  {
    return new IntConstantElement(plainText,
                                  value);
  }

  public IntConstantElement createIntConstantProxy
      (final int value)
  {
    return new IntConstantElement(value);
  }

  public LabelBlockElement createLabelBlockProxy
      (final Collection<? extends Proxy> eventIdentifierList,
       final LabelGeometryProxy geometry)
  {
    return new LabelBlockElement(eventIdentifierList,
                                 geometry);
  }

  public LabelBlockElement createLabelBlockProxy()
  {
    return new LabelBlockElement();
  }

  public LabelGeometryElement createLabelGeometryProxy
      (final Point2D offset,
       final AnchorPosition anchor)
  {
    return new LabelGeometryElement(offset,
                                    anchor);
  }

  public LabelGeometryElement createLabelGeometryProxy
      (final Point2D offset)
  {
    return new LabelGeometryElement(offset);
  }

  public ModuleElement createModuleProxy
      (final String name,
       final String comment,
       final URI location,
       final Collection<? extends ConstantAliasProxy> constantAliasList,
       final Collection<? extends EventDeclProxy> eventDeclList,
       final Collection<? extends Proxy> eventAliasList,
       final Collection<? extends Proxy> componentList)
  {
    return new ModuleElement(name,
                             comment,
                             location,
                             constantAliasList,
                             eventDeclList,
                             eventAliasList,
                             componentList);
  }

  public ModuleElement createModuleProxy
      (final String name,
       final URI location)
  {
    return new ModuleElement(name,
                             location);
  }

  public ModuleSequenceElement createModuleSequenceProxy
      (final String name,
       final String comment,
       final URI location,
       final Collection<? extends ModuleProxy> modules)
  {
    return new ModuleSequenceElement(name,
                                     comment,
                                     location,
                                     modules);
  }

  public ModuleSequenceElement createModuleSequenceProxy
      (final String name,
       final URI location)
  {
    return new ModuleSequenceElement(name,
                                     location);
  }

  public ParameterBindingElement createParameterBindingProxy
      (final String name,
       final ExpressionProxy expression)
  {
    return new ParameterBindingElement(name,
                                       expression);
  }

  public PlainEventListElement createPlainEventListProxy
      (final Collection<? extends Proxy> eventIdentifierList)
  {
    return new PlainEventListElement(eventIdentifierList);
  }

  public PlainEventListElement createPlainEventListProxy()
  {
    return new PlainEventListElement();
  }

  public PointGeometryElement createPointGeometryProxy
      (final Point2D point)
  {
    return new PointGeometryElement(point);
  }

  public QualifiedIdentifierElement createQualifiedIdentifierProxy
      (final String plainText,
       final IdentifierProxy baseIdentifier,
       final IdentifierProxy componentIdentifier)
  {
    return new QualifiedIdentifierElement(plainText,
                                          baseIdentifier,
                                          componentIdentifier);
  }

  public QualifiedIdentifierElement createQualifiedIdentifierProxy
      (final IdentifierProxy baseIdentifier,
       final IdentifierProxy componentIdentifier)
  {
    return new QualifiedIdentifierElement(baseIdentifier,
                                          componentIdentifier);
  }

  public SimpleComponentElement createSimpleComponentProxy
      (final IdentifierProxy identifier,
       final ComponentKind kind,
       final GraphProxy graph,
       final Map<String,String> attributes)
  {
    return new SimpleComponentElement(identifier,
                                      kind,
                                      graph,
                                      attributes);
  }

  public SimpleComponentElement createSimpleComponentProxy
      (final IdentifierProxy identifier,
       final ComponentKind kind,
       final GraphProxy graph)
  {
    return new SimpleComponentElement(identifier,
                                      kind,
                                      graph);
  }

  public SimpleIdentifierElement createSimpleIdentifierProxy
      (final String plainText,
       final String name)
  {
    return new SimpleIdentifierElement(plainText,
                                       name);
  }

  public SimpleIdentifierElement createSimpleIdentifierProxy
      (final String name)
  {
    return new SimpleIdentifierElement(name);
  }

  public SimpleNodeElement createSimpleNodeProxy
      (final String name,
       final PlainEventListProxy propositions,
       final Map<String,String> attributes,
       final boolean initial,
       final PointGeometryProxy pointGeometry,
       final PointGeometryProxy initialArrowGeometry,
       final LabelGeometryProxy labelGeometry)
  {
    return new SimpleNodeElement(name,
                                 propositions,
                                 attributes,
                                 initial,
                                 pointGeometry,
                                 initialArrowGeometry,
                                 labelGeometry);
  }

  public SimpleNodeElement createSimpleNodeProxy
      (final String name)
  {
    return new SimpleNodeElement(name);
  }

  public SplineGeometryElement createSplineGeometryProxy
      (final Collection<? extends Point2D> points,
       final SplineKind kind)
  {
    return new SplineGeometryElement(points,
                                     kind);
  }

  public SplineGeometryElement createSplineGeometryProxy()
  {
    return new SplineGeometryElement();
  }

  public UnaryExpressionElement createUnaryExpressionProxy
      (final String plainText,
       final UnaryOperator operator,
       final SimpleExpressionProxy subTerm)
  {
    return new UnaryExpressionElement(plainText,
                                      operator,
                                      subTerm);
  }

  public UnaryExpressionElement createUnaryExpressionProxy
      (final UnaryOperator operator,
       final SimpleExpressionProxy subTerm)
  {
    return new UnaryExpressionElement(operator,
                                      subTerm);
  }

  public VariableComponentElement createVariableComponentProxy
      (final IdentifierProxy identifier,
       final SimpleExpressionProxy type,
       final SimpleExpressionProxy initialStatePredicate,
       final Collection<? extends VariableMarkingProxy> variableMarkings)
  {
    return new VariableComponentElement(identifier,
                                        type,
                                        initialStatePredicate,
                                        variableMarkings);
  }

  public VariableComponentElement createVariableComponentProxy
      (final IdentifierProxy identifier,
       final SimpleExpressionProxy type,
       final SimpleExpressionProxy initialStatePredicate)
  {
    return new VariableComponentElement(identifier,
                                        type,
                                        initialStatePredicate);
  }

  public VariableMarkingElement createVariableMarkingProxy
      (final IdentifierProxy proposition,
       final SimpleExpressionProxy predicate)
  {
    return new VariableMarkingElement(proposition,
                                      predicate);
  }


  //#########################################################################
  //# Data Members
  private static final ModuleElementFactory INSTANCE =
    new ModuleElementFactory();
  private static ModuleProxyCloner CLONING_INSTANCE;

}

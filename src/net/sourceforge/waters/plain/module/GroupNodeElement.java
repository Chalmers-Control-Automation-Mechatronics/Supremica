//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################
//# Copyright (C) 2004-2015 Robi Malik
//###########################################################################
//# This file is part of Waters.
//# Waters is free software: you can redistribute it and/or modify it under
//# the terms of the GNU General Public License as published by the Free
//# Software Foundation, either version 2 of the License, or (at your option)
//# any later version.
//# Waters is distributed in the hope that it will be useful, but WITHOUT ANY
//# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
//# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
//# details.
//# You should have received a copy of the GNU General Public License along
//# with Waters. If not, see <http://www.gnu.org/licenses/>.
//#
//# Linking Waters statically or dynamically with other modules is making a
//# combined work based on Waters. Thus, the terms and conditions of the GNU
//# General Public License cover the whole combination.
//# In addition, as a special exception, the copyright holders of Waters give
//# you permission to combine Waters with code included in the standard
//# release of Supremica under the Supremica Software License Agreement (or
//# modified versions of such code, with unchanged license). You may copy and
//# distribute such a system following the terms of the GNU GPL for Waters and
//# the licenses of the other code concerned.
//# Note that people who make modified versions of Waters are not obligated to
//# grant this special exception for their modified versions; it is their
//# choice whether to do so. The GNU General Public License gives permission
//# to release a modified version without this exception; this exception also
//# makes it possible to release a modified version which carries forward this
//# exception.
//###########################################################################

package net.sourceforge.waters.plain.module;

import java.util.Collection;
import java.util.Collections;
import java.util.Map;
import java.util.Set;

import net.sourceforge.waters.model.base.ImmutableOrderedSet;
import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.BoxGeometryProxy;
import net.sourceforge.waters.model.module.GroupNodeProxy;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.NodeProxy;
import net.sourceforge.waters.model.module.PlainEventListProxy;


/**
 * An immutable implementation of the {@link GroupNodeProxy} interface.
 *
 * @author Robi Malik
 */

public final class GroupNodeElement
  extends NodeElement
  implements GroupNodeProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new group node.
   * @param name The name of the new group node.
   * @param propositions The list of propositions of the new group node, or <CODE>null</CODE> if empty.
   * @param attributes The attribute map of the new group node, or <CODE>null</CODE> if empty.
   * @param immediateChildNodes The set of immediate child nodes of the new group node, or <CODE>null</CODE> if empty.
   * @param geometry The geometric information of the new group node, or <CODE>null</CODE>.
   */
  public GroupNodeElement(final String name,
                          final PlainEventListProxy propositions,
                          final Map<String,String> attributes,
                          final Collection<? extends NodeProxy> immediateChildNodes,
                          final BoxGeometryProxy geometry)
  {
    super(name, propositions, attributes);
    if (immediateChildNodes == null) {
      mImmediateChildNodes = Collections.emptySet();
    } else {
      mImmediateChildNodes =
        new ImmutableOrderedSet<NodeProxy>(immediateChildNodes);
    }
    mGeometry = geometry;
  }

  /**
   * Creates a new group node using default values.
   * This constructor creates a group node with
   * an empty list of propositions,
   * an empty attribute map,
   * an empty set of immediate child nodes, and
   * the geometric information set to <CODE>null</CODE>.
   * @param name The name of the new group node.
   */
  public GroupNodeElement(final String name)
  {
    this(name,
         null,
         null,
         null,
         null);
  }


  //#########################################################################
  //# Cloning
  @Override
  public GroupNodeElement clone()
  {
    return (GroupNodeElement) super.clone();
  }


  //#########################################################################
  //# Comparing
  public Class<GroupNodeProxy> getProxyInterface()
  {
    return GroupNodeProxy.class;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitGroupNodeProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.GroupNodeProxy
  public Set<NodeProxy> getImmediateChildNodes()
  {
    return mImmediateChildNodes;
  }

  public BoxGeometryProxy getGeometry()
  {
    return mGeometry;
  }


  //#########################################################################
  //# Data Members
  private final Set<NodeProxy> mImmediateChildNodes;
  private final BoxGeometryProxy mGeometry;


  //#########################################################################
  //# Class Constants
  private static final long serialVersionUID = -275928508278398477L;

}

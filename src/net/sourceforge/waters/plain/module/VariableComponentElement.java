//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################
//# Copyright (C) 2004-2023 Robi Malik
//###########################################################################
//# This file is part of Waters.
//# Waters is free software: you can redistribute it and/or modify it under
//# the terms of the GNU General Public License as published by the Free
//# Software Foundation, either version 2 of the License, or (at your option)
//# any later version.
//# Waters is distributed in the hope that it will be useful, but WITHOUT ANY
//# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
//# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
//# details.
//# You should have received a copy of the GNU General Public License along
//# with Waters. If not, see <http://www.gnu.org/licenses/>.
//#
//# Linking Waters statically or dynamically with other modules is making a
//# combined work based on Waters. Thus, the terms and conditions of the GNU
//# General Public License cover the whole combination.
//# In addition, as a special exception, the copyright holders of Waters give
//# you permission to combine Waters with code included in the standard
//# release of Supremica under the Supremica Software License Agreement (or
//# modified versions of such code, with unchanged license). You may copy and
//# distribute such a system following the terms of the GNU GPL for Waters and
//# the licenses of the other code concerned.
//# Note that people who make modified versions of Waters are not obligated to
//# grant this special exception for their modified versions; it is their
//# choice whether to do so. The GNU General Public License gives permission
//# to release a modified version without this exception; this exception also
//# makes it possible to release a modified version which carries forward this
//# exception.
//###########################################################################

package net.sourceforge.waters.plain.module;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.IdentifierProxy;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.SimpleExpressionProxy;
import net.sourceforge.waters.model.module.VariableComponentProxy;
import net.sourceforge.waters.model.module.VariableMarkingProxy;


/**
 * An immutable implementation of the {@link VariableComponentProxy} interface.
 *
 * @author Robi Malik
 */

public final class VariableComponentElement
  extends ComponentElement
  implements VariableComponentProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new variable.
   * @param identifier The identifier defining the name of the new variable.
   * @param type The range of the new variable.
   * @param initialStatePredicate The initial state predicate of the new variable.
   * @param variableMarkings The list of markings of the new variable, or <CODE>null</CODE> if empty.
   */
  public VariableComponentElement(final IdentifierProxy identifier,
                                  final SimpleExpressionProxy type,
                                  final SimpleExpressionProxy initialStatePredicate,
                                  final Collection<? extends VariableMarkingProxy> variableMarkings)
  {
    super(identifier);
    mType = type;
    mInitialStatePredicate = initialStatePredicate;
    if (variableMarkings == null) {
      mVariableMarkings = Collections.emptyList();
    } else {
      final List<VariableMarkingProxy> variableMarkingsModifiable =
        new ArrayList<VariableMarkingProxy>(variableMarkings);
      mVariableMarkings =
        Collections.unmodifiableList(variableMarkingsModifiable);
    }
  }

  /**
   * Creates a new variable using default values.
   * This constructor creates a variable with
   * an empty list of markings.
   * @param identifier The identifier defining the name of the new variable.
   * @param type The range of the new variable.
   * @param initialStatePredicate The initial state predicate of the new variable.
   */
  public VariableComponentElement(final IdentifierProxy identifier,
                                  final SimpleExpressionProxy type,
                                  final SimpleExpressionProxy initialStatePredicate)
  {
    this(identifier,
         type,
         initialStatePredicate,
         null);
  }


  //#########################################################################
  //# Cloning
  @Override
  public VariableComponentElement clone()
  {
    return (VariableComponentElement) super.clone();
  }


  //#########################################################################
  //# Comparing
  public Class<VariableComponentProxy> getProxyInterface()
  {
    return VariableComponentProxy.class;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitVariableComponentProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.VariableComponentProxy
  public SimpleExpressionProxy getType()
  {
    return mType;
  }

  public SimpleExpressionProxy getInitialStatePredicate()
  {
    return mInitialStatePredicate;
  }

  public List<VariableMarkingProxy> getVariableMarkings()
  {
    return mVariableMarkings;
  }


  //#########################################################################
  //# Data Members
  private final SimpleExpressionProxy mType;
  private final SimpleExpressionProxy mInitialStatePredicate;
  private final List<VariableMarkingProxy> mVariableMarkings;


  //#########################################################################
  //# Class Constants
  private static final long serialVersionUID = -8530615356850480454L;

}

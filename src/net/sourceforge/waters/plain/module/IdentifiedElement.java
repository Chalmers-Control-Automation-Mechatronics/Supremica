//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.plain.module
//# CLASS:   IdentifiedElement
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.plain.module;

import net.sourceforge.waters.model.base.Proxy;
import net.sourceforge.waters.model.module.IdentifiedProxy;
import net.sourceforge.waters.model.module.IdentifierProxy;
import net.sourceforge.waters.plain.base.AbstractNamedElement;


/**
 * An immutable implementation of the {@link IdentifiedProxy} interface.
 *
 * @author Robi Malik
 */

public abstract class IdentifiedElement
  extends AbstractNamedElement
  implements IdentifiedProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new identified object.
   * @param identifier The identifier defining the name of the new identified object.
   */
  protected IdentifiedElement(final IdentifierProxy identifier)
  {
    mIdentifier = identifier;
  }


  //#########################################################################
  //# Cloning
  public IdentifiedElement clone()
  {
    return (IdentifiedElement) super.clone();
  }


  //#########################################################################
  //# Equality and Hashcode
  public boolean equalsByContents(final Proxy partner)
  {
    if (super.equalsByContents(partner)) {
      final IdentifiedProxy downcast = (IdentifiedProxy) partner;
      return
        mIdentifier.equalsByContents(downcast.getIdentifier());
    } else {
      return false;
    }
  }

  public boolean equalsWithGeometry(final Proxy partner)
  {
    if (super.equalsWithGeometry(partner)) {
      final IdentifiedProxy downcast = (IdentifiedProxy) partner;
      return
        mIdentifier.equalsWithGeometry(downcast.getIdentifier());
    } else {
      return false;
    }
  }

  public int hashCodeByContents()
  {
    int result = super.hashCodeByContents();
    result *= 5;
    result += mIdentifier.hashCodeByContents();
    return result;
  }

  public int hashCodeWithGeometry()
  {
    int result = super.hashCodeWithGeometry();
    result *= 5;
    result += mIdentifier.hashCodeWithGeometry();
    return result;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.IdentifiedProxy
  public IdentifierProxy getIdentifier()
  {
    return mIdentifier;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.NamedProxy
  public String getName()
  {
    return mIdentifier.toString();
  }


  //#########################################################################
  //# Data Members
  private final IdentifierProxy mIdentifier;

}

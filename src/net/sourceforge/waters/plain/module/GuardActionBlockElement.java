//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################
//# Copyright (C) 2004-2020 Robi Malik
//###########################################################################
//# This file is part of Waters.
//# Waters is free software: you can redistribute it and/or modify it under
//# the terms of the GNU General Public License as published by the Free
//# Software Foundation, either version 2 of the License, or (at your option)
//# any later version.
//# Waters is distributed in the hope that it will be useful, but WITHOUT ANY
//# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
//# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
//# details.
//# You should have received a copy of the GNU General Public License along
//# with Waters. If not, see <http://www.gnu.org/licenses/>.
//#
//# Linking Waters statically or dynamically with other modules is making a
//# combined work based on Waters. Thus, the terms and conditions of the GNU
//# General Public License cover the whole combination.
//# In addition, as a special exception, the copyright holders of Waters give
//# you permission to combine Waters with code included in the standard
//# release of Supremica under the Supremica Software License Agreement (or
//# modified versions of such code, with unchanged license). You may copy and
//# distribute such a system following the terms of the GNU GPL for Waters and
//# the licenses of the other code concerned.
//# Note that people who make modified versions of Waters are not obligated to
//# grant this special exception for their modified versions; it is their
//# choice whether to do so. The GNU General Public License gives permission
//# to release a modified version without this exception; this exception also
//# makes it possible to release a modified version which carries forward this
//# exception.
//###########################################################################

package net.sourceforge.waters.plain.module;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.BinaryExpressionProxy;
import net.sourceforge.waters.model.module.GuardActionBlockProxy;
import net.sourceforge.waters.model.module.LabelGeometryProxy;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.SimpleExpressionProxy;
import net.sourceforge.waters.plain.base.Element;


/**
 * An immutable implementation of the {@link GuardActionBlockProxy} interface.
 *
 * @author Robi Malik
 */

public final class GuardActionBlockElement
  extends Element
  implements GuardActionBlockProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new guard action block.
   * @param guards The guards of the new guard action block, or <CODE>null</CODE> if empty.
   * @param actions The actions of the new guard action block, or <CODE>null</CODE> if empty.
   * @param geometry The geometry of the new guard action block, or <CODE>null</CODE>.
   */
  public GuardActionBlockElement(final Collection<? extends SimpleExpressionProxy> guards,
                                 final Collection<? extends BinaryExpressionProxy> actions,
                                 final LabelGeometryProxy geometry)
  {
    if (guards == null) {
      mGuards = Collections.emptyList();
    } else {
      final List<SimpleExpressionProxy> guardsModifiable =
        new ArrayList<SimpleExpressionProxy>(guards);
      mGuards =
        Collections.unmodifiableList(guardsModifiable);
    }
    if (actions == null) {
      mActions = Collections.emptyList();
    } else {
      final List<BinaryExpressionProxy> actionsModifiable =
        new ArrayList<BinaryExpressionProxy>(actions);
      mActions =
        Collections.unmodifiableList(actionsModifiable);
    }
    mGeometry = geometry;
  }

  /**
   * Creates a new guard action block using default values.
   * This constructor creates a guard action block with
   * an empty guards,
   * an empty actions, and
   * the geometry set to <CODE>null</CODE>.
   */
  public GuardActionBlockElement()
  {
    this(null,
         null,
         null);
  }


  //#########################################################################
  //# Cloning
  @Override
  public GuardActionBlockElement clone()
  {
    return (GuardActionBlockElement) super.clone();
  }


  //#########################################################################
  //# Comparing
  public Class<GuardActionBlockProxy> getProxyInterface()
  {
    return GuardActionBlockProxy.class;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitGuardActionBlockProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.GuardActionBlockProxy
  public List<SimpleExpressionProxy> getGuards()
  {
    return mGuards;
  }

  public List<BinaryExpressionProxy> getActions()
  {
    return mActions;
  }

  public LabelGeometryProxy getGeometry()
  {
    return mGeometry;
  }


  //#########################################################################
  //# Data Members
  private final List<SimpleExpressionProxy> mGuards;
  private final List<BinaryExpressionProxy> mActions;
  private final LabelGeometryProxy mGeometry;


  //#########################################################################
  //# Class Constants
  private static final long serialVersionUID = -7569059563337147911L;

}

//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.plain.module
//# CLASS:   UnaryExpressionElement
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.plain.module;

import net.sourceforge.waters.model.base.Proxy;
import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.expr.UnaryOperator;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.SimpleExpressionProxy;
import net.sourceforge.waters.model.module.UnaryExpressionProxy;


/**
 * An immutable implementation of the {@link UnaryExpressionProxy} interface.
 *
 * @author Robi Malik
 */

public final class UnaryExpressionElement
  extends SimpleExpressionElement
  implements UnaryExpressionProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new unary expression.
   * @param plainText The original text of the new unary expression, or <CODE>null</CODE>.
   * @param operator The operator of the new unary expression.
   * @param subTerm The subterm of the new unary expression.
   */
  public UnaryExpressionElement(final String plainText,
                                final UnaryOperator operator,
                                final SimpleExpressionProxy subTerm)
  {
    super(plainText);
    mOperator = operator;
    mSubTerm = subTerm;
  }

  /**
   * Creates a new unary expression using default values.
   * This constructor creates an unary expression with
   * the original text set to <CODE>null</CODE>.
   * @param operator The operator of the new unary expression.
   * @param subTerm The subterm of the new unary expression.
   */
  public UnaryExpressionElement(final UnaryOperator operator,
                                final SimpleExpressionProxy subTerm)
  {
    this(null,
         operator,
         subTerm);
  }


  //#########################################################################
  //# Cloning
  public UnaryExpressionElement clone()
  {
    return (UnaryExpressionElement) super.clone();
  }


  //#########################################################################
  //# Equality and Hashcode
  public Class<UnaryExpressionProxy> getProxyInterface()
  {
    return UnaryExpressionProxy.class;
  }

  public boolean equalsByContents(final Proxy partner)
  {
    if (super.equalsByContents(partner)) {
      final UnaryExpressionProxy downcast = (UnaryExpressionProxy) partner;
      return
        mOperator.equals(downcast.getOperator()) &&
        mSubTerm.equalsByContents(downcast.getSubTerm());
    } else {
      return false;
    }
  }

  public boolean equalsWithGeometry(final Proxy partner)
  {
    if (super.equalsWithGeometry(partner)) {
      final UnaryExpressionProxy downcast = (UnaryExpressionProxy) partner;
      return
        mOperator.equals(downcast.getOperator()) &&
        mSubTerm.equalsWithGeometry(downcast.getSubTerm());
    } else {
      return false;
    }
  }

  public int hashCodeByContents()
  {
    int result = super.hashCodeByContents();
    result *= 5;
    result += mOperator.hashCode();
    result *= 5;
    result += mSubTerm.hashCodeByContents();
    return result;
  }

  public int hashCodeWithGeometry()
  {
    int result = super.hashCodeWithGeometry();
    result *= 5;
    result += mOperator.hashCode();
    result *= 5;
    result += mSubTerm.hashCodeWithGeometry();
    return result;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitUnaryExpressionProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.UnaryExpressionProxy
  public UnaryOperator getOperator()
  {
    return mOperator;
  }

  public SimpleExpressionProxy getSubTerm()
  {
    return mSubTerm;
  }


  //#########################################################################
  //# Data Members
  private final UnaryOperator mOperator;
  private final SimpleExpressionProxy mSubTerm;


  //#########################################################################
  //# Class Constants
  private static final long serialVersionUID = -2070705990300031057L;

}

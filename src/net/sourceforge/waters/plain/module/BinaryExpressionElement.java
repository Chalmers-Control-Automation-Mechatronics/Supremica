//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################
//# Copyright (C) 2004-2023 Robi Malik
//###########################################################################
//# This file is part of Waters.
//# Waters is free software: you can redistribute it and/or modify it under
//# the terms of the GNU General Public License as published by the Free
//# Software Foundation, either version 2 of the License, or (at your option)
//# any later version.
//# Waters is distributed in the hope that it will be useful, but WITHOUT ANY
//# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
//# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
//# details.
//# You should have received a copy of the GNU General Public License along
//# with Waters. If not, see <http://www.gnu.org/licenses/>.
//#
//# Linking Waters statically or dynamically with other modules is making a
//# combined work based on Waters. Thus, the terms and conditions of the GNU
//# General Public License cover the whole combination.
//# In addition, as a special exception, the copyright holders of Waters give
//# you permission to combine Waters with code included in the standard
//# release of Supremica under the Supremica Software License Agreement (or
//# modified versions of such code, with unchanged license). You may copy and
//# distribute such a system following the terms of the GNU GPL for Waters and
//# the licenses of the other code concerned.
//# Note that people who make modified versions of Waters are not obligated to
//# grant this special exception for their modified versions; it is their
//# choice whether to do so. The GNU General Public License gives permission
//# to release a modified version without this exception; this exception also
//# makes it possible to release a modified version which carries forward this
//# exception.
//###########################################################################

package net.sourceforge.waters.plain.module;

import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.expr.BinaryOperator;
import net.sourceforge.waters.model.module.BinaryExpressionProxy;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.SimpleExpressionProxy;


/**
 * An immutable implementation of the {@link BinaryExpressionProxy} interface.
 *
 * @author Robi Malik
 */

public final class BinaryExpressionElement
  extends SimpleExpressionElement
  implements BinaryExpressionProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new binary expression.
   * @param plainText The original text of the new binary expression, or <CODE>null</CODE>.
   * @param operator The operator of the new binary expression.
   * @param left The left subterm of the new binary expression.
   * @param right The right subterm of the new binary expression.
   */
  public BinaryExpressionElement(final String plainText,
                                 final BinaryOperator operator,
                                 final SimpleExpressionProxy left,
                                 final SimpleExpressionProxy right)
  {
    super(plainText);
    mOperator = operator;
    mLeft = left;
    mRight = right;
  }

  /**
   * Creates a new binary expression using default values.
   * This constructor creates a binary expression with
   * the original text set to <CODE>null</CODE>.
   * @param operator The operator of the new binary expression.
   * @param left The left subterm of the new binary expression.
   * @param right The right subterm of the new binary expression.
   */
  public BinaryExpressionElement(final BinaryOperator operator,
                                 final SimpleExpressionProxy left,
                                 final SimpleExpressionProxy right)
  {
    this(null,
         operator,
         left,
         right);
  }


  //#########################################################################
  //# Cloning
  @Override
  public BinaryExpressionElement clone()
  {
    return (BinaryExpressionElement) super.clone();
  }


  //#########################################################################
  //# Comparing
  public Class<BinaryExpressionProxy> getProxyInterface()
  {
    return BinaryExpressionProxy.class;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitBinaryExpressionProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.BinaryExpressionProxy
  public BinaryOperator getOperator()
  {
    return mOperator;
  }

  public SimpleExpressionProxy getLeft()
  {
    return mLeft;
  }

  public SimpleExpressionProxy getRight()
  {
    return mRight;
  }


  //#########################################################################
  //# Data Members
  private final BinaryOperator mOperator;
  private final SimpleExpressionProxy mLeft;
  private final SimpleExpressionProxy mRight;


  //#########################################################################
  //# Class Constants
  private static final long serialVersionUID = -892348068208926353L;

}

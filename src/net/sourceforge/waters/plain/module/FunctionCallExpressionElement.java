//# -*- indent-tabs-mode: nil  c-basic-offset: 2 -*-
//###########################################################################
//# PROJECT: Waters
//# PACKAGE: net.sourceforge.waters.plain.module
//# CLASS:   FunctionCallExpressionElement
//###########################################################################
//# $Id$
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//###########################################################################

package net.sourceforge.waters.plain.module;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import net.sourceforge.waters.model.base.ProxyVisitor;
import net.sourceforge.waters.model.base.VisitorException;
import net.sourceforge.waters.model.module.FunctionCallExpressionProxy;
import net.sourceforge.waters.model.module.ModuleProxyVisitor;
import net.sourceforge.waters.model.module.SimpleExpressionProxy;


/**
 * An immutable implementation of the {@link FunctionCallExpressionProxy} interface.
 *
 * @author Robi Malik
 */

public final class FunctionCallExpressionElement
  extends SimpleExpressionElement
  implements FunctionCallExpressionProxy
{

  //#########################################################################
  //# Constructors
  /**
   * Creates a new function call expression.
   * @param plainText The original text of the new function call expression, or <CODE>null</CODE>.
   * @param functionName The function name of the new function call expression.
   * @param arguments The arguments of the new function call expression, or <CODE>null</CODE> if empty.
   */
  public FunctionCallExpressionElement(final String plainText,
                                       final String functionName,
                                       final Collection<? extends SimpleExpressionProxy> arguments)
  {
    super(plainText);
    mFunctionName = functionName;
    if (arguments == null) {
      mArguments = Collections.emptyList();
    } else {
      final List<SimpleExpressionProxy> argumentsModifiable =
        new ArrayList<SimpleExpressionProxy>(arguments);
      mArguments =
        Collections.unmodifiableList(argumentsModifiable);
    }
  }

  /**
   * Creates a new function call expression using default values.
   * This constructor creates a function call expression with
   * the original text set to <CODE>null</CODE>.
   * @param functionName The function name of the new function call expression.
   * @param arguments The arguments of the new function call expression, or <CODE>null</CODE> if empty.
   */
  public FunctionCallExpressionElement(final String functionName,
                                       final Collection<? extends SimpleExpressionProxy> arguments)
  {
    this(null,
         functionName,
         arguments);
  }


  //#########################################################################
  //# Cloning
  @Override
  public FunctionCallExpressionElement clone()
  {
    return (FunctionCallExpressionElement) super.clone();
  }


  //#########################################################################
  //# Comparing
  public Class<FunctionCallExpressionProxy> getProxyInterface()
  {
    return FunctionCallExpressionProxy.class;
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.base.Proxy
  public Object acceptVisitor(final ProxyVisitor visitor)
    throws VisitorException
  {
    final ModuleProxyVisitor downcast = (ModuleProxyVisitor) visitor;
    return downcast.visitFunctionCallExpressionProxy(this);
  }


  //#########################################################################
  //# Interface net.sourceforge.waters.model.module.FunctionCallExpressionProxy
  public String getFunctionName()
  {
    return mFunctionName;
  }

  public List<SimpleExpressionProxy> getArguments()
  {
    return mArguments;
  }


  //#########################################################################
  //# Data Members
  private final String mFunctionName;
  private final List<SimpleExpressionProxy> mArguments;


  //#########################################################################
  //# Class Constants
  private static final long serialVersionUID = 4647733522263092637L;

}

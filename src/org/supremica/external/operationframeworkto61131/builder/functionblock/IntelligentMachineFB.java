package org.supremica.external.operationframeworkto61131.builder.functionblock;

import java.util.Iterator;
import java.util.List;
import java.util.LinkedList;
import java.math.BigInteger;

import org.plcopen.xml.tc6.Project;
import org.supremica.external.operationframeworkto61131.data.FBCallingVars;
import org.supremica.external.operationframeworkto61131.data.FBCallingVarsList;
import org.supremica.external.operationframeworkto61131.data.FBConnection;
import org.supremica.external.operationframeworkto61131.data.Var;
import org.supremica.external.operationframeworkto61131.data.VarList;
import org.supremica.external.operationframeworkto61131.main.Constant;
import org.supremica.external.operationframeworkto61131.util.JAXButil;
import org.supremica.external.operationframeworkto61131.util.log.LogUtil;
import org.supremica.manufacturingtables.xsd.rop.ROP;



/**
 * IntelligentMachineFB.java generates the list of Function Block
 * variable-parameter connection pairs for machines with control system, like
 * robots. The interface of FB for intelligent machine is generated by hard
 * coding all in this class.Connection pairs in the list will be used to
 * generate the graphical connection in FBTypeBuilder.java.
 * 
 * Created: Mar 31, 2009 5:26:53 PM
 * 
 * @author LC
 * @version 1.0
 */
public class IntelligentMachineFB {

	private static LogUtil log = LogUtil.getInstance();

	private final String IOTYPE_INPUT = "Input";

	private final String IOTYPE_OUTPUT = "Output";

	private final int bitsOfBinaryCode = 8;

	/*
	 * The variable list for machine with control system to communicate with PLC
	 * It should contains variable that represent Zone, Operation and
	 * ExteranlComponent State;
	 * 
	 * Caution: the external variable that are added to this list here could be
	 * inconsistent accidently from the variables that are added to pou
	 * interface external variable list.
	 */

	private VarList externalVarList = VarList.getInstance();

	public IntelligentMachineFB() {

	}

	public List<org.supremica.external.operationframeworkto61131.data.FBConnection> getFBConnectionList(
			String machineName, List<Object> listOfCOP,
			Project.Types.Pous.Pou pou) {

		// The input pou is used to check if there is manually connected user
		// connection

		List<BigInteger> listOfOperations = getListOfOperations(machineName,
				listOfCOP);

		int numOfOperations = listOfOperations.size();

		// private String ioType;
		// private Class dataType;
		// private List<String> param;
		// private List<String> variable;
		// private String initValue;

		int i = 1;

		List<org.supremica.external.operationframeworkto61131.data.FBConnection> fbConnectionList = new LinkedList<org.supremica.external.operationframeworkto61131.data.FBConnection>();

		while (i <= numOfOperations) {

			// FBConnection(String inParam,String inVariable,String
			// inIOType,Class inDataType,String inInitValue){

			// A:65 a:97
			int op_letter_int = 64 + i;
			char[] op_letterChar = Character.toChars(op_letter_int);
			String opLetter = String.valueOf(op_letterChar[0]);
			String opId = listOfOperations.get(i - 1).toString();

			// Variable name:C1R1_Op20_exe
			// Param: op_A_execute
			// Input
			String variable_op_number_exe = machineName + "_Op" + opId + "_exe";
			String param_op_letter_execute = "Op_" + opLetter + "_execute";
			fbConnectionList.add(new FBConnection(param_op_letter_execute,
					variable_op_number_exe, this.IOTYPE_INPUT, Boolean.class,
					Boolean.FALSE.toString()));

			// Variable:constant_20
			// Param: Op_A_code
			// Input
			String variable_constant_number = "Constant_" + opId;
			String param_op_code = "Op_" + opLetter + "_code";

			FBConnection constantInt = new FBConnection(param_op_code,
					variable_constant_number, this.IOTYPE_INPUT, Integer.class,
					opId);
			constantInt.setConstant();

			fbConnectionList.add(constantInt);

			// Variable:C1R1_Op20_IL
			// Param: IL_Op_A
			// Input

			String variable_IL = machineName + "_Op" + opId + "_IL";
			String param_IL = "IL_Op_" + opLetter;
			fbConnectionList
					.add(new FBConnection(param_IL, variable_IL,
							this.IOTYPE_INPUT, Boolean.class, Boolean.FALSE
									.toString()));

			// Variable:C1R1_Op20_done
			// Param: Op_A_done
			// Output
			String variable_op_done = machineName + "_Op" + opId + "_done";
			String param_op_done = "Op_" + opLetter + "_done";
			fbConnectionList.add(new FBConnection(param_op_done,
					variable_op_done, this.IOTYPE_OUTPUT, Boolean.class,
					Boolean.FALSE.toString()));

			// Variable:C1R1_Op20_started
			// Param: Op_A_started
			// Output
			String variable_op_started = getOperationStartedVarName(
					machineName, opId);

			String param_op_started = "Op_" + opLetter + "_started";
			fbConnectionList.add(new FBConnection(param_op_started,
					variable_op_started, this.IOTYPE_OUTPUT, Boolean.class,
					Boolean.FALSE.toString()));

			i++;
		}

		int j = 0;

		while (j < bitsOfBinaryCode) {

			// Variable:C1R1_ext_lb2
			// Param:input_2_ext_machine
			// Iutput
			String variable_ext_input = machineName + "_ext_lb_"
					+ String.valueOf(j);
			String param_ext_input = "input_" + j + "_ext_machine";
			fbConnectionList.add(new FBConnection(param_ext_input,
					variable_ext_input, this.IOTYPE_INPUT, Boolean.class,
					Boolean.FALSE.toString()));

			Var param_ext_input_var = new Var(variable_ext_input, false);

			// Variable:C1R1_ext_Ob2
			// Param: output_2_ext_machine
			// Output
			String variable_ext_output = machineName + "_ext_Ob_"
					+ String.valueOf(j);
			String param_ext_output = "output_" + j + "_ext_machine";
			fbConnectionList.add(new FBConnection(param_ext_output,
					variable_ext_output, this.IOTYPE_OUTPUT, Boolean.class,
					Boolean.FALSE.toString()));

			Var variable_ext_output_var = new Var(variable_ext_output, false);

			// TODO add variable to external variable list
			externalVarList.append(param_ext_input_var);
			externalVarList.append(variable_ext_output_var);

			j++;

		}

		// Variable:C1R1_ext_machine_OK
		// Param:ext_machine_OK
		// Iutput
		String variable_ext_machine_ok = machineName + "_ext_machine_OK";
		String param_ext_machine_ok = "ext_machine_OK";
		fbConnectionList.add(new FBConnection(param_ext_machine_ok,
				variable_ext_machine_ok, this.IOTYPE_INPUT, Boolean.class,
				Boolean.FALSE.toString()));

		Var variable_ext_machine_ok_var = new Var(variable_ext_machine_ok,
				false);
		externalVarList.append(variable_ext_machine_ok_var);

		// Variable:C1R1_IL_OK
		// Param:IL_OK
		// Output
		String variable_machine_IL_ok = machineName + "_IL_OK";
		String param_IL_ok = "IL_OK";
		fbConnectionList.add(new FBConnection(param_IL_ok,
				variable_machine_IL_ok, this.IOTYPE_OUTPUT, Boolean.class,
				Boolean.FALSE.toString()));

		Var variable_machine_IL_ok_var = new Var(variable_machine_IL_ok, false);
		externalVarList.append(variable_machine_IL_ok_var);

		return fbConnectionList;
	}

	public List<BigInteger> getListOfOperations(String machineName,
			List<Object> listOfCOP) {

		List<BigInteger> listOfOperation = new LinkedList<BigInteger>();

		Iterator<Object> iter = listOfCOP.iterator();
		while (iter.hasNext()) {
			ROP rop = (ROP) iter.next();

			if (machineName.equalsIgnoreCase(rop.getMachine())) {

				List<org.supremica.manufacturingtables.xsd.rop.Activity> listOfActivity = rop
						.getRelation().getActivity();

				for (org.supremica.manufacturingtables.xsd.rop.Activity activity : listOfActivity) {

					BigInteger operation = activity.getOperation();

					if (operation != null) {

						if (!listOfOperation.contains(operation)) {

							listOfOperation.add(operation);

						}

					}

				}

			}

		}

		return listOfOperation;
	}

	public static String getMachineNameByOperation(String opId,
			List<Object> listOfCOP) {

		Iterator<Object> iter = listOfCOP.iterator();
		while (iter.hasNext()) {
			ROP rop = (ROP) iter.next();

			List<org.supremica.manufacturingtables.xsd.rop.Activity> listOfActivity = rop
					.getRelation().getActivity();

			for (org.supremica.manufacturingtables.xsd.rop.Activity activity : listOfActivity) {

				BigInteger operation = activity.getOperation();

				if (operation != null
						&& operation.toString().equalsIgnoreCase(opId)) {

					return rop.getMachine();

				}

			}

		}

		return null;
	}

	public static String getOperationStartedVarName(String machineName,
			String opId) {

		return machineName + "_Op" + opId + "_started";

	}

	public void doTest() {

		List<Object> COPList;

		String path = "./";
		String configFileName = "config.xml";

		Constant.initialize(path, configFileName);
		LogUtil log = LogUtil.getInstance();

		COPList = JAXButil.getInstance(Constant.COP_XML_CONTEXT)
				.loadXMLFromPath(Constant.XML_FILE_PATH, Constant.COP_PREFIX);

		log.info("NumberOfOperations:"
				+ getListOfOperations("C1R1", COPList).size());

		log.info(" op 21:" + getMachineNameByOperation("21", COPList));

	}

	/*
	 * Return the variable list for machine with control system to communicate
	 * with PLC
	 */
	public VarList getExternalVarList() {

		return this.externalVarList;
	}

	public static FBCallingVarsList getMachineInInitialStateVar(
			String machineName) {

		if (machineName != null && !machineName.isEmpty()) {

			String intelligentMachineInitialPositionVarName = machineName
					+ "_in_inital";

			FBCallingVars callingVars = new FBCallingVars();

			callingVars.setRequestVar(new Var(
					intelligentMachineInitialPositionVarName, Boolean.FALSE));
			callingVars.setFeedbackVar(new Var(
					intelligentMachineInitialPositionVarName, Boolean.FALSE));
			// convertor.xsd.physicalResource.MahineType.ROBOT.class
			// FIXME needed?
			callingVars.setOwnerType(null);
			// It doesn't have any meaning, just replace null to prevent error
			callingVars
					.setTargetState(intelligentMachineInitialPositionVarName);
			// machine name
			callingVars.setEquipmentEntity(machineName);

			FBCallingVarsList callingVarsList = new FBCallingVarsList();
			callingVarsList.append(callingVars);

			return callingVarsList;
		} else {

			return null;
		}

	}

	public static void main(String[] args) {

		IntelligentMachineFB ii = new IntelligentMachineFB();

		ii.doTest();

		// for (int i = 1; i < 200; i++) {
		//
		// char[] ch = Character.toChars(i);
		// System.out.println("code:" + i + ": " + ch[1]);
		// }

	}
}

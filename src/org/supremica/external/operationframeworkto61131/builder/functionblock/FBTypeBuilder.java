package org.supremica.external.operationframeworkto61131.builder.functionblock;

import java.math.BigInteger;
import java.math.BigDecimal;

import java.util.List;
import java.util.LinkedList;
import java.util.ArrayList;

import org.supremica.external.operationframeworkto61131.builder.Builder;
import org.supremica.external.operationframeworkto61131.builder.PouInterfaceBuilder;
import org.supremica.external.operationframeworkto61131.builder.sfc.BlockBuilder;
import org.supremica.external.operationframeworkto61131.data.*;
import org.supremica.external.operationframeworkto61131.layout.common.*;
import org.supremica.external.operationframeworkto61131.layout.sfc.block.*;
import org.supremica.external.operationframeworkto61131.main.Constant;
import org.supremica.external.operationframeworkto61131.util.ReflectionUtil;
import org.supremica.external.operationframeworkto61131.util.StringUtil;
import org.supremica.external.operationframeworkto61131.util.log.LogUtil;



/**
 * FBTypeBuilder.java build the graphical connection from variable-parameter
 * connection pairs generated by DummyMachine.java, IntelligentMachine.java,
 * ZoneFB.java. This class also handles the connection reuse. The returned Pou
 * is in FB.
 * 
 * Created: Mar 31, 2009 5:28:14 PM
 * 
 * @author LC
 * @version 1.0
 */
public class FBTypeBuilder extends Builder {

	// private static LogUtil log = LogUtil.getInstance();

	// they are of the same length, about 12

	private final BigDecimal distanceInVariableToFunctionBlock = Constant.DistanceInVariableToFunctionBlock;

	private org.supremica.manufacturingtables.xsd.fid.FunctionBlocks fid;

	private List<org.plcopen.xml.tc6.Project.Types.Pous.Pou> manualFBPouList;

	private org.supremica.external.operationframeworkto61131.data.VarList localPouInterfaceVarList;

	/*
	 * The variable list for machine with control system to communicate with PLC
	 * It should contains variable that represent Zone, Operation and
	 * ExteranlComponent State
	 */

	private VarList externalVarList = VarList.getInstance();

	public FBTypeBuilder(
			org.supremica.manufacturingtables.xsd.fid.FunctionBlocks fid) {
		super();

		this.fid = fid;

	}

	public void setManualFBPouList(
			List<org.plcopen.xml.tc6.Project.Types.Pous.Pou> _manualFBPouList) {

		this.manualFBPouList = _manualFBPouList;

	}

	// Generate FB instantiation from FID for one machine,
	// Return a list of Pou, each Pou is a FB instantiation, the
	// org.plcopen.xml.tc6.Project.Types.Pous pous should be from the ouput file
	// that generated
	// previously
	public void instantiateFB(String machineName, List<Object> COPList,
			org.plcopen.xml.tc6.Project.Types.Pous pous,
			List<String> pouNameList) {

		Object machineObj = equipmentStateLookUp.getMachine(machineName);

		Boolean hasOwnControlSystem = false;

		// get the attribute hasOwnControlSystem.
		try {
			ReflectionUtil reflectionUtil = new ReflectionUtil();
			Object hasOwnControlSystemObj = reflectionUtil.invokeMethod(
					machineObj, "getHasOwnControlSystem");

			String value = (String) reflectionUtil.invokeMethod(
					hasOwnControlSystemObj, "value");

			// FIXME 'Yes' has to be a contant. find a better way
			if (value.equalsIgnoreCase("Yes")) {

				hasOwnControlSystem = true;
			}

		} catch (Exception e) {

			e.printStackTrace();

			return;

		}

		List<org.plcopen.xml.tc6.Project.Types.Pous.Pou> pouListForFB = new LinkedList<org.plcopen.xml.tc6.Project.Types.Pous.Pou>();

		// For machine with control system.
		if (hasOwnControlSystem) {

			log.debug("Machine with control system:" + machineName);
			instantiateIntelligentMachineFB(machineName, COPList, pous,
					pouNameList);

		} else {
			// For machine without control system.
			// First search the equipment at the top level.

			try {
				ReflectionUtil reflectionUtil = new ReflectionUtil();
				Object equipmentObj = reflectionUtil.invokeMethod(machineObj,
						"getEquipment");

				List equipmentEntityList = (List) reflectionUtil.invokeMethod(
						equipmentObj, "getEquipmentEntity");

				instantiateDummyMachineFB(machineName, equipmentEntityList,
						pous, pouNameList);

			} catch (Exception e) {

				e.printStackTrace();

				return;

			}

		}

		// Add FB pou to pous and pouName to pouNameList
		for (org.plcopen.xml.tc6.Project.Types.Pous.Pou pou : pouListForFB) {

			pous.getPou().add(pou);
			pouNameList.add(pou.getName());
		}

		return;
	}

	public void instantiateZoneFB(
			List<Object> EOPList,
			org.supremica.manufacturingtables.xsd.virtualResourcesV3.VirtualResources virtualResources,
			org.plcopen.xml.tc6.Project.Types.Pous pous,
			List<String> pouNameList) {

		ZoneFB zoneFB = new ZoneFB(Builder.equipmentStateLookUp, EOPList);

		if (virtualResources == null || virtualResources.getZones() == null
				|| virtualResources.getZones().getZone().size() < 1) {

			log.info("No zone FB to be instantiate in virtual resource");
			return;
		}

		for (String zoneName : virtualResources.getZones().getZone()) {

			// use the size of this list to be a part of the FB type name
			List<String> listOfMahinesBookZoneN = zoneFB
					.getListOfMahinesBookZoneN(zoneName);

			if (listOfMahinesBookZoneN.size() < 1) {

				log.info("No machine books zone: " + zoneName);
				continue;
			}

			List<org.supremica.external.operationframeworkto61131.data.FBConnection> fbConnectionList = zoneFB
					.getFBConnectionListForZone(zoneName);

			String functionBlockType = "Zone booking x"
					+ listOfMahinesBookZoneN.size();

			String functionBlockInstanceName = "FB_Zone_" + zoneName;

			// If there is no manual FB connection, the pou will be a newly
			// generated empty one.
			org.plcopen.xml.tc6.Project.Types.Pous.Pou pou = this
					.getManualConnectedPou(this.manualFBPouList,
							functionBlockInstanceName);

			pous.getPou().add(
					connectVariablesToFunctionBlock(functionBlockType,
							functionBlockInstanceName, pou, fbConnectionList));

			pouNameList.add(functionBlockInstanceName);

		}

	}

	public void instantiateIntelligentMachineFB(String machineName,
			List<Object> listOfCOP,
			org.plcopen.xml.tc6.Project.Types.Pous pous,
			List<String> pouNameList) {

		IntelligentMachineFB ingelligentMachineFB = new IntelligentMachineFB();
		// Decide the FB instance name first and check if it exists in the pous
		// FIXME move the prefix and postfix to Constant
		String functionBlockType = "External Machine comm - "
				+ ingelligentMachineFB.getListOfOperations(machineName,
						listOfCOP).size() + " OP";
		String functionBlockInsanceName = "FB_" + machineName + "_"
				+ StringUtil.replaceSpaceWithUnderscore(functionBlockType);

		pouNameList.add(functionBlockInsanceName);

		List<org.supremica.external.operationframeworkto61131.data.FBConnection> fbConnectionList = ingelligentMachineFB
				.getFBConnectionList(machineName, listOfCOP, null,equipmentStateLookUp);
		/*
		 * Only machine with control system needs to communicate with PLC via
		 * the same variable .The externalVarList here contains variables that
		 * are accessible to both external machine and PLC. externalVarList will
		 * be cleared at the beginning for each machine.
		 */
		this.externalVarList = VarList.getInstance();
		this.externalVarList.append(ingelligentMachineFB.getExternalVarList());

		pous.getPou().add(
				connectVariablesToFunctionBlock(functionBlockType,
						functionBlockInsanceName, null, fbConnectionList));

	}

	public void instantiateDummyMachineFB(String machineName,
			List equipmentEntityList,
			org.plcopen.xml.tc6.Project.Types.Pous pous,
			List<String> pouNameList) {

		ReflectionUtil reflectionUtil = new ReflectionUtil();

		// For machine without control system.
		// For each equipment
		try {
			for (Object equipmentEntityObj : equipmentEntityList) {
				// FB type
				String functionBlockType = (String) reflectionUtil
						.invokeMethod(equipmentEntityObj, "getFunctionBlock");

				String equipmentEntityName = (String) reflectionUtil
						.invokeMethod(equipmentEntityObj, "getName");
				log.debug("=====================Dummy Machine:" + machineName);
				log
						.debug("=============EquipmentEntity:"
								+ equipmentEntityName);

				// When a equipment has function block type, it should be
				// instantiated. When there is no function block type, search in
				// the equipment's sub-element
				if (functionBlockType == null) {
					log.debug("==========No Function Block Type");

					Object equipmentObj = reflectionUtil.invokeMethod(
							equipmentEntityObj, "getEquipment", new Object[0]);
					// If there are sub elements, keep searching
					if (equipmentObj != null) {

						List subEquipmentEntityList = (List) reflectionUtil
								.invokeMethod(equipmentObj,
										"getEquipmentEntity", new Object[0]);

						if (subEquipmentEntityList != null) {

							instantiateDummyMachineFB(machineName,
									subEquipmentEntityList, pous, pouNameList);
						}

					}

					// If there is no sub element, continue to the next
					// equipment at same level
					continue;
				} else {

					log.debug("==========Function Type:" + functionBlockType);

				}

				// When a equipment has function block type, it should be
				// instantiated.
				String functionBlockInstanceName = "FB_"
						+ equipmentEntityName
						+ "_"
						+ StringUtil
								.replaceSpaceWithUnderscore(functionBlockType);
				// Get the variable name for request state and feedback state.

				org.supremica.manufacturingtables.xsd.fid.FunctionBlock functionBlock = getFunctionBlockInterface(
						functionBlockType, this.fid);

				if (functionBlock == null) {

					continue;

				} else {

					log.debug("Found function in FID:"
							+ functionBlock.getType());

				}

				// Generate the connection list from DummyMachineFB
				List<org.supremica.external.operationframeworkto61131.data.FBConnection> fbConnectionList = new DummyMachineFB(
						equipmentStateLookUp).getFBConnectionList(machineName,
						equipmentEntityObj, functionBlock);

				// If there is no manual FB connection, the pou will be a newly
				// generated empty one.
				org.plcopen.xml.tc6.Project.Types.Pous.Pou pou = this
						.getManualConnectedPou(this.manualFBPouList,
								functionBlockInstanceName);

				pouNameList.add(functionBlockInstanceName);

				pous.getPou().add(
						connectVariablesToFunctionBlock(functionBlockType,
								functionBlockInstanceName, pou,
								fbConnectionList));

			}

		} catch (Exception e) {

			e.printStackTrace();
			return;
		}

	}

	// Use fbConnectionList to connected FB, handle connection for FB of all
	// types.
	private org.plcopen.xml.tc6.Project.Types.Pous.Pou connectVariablesToFunctionBlock(
			String functionBlockType, String functionBlockInstanceName,
			org.plcopen.xml.tc6.Project.Types.Pous.Pou pou,
			List<FBConnection> fbConnectionList) {

		// to store the variable in pou interface, clear the list before use.
		localPouInterfaceVarList = org.supremica.external.operationframeworkto61131.data.VarList.getInstance();

		Position distance = new Position(this.distanceInVariableToFunctionBlock
				.intValue(), 0);

		org.plcopen.xml.tc6.Body.FBD fbd;
		List<String> fbUserConnectionParamList = new LinkedList<String>();
		org.supremica.external.operationframeworkto61131.layout.sfc.block.Block blockFB = new org.supremica.external.operationframeworkto61131.layout.sfc.block.Block();

		Boolean isUpdating = false;

		// Generate a block for FB
		if (pou == null) {
			//			

			pou = CommonLayoutObject.objectFactory.createProjectTypesPousPou();
			blockFB = generateEmptyBlockForFB(fbConnectionList,
					functionBlockType, functionBlockInstanceName);

			fbd = CommonLayoutObject.objectFactory.createBodyFBD();
		} else {

			blockFB = generateBlockFromExistingPouForFB(fbConnectionList,
					functionBlockType, functionBlockInstanceName, pou);

			if (blockFB == null) {
				return connectVariablesToFunctionBlock(functionBlockType,
						functionBlockInstanceName, null, fbConnectionList);

			}

			if (pou.getBody() != null && pou.getBody().getFBD() != null) {

				fbd = pou.getBody().getFBD();
			} else {

				return connectVariablesToFunctionBlock(functionBlockType,
						functionBlockInstanceName, null, fbConnectionList);
			}

			fbUserConnectionParamList = this
					.getFBUserConnectionParamList(functionBlockType);
			isUpdating = true;
		}

		List<Object> FBDLiveList = fbd.getCommentOrErrorOrConnector();

		Integer longestExpressionLength = 0;

		super.setLastPosition(null);

		for (FBConnection fbConnection : fbConnectionList) {

			// Input connections

			if (fbConnection.getIOType().equalsIgnoreCase(
					org.supremica.manufacturingtables.xsd.fid.IoType.INPUT
							.toString())) {

				List<ConnectionPointIn> inputConIn = generateInputConInList(
						fbConnection, fbUserConnectionParamList, blockFB,
						isUpdating);

				if (inputConIn == null) {

					// When the connection has been connected manually, the
					// outputConOut will be a null list.
					continue;
				}

				// Generate InVariable from FBConnection.Variable and add them
				// to Pou Interface
				List<org.supremica.external.operationframeworkto61131.layout.sfc.InVariable> inVariableList = this
						.generateInVariableFromFBConnection(fbConnection);

				longestExpressionLength = this.connectFBInput(blockFB,
						inVariableList, inputConIn, distance, FBDLiveList,
						longestExpressionLength);

			} else {
				// Output connections

				List<ConnectionPointOut> outputConOut = generateOutputConOutList(
						fbConnection, fbUserConnectionParamList, blockFB,
						isUpdating);

				if (outputConOut == null) {

					// When the connection has been connected manually, the
					// outputConOut will be a null list.
					continue;
				}

				// Generate InVariable from FBConnection.Variable and add them
				// to Pou Interface
				List<org.supremica.external.operationframeworkto61131.layout.sfc.OutVariable> outVariableList = this
						.generateOutVariableFromFBConnection(fbConnection);

				this.connectFBoutput(blockFB, outVariableList, outputConOut,
						distance, FBDLiveList);

			}

		}

		// Add the FB block to pou
		FBDLiveList.add(blockFB.getPLCOpenObject());

		// add the local variables to pou variable list

		org.plcopen.xml.tc6.Project.Types.Pous.Pou.Interface pouInterface = CommonLayoutObject.objectFactory
				.createProjectTypesPousPouInterface();

		if (isUpdating) {
			// add those manually entered variables to local variable list
			pouInterface = pou.getInterface();
			localPouInterfaceVarList.append(PouInterfaceBuilder
					.getVarListFromPouInterface(pouInterface));

		}

		// The interface should contains only variables for the current pou,
		pouInterface = PouInterfaceBuilder.generatePouInterfaceFromVarList(
				localPouInterfaceVarList, null);

		// Add the local pou variable to global variable list, because there
		// could be several FB for one machine and several local pou interface.
		super.addToInterfaceVarList(localPouInterfaceVarList);
		super.resetLocalId();

		// FIXME check if it is still necessary.
		// Add function block as a local var to pou interface
		pouInterface.getLocalVarsOrTempVarsOrInputVars().add(
				PouInterfaceBuilder.getFBLocalVar(functionBlockType,
						functionBlockInstanceName));

		pou.setInterface(pouInterface);

		pou.setName(functionBlockInstanceName);
		pou.setPouType(org.plcopen.xml.tc6.PouType.PROGRAM);
		org.plcopen.xml.tc6.Body body = CommonLayoutObject.objectFactory
				.createBody();
		body.setFBD(fbd);
		pou.setBody(body);

		return pou;
	}

	// Reuse manually entered FB.
	// Remove components that are connected to system connection , keep
	// components that are connected to user connection.
	private Block generateBlockFromExistingPouForFB(
			List<FBConnection> fbConnectionList, String functionBlockType,
			String functionBlockInstanceName,
			org.plcopen.xml.tc6.Project.Types.Pous.Pou pou) {

		// remove existing sys connection's
		Boolean isTemplateCleaned = this.cleanTemplate(pou, functionBlockType,
				functionBlockInstanceName);

		// If failed to remove the system connection from the manual FB, return
		// a null and FB reuse will be canceled.
		if (!isTemplateCleaned) {

			return null;
		}

		org.supremica.external.operationframeworkto61131.util.PLCopenXMLParser pouParser = new org.supremica.external.operationframeworkto61131.util.PLCopenXMLParser(
				pou.getBody().getFBD().getCommentOrErrorOrConnector());
		org.plcopen.xml.tc6.Body.SFC.Block manualBlock = (org.plcopen.xml.tc6.Body.SFC.Block) pouParser
				.getObjByInstanceName(functionBlockInstanceName);

		if (manualBlock != null) {

			Block blockFB = new org.supremica.external.operationframeworkto61131.layout.sfc.block.Block(manualBlock);

			// remove the xmlBlock from pou after building a Block object with
			// its information
			pouParser.removeElements(pouParser.getObjByLocalId(manualBlock
					.getLocalId()));

			// add the removed xmlBlock's id to existing id list
			super.addToLocalIdList(manualBlock.getLocalId());

			return blockFB;

		} else {

			return null;
		}

	}

	// No reuse manual pou, generate a empty block with inputs and outputs, and
	// also block size and position.
	private Block generateEmptyBlockForFB(List<FBConnection> fbConnectionList,
			String functionBlockType, String functionBlockInstanceName) {

		List<String> inputs = new LinkedList<String>();
		List<String> outputs = new LinkedList<String>();
		this.getFBInputsNOutputs(fbConnectionList, inputs, outputs);

		String[] inputNames = new String[inputs.size()];
		String[] outputNames = new String[outputs.size()];

		inputs.toArray(inputNames);
		outputs.toArray(outputNames);

		Block blockFB = new org.supremica.external.operationframeworkto61131.layout.sfc.block.Block(super
				.nextLocalId(), functionBlockType, inputNames, outputNames);

		blockFB.setPosition(Constant.FunctionBlockPositionX.intValue(),
				Constant.FunctionBlockPositionY.intValue());
		blockFB.setInstanceName(functionBlockInstanceName);

		return blockFB;
	}

	// Connected InVariable to FB's input's ConnectionPointIn
	private int connectFBInput(Block blockFB,
			List<org.supremica.external.operationframeworkto61131.layout.sfc.InVariable> inVariableList,
			List<ConnectionPointIn> inputConIn, Position distance,
			List<Object> FBDLiveList, int longestExpressionLength) {

		int inputParamSize = inputConIn.size();

		int inputVarSize = inVariableList.size();

		if (inputParamSize == 0) {

			log.error("empty Input parameter found in FID, FBtype:"
					+ blockFB.getTypeName() + ",FBInstance Name:"
					+ blockFB.getInstanceName());

			return 0;
		}

		if (inputVarSize == 0) {

			log.error("empty input variable found in FID"
					+ blockFB.getTypeName() + ",FBInstance Name:"
					+ blockFB.getInstanceName());

			return 0;
		}

		if (inputParamSize != inputVarSize) {
			// multi-var to one param connection, an AND is connected to param
			// first and multi-var is connected to AND then

			Block blockAND = BlockBuilder.getANDBlock(super.nextLocalId(),
					inputVarSize);

			// when super.lastPosition=null , the block is the first one,
			// calculate 's position
			if (super.getLastPosition() == null) {
				// FIXME fix this distance

				Position distanceANDToFB = new Position(
						Constant.DistanceInVariableToFunctionBlock.intValue()
								* 2
								+ longestExpressionLength
								* Constant.ActionBlockWidthExtendUnit
										.intValue(), 0);
				// Connect AND to FB
				blockAND.connectToIn(blockFB, inputConIn.get(0),
						distanceANDToFB);

			} else {

				// If not the first block, use super.lastPosition as the block's
				// Position to Align to the previous block
				blockAND.setPosition(new Position(leftBorder
						- blockAND.getWidth()
						- Constant.BlockANDHeightUnit.intValue(), super
						.getLastPosition().getY()));

				// AND had position, Connect FB to AND
				blockFB.connectToOut(blockAND, 0, inputConIn.get(0),
						new Position(super.leftBorder, 0), null);

			}
			// update the super.setLastPosition for the next block
			super.setLastPosition(blockAND.getPosition());
			super.adjustLastPositionY(blockAND.getHeight()
					+ Constant.BlockANDHeightUnit.intValue());

			// Connect InVariable to block AND
			for (int i = 0; i < inVariableList.size(); i++) {

				org.supremica.external.operationframeworkto61131.layout.sfc.InVariable inVariable = inVariableList
						.get(i);

				inVariable.connectToIn(blockAND, blockAND
						.getConnectionPointIn(i), distance);

				FBDLiveList.add(inVariable.getPLCOpenObject());
			}

			// add AND to pou
			FBDLiveList.add(blockAND.getPLCOpenObject());

		} else {
			// one to one connection or multi-multi

			for (int i = 0; i < inputParamSize; i++) {

				org.supremica.external.operationframeworkto61131.layout.sfc.InVariable inVariable = inVariableList
						.get(i);

				inVariable.connectToIn(blockFB, inputConIn.get(i), distance);
				FBDLiveList.add(inVariable.getPLCOpenObject());

				// Calculate the left border by analyzing variable's expression
				// length, to avoid overlapping by AND
				if (inVariable.getExpression().length() > longestExpressionLength) {
					longestExpressionLength = inVariable.getExpression()
							.length();

					super.leftBorder = inVariable.getPosition().getX()
							- Constant.BlockANDHeightUnit.intValue();

				}
			}

		}

		return longestExpressionLength;

	}

	// Connected OutVariable to FB's output's ConnectionPointOut
	private void connectFBoutput(Block blockFB,
			List<org.supremica.external.operationframeworkto61131.layout.sfc.OutVariable> outVariableList,
			List<ConnectionPointOut> outputConOut, Position distance,
			List<Object> FBDLiveList) {

		int outputParamSize = outputConOut.size();

		int outputVarSize = outVariableList.size();

		if (outputConOut.size() == 0) {

			log.error("empty Output parameter found in FID, FBtype:"
					+ blockFB.getTypeName() + ",FBInstance Name:"
					+ blockFB.getInstanceName());

			return;
		}

		if (outputVarSize == 0) {

			log.error("empty Output variable found in FID, FBtype"
					+ blockFB.getTypeName() + ",FBInstance Name:"
					+ blockFB.getInstanceName());

			return;
		}

		// multi-var to one param connection, multi-var is connected to
		// the same output
		if (outputParamSize != outputVarSize) {

			// FIXME fix this distance and position for one-to multi output.

			// Connect InVariable to block FB
			for (int i = 0; i < outVariableList.size(); i++) {

				log.error("ouputs and FB param is not even FBtype"
						+ blockFB.getTypeName() + ",FBInstance Name:"
						+ blockFB.getInstanceName());

				// convertor.layout.sfc.OutVariable outVariable =
				// outVariableList
				// .get(i);
				//
				// outVariable.connectToOut(blockFB, outputConOut.get(0),
				// outVariable.getConnectionPointIn(), null,
				// distance);
				//
				// FBDLiveList.add(outVariable.getPLCOpenObject());
			}

		} else {
			// Connect InVariable to block FB
			for (int i = 0; i < outVariableList.size(); i++) {

				org.supremica.external.operationframeworkto61131.layout.sfc.OutVariable outVariable = outVariableList
						.get(i);

				outVariable.connectToOut(blockFB, outputConOut.get(i),
						outVariable.getConnectionPointIn(), null, distance);

				FBDLiveList.add(outVariable.getPLCOpenObject());
			}

		}
	}

	// Generate a list of FB inputs name and a list of FB output name, those two
	// list will be used to generate the block for FB
	private void getFBInputsNOutputs(List<FBConnection> fbConnectionList,
			List<String> inputs, List<String> outputs) {

		for (FBConnection fbConnection : fbConnectionList) {

			if (fbConnection.getIOType().equals(
					org.supremica.manufacturingtables.xsd.fid.IoType.INPUT
							.value())) {

				for (String param : fbConnection.getParam()) {

					inputs.add(param);
				}

			} else {

				for (String param : fbConnection.getParam()) {

					outputs.add(param);
				}

			}

		}

	}

	// Find the function block interface in FID by the FBtype name
	private org.supremica.manufacturingtables.xsd.fid.FunctionBlock getFunctionBlockInterface(
			String typeName,
			org.supremica.manufacturingtables.xsd.fid.FunctionBlocks functionBlocks) {

		for (org.supremica.manufacturingtables.xsd.fid.FunctionBlock functionBlock : functionBlocks
				.getFunctionBlock()) {

			if (functionBlock.getType().equals(typeName)) {

				return functionBlock;
			}
		}

		log.error("Function Block can not be found in FID type:" + typeName);

		return null;

	}

	// Return the pou by input pouName, if the pou exists, remove it(improve
	// search speed) from the
	// manual poulist and return it , the returned pou will be updated and
	// insert to new output file's pous again.
	// Else generate a new pou
	// At last add the returned pou's name to pouNameList. pouNameList will
	// be used to instantiate the pou in Configuration.Resource.
	private org.plcopen.xml.tc6.Project.Types.Pous.Pou getManualConnectedPou(
			List<org.plcopen.xml.tc6.Project.Types.Pous.Pou> manualFBPouList,
			String pouName) {

		org.plcopen.xml.tc6.Project.Types.Pous.Pou pou = null;
		if (manualFBPouList != null) {
			for (org.plcopen.xml.tc6.Project.Types.Pous.Pou iPou : manualFBPouList) {

				if (iPou.getName().equals(pouName)) {

					pou = iPou;
					manualFBPouList.remove(iPou);

					log.debug("Found pou:" + pou.getName());
					break;
				}
			}
		}

		return pou;

	}

	// remove from manual pou the FB sys connection's param, var and interface
	private Boolean cleanTemplate(
			org.plcopen.xml.tc6.Project.Types.Pous.Pou pou,
			String functionBlockType, String functionBlockInstanceName) {

		// Get the FB interface from fid

		ReflectionUtil reflectionUtil = new ReflectionUtil();
		final String getFormalParameterString = "getFormalParameter";

		org.supremica.manufacturingtables.xsd.fid.FunctionBlock fb = getFunctionBlockInterface(
				functionBlockType, this.fid);

		if (fb == null) {

			return false;
		}

		org.supremica.external.operationframeworkto61131.util.PLCopenXMLParser pouParser = new org.supremica.external.operationframeworkto61131.util.PLCopenXMLParser(
				pou.getBody().getFBD().getCommentOrErrorOrConnector());

		// The existing manually connected FB block
		org.plcopen.xml.tc6.Body.SFC.Block xmlBlock = (org.plcopen.xml.tc6.Body.SFC.Block) pouParser
				.getObjByInstanceName(functionBlockInstanceName);

		if (xmlBlock == null) {

			log.error("Failed to find block instance for FB:"
					+ functionBlockInstanceName + ",type:" + functionBlockType);

			return false;
		}

		// The block object is type of layout.sfc.block.
		// To use the encapsulated the get method for input/output variable in
		// xmlBlock, use the commonLayout block instead of the original type of
		// block
		org.supremica.external.operationframeworkto61131.layout.sfc.block.Block block = new org.supremica.external.operationframeworkto61131.layout.sfc.block.Block(
				xmlBlock);

		// The block's localId will be used to identify the block when cleaning
		// the block's output
		// BigInteger localId = xmlBlock.getLocalId();
		// Use the value of localId only, not reference
		BigInteger localId = BigInteger.valueOf(block.getLocalId());
		// FIXME need in/out variable?

		// Remove system connection , keep user connection
		for (org.supremica.manufacturingtables.xsd.fid.SystemConnection sysConnection : fb
				.getSystemInterface().getSystemConnection()) {

			// for FB's input, start from its refLocalId
			if (sysConnection.getIOType().value().equalsIgnoreCase(
					org.supremica.manufacturingtables.xsd.fid.IoType.INPUT
							.value())) {

				for (String paramName : sysConnection.getParam()) {

					org.plcopen.xml.tc6.Body.SFC.Block.InputVariables.Variable xmlInVariable = block
							.getXMLInputVariable(paramName);

					log.debug("toRemove input;" + paramName);

					if (xmlInVariable != null) {
						log.debug("=======================found variable");

						// For each refLocalId in ConnectionPointIn.connection,
						// find all components that are connected to it.
						for (org.plcopen.xml.tc6.Connection connection : xmlInVariable
								.getConnectionPointIn().getConnection()) {

							BigInteger refLocalId = connection.getRefLocalId();

							if (refLocalId != null) {

								ArrayList<Object> toRemove = new ArrayList<Object>();
								pouParser.getSubElementByRefLocalId(toRemove,
										refLocalId);

								pouParser.removeElements(toRemove);
								this.cleanPouInterface(toRemove, pou);
								// toRemove.addAll(localToRemove);
								// pou.getBody().getFBD().getCommentOrErrorOrConnector().removeAll(toRemove);

								// this.cleanPouInterface(toRemove, pou);
								log.debug("Found:" + toRemove.size());

							} else {

								// Detect a incomplete Connection, cancel
								// cleaning and return false
								log
										.error("Fail to get localId from input parameter :"
												+ paramName
												+ ",in FB type:"
												+ functionBlockType
												+ ", instance name:"
												+ functionBlockInstanceName);
								return false;
							}

						}

						// clear the InVariable's connection
						xmlInVariable.getConnectionPointIn().getConnection()
								.clear();
					} else {

						// The input block doesn't has a parameter which is
						// included in FID. The manual block is incomplete or
						// the input xml file had been
						// damaged, cancel cleaning and return false

						log.error("Can not find input parameter :" + paramName
								+ ",in FB type:" + functionBlockType
								+ ", instance name:"
								+ functionBlockInstanceName);

						return false;
					}
				}

			} else {

				// Remove FB system connection output
				for (String paramName : sysConnection.getParam()) {

					org.plcopen.xml.tc6.Body.SFC.Block.OutputVariables.Variable xmlOutVariable = block
							.getXMLOutputVariable(paramName);

					log.debug("toRemove output:" + paramName);
					if (xmlOutVariable != null) {

						String formalParameter = xmlOutVariable
								.getFormalParameter();

						if (formalParameter != null) {
							ArrayList<Object> toRemove = new ArrayList<Object>();
							pouParser.getSubElementByLocalId(toRemove, localId,
									formalParameter);
							pouParser.removeElements(toRemove);
							this.cleanPouInterface(toRemove, pou);
							// toRemove.addAll(localToRemove);
							// pou.getBody().getFBD().getCommentOrErrorOrConnector().removeAll(toRemove);
							// this.cleanPouInterface(toRemove, pou);
							log.debug("Found:" + toRemove.size());

						} else {

							log.error("Can not find output formalParameter :"
									+ paramName + ",in FB type:"
									+ functionBlockType + ", instance name:"
									+ functionBlockInstanceName);

							return false;
						}

					} else {

						log.error("Can not find output parameter :" + paramName
								+ ",in FB type:" + functionBlockType
								+ ", instance name:"
								+ functionBlockInstanceName);

						return false;
					}
				}

			}

		}

		// update super's localId list, prevent duplicate localId
		// To call this method:super.addToLocalIdList(localId) for each
		// remaining object in the pou.fbd
		for (Object obj : pou.getBody().getFBD().getCommentOrErrorOrConnector()) {

			pouParser.searchInSubElement(obj, "getLocalId", "addToLocalIdList",
					new Object[0], this);

		}

		// remove FB itself local var

		org.supremica.external.operationframeworkto61131.util.PLCopenUtil.removeVariableFromPouInterface(pou,
				functionBlockInstanceName);

		return true;

	}

	// remove InVariable/OutVariable from pou interface, will be invoked in FB
	// connection reuse to remove InVariable/OutVariable in system connections
	private void cleanPouInterface(List<Object> toRemove,
			org.plcopen.xml.tc6.Project.Types.Pous.Pou pou) {

		ReflectionUtil reflectionUtil = new ReflectionUtil();

		// only on pou.fbd's first level, ignore objects in deeper levels
		String[] methods = { "getExpression" };

		try {
			for (Object obj : toRemove) {

				for (int i = 0; i < methods.length; i++) {
					if (reflectionUtil.hasMethod(obj, methods[i])) {

						Object variableName = reflectionUtil.invokeMethod(obj,
								methods[i]);

						if (variableName != null) {

							org.supremica.external.operationframeworkto61131.util.PLCopenUtil
									.removeVariableFromPouInterface(pou,
											(String) variableName);

							log.debug("Remove from interface:" + variableName);
						}

					}

				}

			}

		} catch (Exception e) {
			e.printStackTrace();

			return;
		}

	}

	// return all the FB's user input and user output names
	private List<String> getFBUserConnectionParamList(String fbType) {

		List<String> userConnectionParamList = new LinkedList<String>();

		for (org.supremica.manufacturingtables.xsd.fid.UserConnection userConnection : this
				.getFunctionBlockInterface(fbType, this.fid).getUserInterface()
				.getUserConnection()) {

			for (String param : userConnection.getParam()) {

				userConnectionParamList.add(param);

			}

		}

		return userConnectionParamList;
	}

	private List<String> getFBSysConnectionParamList(String fbType) {

		List<String> sysConnectionParamList = new LinkedList<String>();

		for (org.supremica.manufacturingtables.xsd.fid.SystemConnection sysConnection : this
				.getFunctionBlockInterface(fbType, this.fid)
				.getSystemInterface().getSystemConnection()) {

			for (String param : sysConnection.getParam()) {

				sysConnectionParamList.add(param);

			}

		}

		return sysConnectionParamList;
	}

	// Generate the variables that are to be connected to block's input
	private List<org.supremica.external.operationframeworkto61131.layout.sfc.InVariable> generateInVariableFromFBConnection(
			FBConnection fbConnection) {

		Class dataType = fbConnection.getDataType();
		String initValue = fbConnection.getInitValue();
		List<org.supremica.external.operationframeworkto61131.layout.sfc.InVariable> inVariableList = new LinkedList<org.supremica.external.operationframeworkto61131.layout.sfc.InVariable>();
		for (String varName : fbConnection.getVariable()) {

			Var var = new Var(varName, initValue, dataType);

			if (fbConnection.isConstant()) {

				var.setConstant();
			}

			if (fbConnection.isNegated()) {

				var.setNegated();
			}
			// TODO add more modifier
			// if(fbConnection.isRetain()){
			//				
			// var.setRetain();
			// }

			org.supremica.external.operationframeworkto61131.layout.sfc.InVariable inVariable = new org.supremica.external.operationframeworkto61131.layout.sfc.InVariable(
					super.nextLocalId(), var.getName());

			// if the var is negated.

			if (var.isNegated()) {

				inVariable.setNegated();

			}

			inVariableList.add(inVariable);
			localPouInterfaceVarList.append(var);

		}

		return inVariableList;

	}

	// Generate the variables that are to be connected to block's output
	private List<org.supremica.external.operationframeworkto61131.layout.sfc.OutVariable> generateOutVariableFromFBConnection(
			FBConnection fbConnection) {

		Class dataType = fbConnection.getDataType();
		String initValue = fbConnection.getInitValue();
		List<org.supremica.external.operationframeworkto61131.layout.sfc.OutVariable> outVariableList = new LinkedList<org.supremica.external.operationframeworkto61131.layout.sfc.OutVariable>();
		for (String varName : fbConnection.getVariable()) {

			Var var = new Var(varName, initValue, dataType);

			org.supremica.external.operationframeworkto61131.layout.sfc.OutVariable outVariable = new org.supremica.external.operationframeworkto61131.layout.sfc.OutVariable(
					super.nextLocalId(), var.getName());

			// if the var is negated.

			if (var.isNegated()) {

				outVariable.setNegated();

			}

			outVariableList.add(outVariable);
			localPouInterfaceVarList.append(var);

		}

		return outVariableList;

	}

	// generate a list of block.OutVariable.ConnectionPointOut that are to be
	// connected to.
	private List<ConnectionPointOut> generateOutputConOutList(
			FBConnection fbConnection, List<String> fbUserConnectionParamList,
			Block blockFB, Boolean isUpdating) {

		// Output connections

		List<ConnectionPointOut> outputConOut = new LinkedList<ConnectionPointOut>();

		if (isUpdating) {

			// // Check if it is been connected.
			for (String paramName : fbConnection.getParam()) {

				if (fbUserConnectionParamList.contains(paramName)) {

					// When the connection has been connection, return a null
					// list
					return null;
				}
			}
		}
		for (String paramName : fbConnection.getParam()) {
			org.supremica.external.operationframeworkto61131.layout.sfc.block.Variable variable = blockFB
					.getOutputVariable(paramName);
			outputConOut.add(variable.getConnectionPointOut());
		}

		return outputConOut;

	}

	// generate a list of block.InVariable.ConnectionPointIn that are to be
	// connected to.
	private List<ConnectionPointIn> generateInputConInList(
			FBConnection fbConnection, List<String> fbUserConnectionParamList,
			Block blockFB, Boolean isUpdating) {

		// Output connections

		List<ConnectionPointIn> inputConIn = new LinkedList<ConnectionPointIn>();

		if (isUpdating) {

			// // Check if it is been connected.
			for (String paramName : fbConnection.getParam()) {

				if (fbUserConnectionParamList.contains(paramName)) {

					// When the connection has been connection, return a null
					// list
					return null;
				}
			}
		}
		for (String paramName : fbConnection.getParam()) {
			org.supremica.external.operationframeworkto61131.layout.sfc.block.Variable variable = blockFB
					.getInputVariable(paramName);
			inputConIn.add(variable.getConnectionPointIn());
		}

		return inputConIn;

	}

	/*
	 * Return the variable list for machine with control system to communicate
	 * with PLC
	 */
	public VarList getExternalVarList() {

		return this.externalVarList;
	}
}
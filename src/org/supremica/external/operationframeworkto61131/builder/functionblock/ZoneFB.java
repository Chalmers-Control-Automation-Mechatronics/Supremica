package org.supremica.external.operationframeworkto61131.builder.functionblock;

import java.math.BigInteger;
import java.util.LinkedList;
import java.util.List;
import java.util.Iterator;

import org.supremica.external.operationframeworkto61131.data.FBCallingVars;
import org.supremica.external.operationframeworkto61131.data.FBConnection;
import org.supremica.external.operationframeworkto61131.data.StateQuery;
import org.supremica.external.operationframeworkto61131.main.Constant;
import org.supremica.external.operationframeworkto61131.util.log.LogUtil;
import org.supremica.manufacturingtables.xsd.eop.ZoneState;



/**
 * ZoneFB.java generates the list of Function Block variable-parameter
 * connection pairs for zone booking. The interface of FB for zone booking is
 * generated by hard coding all in this class.Connection pairs in the list will
 * be used to generate the graphical connection in FBTypeBuilder.java.
 * 
 * Created: Mar 31, 2009 5:24:18 PM
 * 
 * @author LC
 * @version 1.0
 */
public class ZoneFB {

	private static LogUtil log = LogUtil.getInstance();

	private List<Object> EOPList;

	private final String IOTYPE_INPUT = "Input";

	private final String IOTYPE_OUTPUT = "Output";

	private final String BOOK = "book";

	private final String ZONE = "zone";

	private org.supremica.external.operationframeworkto61131.controlinfo.EquipmentStateLookUp equipmentStateLookUp;

	public ZoneFB(
			org.supremica.external.operationframeworkto61131.controlinfo.EquipmentStateLookUp equipmentStateLookUp,
			List<Object> EOPList) {
		this.equipmentStateLookUp = equipmentStateLookUp;
		this.EOPList = EOPList;
	}

	// First decide how many zone there are.
	// Then for each zone number, decide how many machine will book this zone
	// and the use names of machines as the variable that are to be connected to
	// the function block
	// At last, use the zone name as the function instance name;

	public List<org.supremica.external.operationframeworkto61131.data.FBConnection> getFBConnectionListForZone(
			String zoneName) {

		// TODO not finished, need to improve, one variable for each state?

		List<String> listOfMachinesBookZoneN = getListOfMahinesBookZoneN(zoneName);

		int i = 1;

		List<org.supremica.external.operationframeworkto61131.data.FBConnection> fbConnectionList = new LinkedList<org.supremica.external.operationframeworkto61131.data.FBConnection>();

		// Connect all the machines that need the zone to FB connection list
		for (String machine : listOfMachinesBookZoneN) {

			// Build the StateQuery first and get Variable name from
			// equipmentStateLookUp.
			// to make sure the variable name is the same as in SFC

			// StateQuery for zone booking, state=b
			StateQuery book_query = new StateQuery();
			book_query
					.setEquipmentEntityType(org.supremica.manufacturingtables.xsd.eop.ZoneState.class);
			book_query.setEquipmentEntityName(zoneName);
			book_query.setMachine(machine);
			book_query.setState(Constant.ZONE_STATE_BOOK);

			FBCallingVars book_FBCallingVars = equipmentStateLookUp
					.getFBCallingVars(book_query);

			// StateQuery for zone unbooking, only the StateQuery.State is
			// different, state=f
			StateQuery unbook_query = book_query;

			unbook_query.setState(Constant.ZONE_STATE_UNBOOK);

			FBCallingVars unbook_FBCallingVars = equipmentStateLookUp
					.getFBCallingVars(unbook_query);

			// Variable:""
			// Param: request_1
			// Input
			String variable_book = book_FBCallingVars.getRequestVar().getName();
			String param_request = "request_" + i;
			fbConnectionList
					.add(new FBConnection(param_request, variable_book,
							this.IOTYPE_INPUT, Boolean.class, Boolean.FALSE
									.toString()));

			// Variable:""
			// Param: cancel_1
			// Input
			String variable_cancel = unbook_FBCallingVars.getRequestVar()
					.getName();
			String param_cancel = "cancel_" + i;
			fbConnectionList.add(new FBConnection(param_cancel,
					variable_cancel, this.IOTYPE_INPUT, Boolean.class,
					Boolean.FALSE.toString()));

			// Variable:""
			// Param: 1 booked
			// Input
			String variable_booked = book_FBCallingVars.getFeedbackVar()
					.getName();
			String param_booked = i + "_booked";
			fbConnectionList.add(new FBConnection(param_booked,
					variable_booked, this.IOTYPE_OUTPUT, Boolean.class,
					Boolean.FALSE.toString()));

			// Variable:""
			// Param: 1 canceled
			// Input
			// String variable_canceled = unbook_FBCallingVars.getFeedbackVar()
			// .getName();
			// String param_canceled = i + "_canceled";
			// fbConnectionList.add(new FBConnection(param_canceled,
			// variable_canceled, this.IOTYPE_OUTPUT, Boolean.class,
			// Boolean.FALSE.toString()));

			i++;

		}

		// Variable:""
		// Param: reset
		// Iutput
		String variable_reset = "";
		String param_reset = "reset";
		fbConnectionList.add(new FBConnection(param_reset, variable_reset,
				this.IOTYPE_INPUT, Boolean.class, Boolean.FALSE.toString()));

		// Variable:""
		// Param:zone_booked
		// Output
		String variable_zone_booked = "";
		String param_zone_booked = "zone_booked";
		fbConnectionList.add(new FBConnection(param_zone_booked,
				variable_zone_booked, this.IOTYPE_OUTPUT, Boolean.class,
				Boolean.FALSE.toString()));

		// Variable:""
		// Param:zone_free
		// Output
		String variable_free = "";
		String param_free = "zone_free";
		fbConnectionList.add(new FBConnection(param_free, variable_free,
				this.IOTYPE_OUTPUT, Boolean.class, Boolean.FALSE.toString()));

		return fbConnectionList;
	}

	public List<String> getListOfMahinesBookZoneN(String zoneName) {

		List<String> listOfMachine = new LinkedList<String>();

		if (zoneName == null || zoneName.isEmpty()) {

			log
					.error("Got null or empty zone name when instantiate FB for zones in class ZoneFB");
			return listOfMachine;
		}

		Iterator itor = EOPList.iterator();
		while (itor.hasNext()) {

			org.supremica.manufacturingtables.xsd.eop.Operation operation = (org.supremica.manufacturingtables.xsd.eop.Operation) itor
					.next();

			if (listOfMachine.contains(operation.getMachine())) {

				continue;
			}

			// Get Operation->EOP->Zones->Zone list
			if (operation.getEOP() != null
					&& operation.getEOP().getZones() != null
					&& operation.getEOP().getZones().getZone() != null
					&& operation.getEOP().getZones().getZone().size() > 0) {

				// check each Action->ZoneState->Zone if it equals the target
				// Zone.
				for (String zone : operation.getEOP().getZones().getZone()) {

					if (zoneName.equals(zone)) {

						listOfMachine.add(operation.getMachine());

					}

				}

			}

		}

		return listOfMachine;

	}
}

package org.supremica.external.operationframeworkto61131.builder;

import java.util.HashMap;
import java.util.Iterator;
import java.math.BigInteger;
import java.util.List;
import java.util.LinkedList;
import org.plcopen.xml.tc6.*;
import org.supremica.external.operationframeworkto61131.builder.cop.COPBuilder;
import org.supremica.external.operationframeworkto61131.builder.eop.EOPBuilder;
import org.supremica.external.operationframeworkto61131.builder.functionblock.FBTypeBuilder;
import org.supremica.external.operationframeworkto61131.builder.interlock.ILBuilder;
import org.supremica.external.operationframeworkto61131.controlinfo.EquipmentStateLookUp;
import org.supremica.external.operationframeworkto61131.main.Constant;
import org.supremica.external.operationframeworkto61131.util.PLCopenUtil;
import org.supremica.external.operationframeworkto61131.util.log.LogUtil;
import org.supremica.manufacturingtables.xsd.eop.*;
import org.supremica.manufacturingtables.xsd.fid.FunctionBlock;
import org.supremica.manufacturingtables.xsd.rop.ROP;



//import convertor.xsd.physicalResource.Factory;

/**
 * POUBuilder.java handles the generation of Pous converted from COP, EOP, IL,
 * CC, FB. It invokes the corresponding Builder classes in the package of
 * builder and add the return Pous to the java content tree. This class also
 * handels the list of variables generated by the builder. Variables in these
 * lists will be declared as global varaible by ConfigurationBuilder.java
 * 
 * Created: Mar 31, 2009 5:54:35 PM
 * 
 * @author LC
 * @version 1.0
 */
public class POUBuilder {

	private LogUtil log = LogUtil.getInstance();

	private org.plcopen.xml.tc6.ObjectFactory plcopenObjectFactory;

	private org.plcopen.xml.tc6.Project plcopenProject;

	private org.supremica.external.operationframeworkto61131.data.VarList allPouInterfaceVarList;

	private HashMap<String, org.supremica.external.operationframeworkto61131.data.VarList> IntelligentMachineVariableList = new HashMap<String, org.supremica.external.operationframeworkto61131.data.VarList>();

	private List<String> pouNameList;

	private HashMap<BigInteger, BigInteger> eopNameMap;

	public POUBuilder(org.plcopen.xml.tc6.Project plcopenProject) {

		this.plcopenProject = plcopenProject;
		plcopenObjectFactory = new org.plcopen.xml.tc6.ObjectFactory();
		allPouInterfaceVarList = org.supremica.external.operationframeworkto61131.data.VarList.getInstance();
		pouNameList = new LinkedList<String>();
	}

	public void generateCC(
			List<Object> listOfEOP,
			List<Object> listOfCOP,
			org.supremica.manufacturingtables.xsd.cc.CycleStartConditions cycleStartConditions) {

		if (listOfEOP == null || listOfEOP.size() < 1) {

			log.error("Null or empty EOP list");

			return;
		}

		if (cycleStartConditions == null) {

			log.error("Null or Cycle Start Conditions");

			return;
		}

		Project.Types types = plcopenProject.getTypes();
		// for FB instantiate
		// Project.Types.DataTypes.DataType
		// d=plcopenObjectFactory.createProjectTypesDataTypesDataType();

		if (types == null) {

			types = plcopenObjectFactory.createProjectTypes();
		}

		Project.Types.Pous pous = this.getPous();

		org.supremica.external.operationframeworkto61131.builder.cc.CCBuilder ccBuilder = new org.supremica.external.operationframeworkto61131.builder.cc.CCBuilder();
		Project.Types.Pous.Pou pou = ccBuilder.getCC(listOfEOP, listOfCOP,
				cycleStartConditions, Constant.CELL_NAME);
		pous.getPou().add(pou);
		addToPouInterfaceVarList(ccBuilder.getInterfaceVarList());
		addToPouNameList(pou.getName());

		types.setPous(pous);
		plcopenProject.setTypes(types);

		return;

	}

	public void convertILToLD(List<Object> listOfIL,
			EquipmentStateLookUp equipmentStateLookUp) {

		Project.Types types = plcopenProject.getTypes();
		// for FB instantiate
		// Project.Types.DataTypes.DataType
		// d=plcopenObjectFactory.createProjectTypesDataTypesDataType();

		if (types == null) {

			types = plcopenObjectFactory.createProjectTypes();
		}

		Project.Types.Pous pous = this.getPous();

		Iterator<Object> iter = listOfIL.iterator();

		while (iter.hasNext()) {

			org.supremica.manufacturingtables.xsd.interlock.IL interlock = (org.supremica.manufacturingtables.xsd.interlock.IL) iter
					.next();

			ILBuilder ilBuilder = new ILBuilder();

			Project.Types.Pous.Pou pou = ilBuilder.convertILToLD(interlock);
			pous.getPou().add(pou);
			addToPouInterfaceVarList(ilBuilder.getInterfaceVarList());
			addToPouNameList(pou.getName());

			/*
			 * Get the variable list which is needed by intelligent machine to
			 * communicate with PLC
			 */

			this.addToIntelligentMachineVariableList(interlock.getMachine(),
					ilBuilder.getExternalVarList());

		}

		types.setPous(pous);
		plcopenProject.setTypes(types);

		return;

	}

	public void convertCOPsToSFC(List<Object> listOfCOP,
			EquipmentStateLookUp equipmentStateLookUp) {

		Project.Types types = plcopenProject.getTypes();
		// for FB instantiate
		// Project.Types.DataTypes.DataType
		// d=plcopenObjectFactory.createProjectTypesDataTypesDataType();

		if (types == null) {

			types = plcopenObjectFactory.createProjectTypes();
		}

		Project.Types.Pous pous = this.getPous();

		Iterator<Object> iter = listOfCOP.iterator();
		while (iter.hasNext()) {
			ROP rop = (ROP) iter.next();

			String pouName = Constant.COP_PREFIX + "_" + rop.getId();

			// FIXME check if already exist, low efficiency, newly added element
			// will be checked.
			Project.Types.Pous.Pou pou = this.getPou(pouName, pous);

			pou.setName(pouName);

			COPBuilder copBuilder = new COPBuilder();
			pous.getPou().add(copBuilder.convertROPToPou(rop, pou));
			addToPouInterfaceVarList(copBuilder.getInterfaceVarList());
			addToPouNameList(pouName);
		}

		types.setPous(pous);
		plcopenProject.setTypes(types);

		return;
	}

	/**
	 * convert all the EOP.operation to SFC
	 * 
	 */

	public void convertEOPsToSFC(List<Object> listOfEOP,
			EquipmentStateLookUp equipmentStateLookUp) {

		this.eopNameMap = new HashMap<BigInteger, BigInteger>(listOfEOP.size());
		Project.Types types = plcopenProject.getTypes();
		// for FB instantiate
		// Project.Types.DataTypes.DataType
		// d=plcopenObjectFactory.createProjectTypesDataTypesDataType();

		if (types == null) {

			types = plcopenObjectFactory.createProjectTypes();
		}

		Project.Types.Pous pous = this.getPous();

		Iterator<Object> iter = listOfEOP.iterator();

		while (iter.hasNext()) {
			Operation operation = (Operation) iter.next();
			log.debug("EOP:" + operation.getOpID());

			String pouName = "";

			if (operation.getType().equals(TypeType.ALTERNATIVE)) {
				pouName = getAlternativeEOPName(operation.getOpID());
				// FIXME eop alternative id
				// if (operation.getType().equals(TypeType.ALTERNATIVE)) {
				// pouName = Constant.EOP_PREFIX +
				// operation.getOpID().toString()
				// + "-" + operation.getAlternativeID();
				//
				//				
			} else {
				pouName = Constant.EOP_PREFIX + operation.getOpID().toString();
			}

			// FIXME check if already exist, low efficiency, newly added element
			// will be checked.
			Project.Types.Pous.Pou pou = this.getPou(pouName, pous);
			pou.setName(pouName);
			EOPBuilder eopBuilder = new EOPBuilder();

			// sfcBuilder.convertOperationToPou();
			pous.getPou().add(eopBuilder.convertOperationToPou(operation, pou));
			addToPouInterfaceVarList(eopBuilder.getInterfaceVarList());
			addToPouNameList(pouName);

			/*
			 * Get the variable list which is needed by intelligent machine to
			 * communicate with PLC
			 */

			this.addToIntelligentMachineVariableList(operation.getMachine(),
					eopBuilder.getExternalVarList());

		}

		types.setPous(pous);

		plcopenProject.setTypes(types);

		return;

	}

	public void addFunctionBlocksInstantiation(
			org.supremica.manufacturingtables.xsd.fid.FunctionBlocks fid,
			EquipmentStateLookUp equipmentStateLookUp,
			List<Object> listOFCOP,
			List<Object> listOfEOP,
			org.supremica.manufacturingtables.xsd.virtualResourcesV3.VirtualResources virtualResources,
			org.plcopen.xml.tc6.Project reuseProject) {

		Project.Types types = plcopenProject.getTypes();
		// for FB instantiate
		// Project.Types.DataTypes.DataType
		// d=plcopenObjectFactory.createProjectTypesDataTypesDataType();

		if (types == null) {

			types = plcopenObjectFactory.createProjectTypes();
		}

		org.supremica.manufacturingtables.xsd.controlInformation.Factory factory = (org.supremica.manufacturingtables.xsd.controlInformation.Factory) equipmentStateLookUp
				.getFactory();
		// FIXME only for one cell, when search for whole factory, change the
		// position
		Project.Types.Pous pous = this.getPous();

		FBTypeBuilder fbTypeBuilder = new FBTypeBuilder(fid);

		if (reuseProject != null) {

			fbTypeBuilder.setManualFBPouList(reuseProject.getTypes().getPous()
					.getPou());
		}

		for (org.supremica.manufacturingtables.xsd.controlInformation.Area area : factory
				.getAreas().getArea()) {

			for (org.supremica.manufacturingtables.xsd.controlInformation.Cell cell : area
					.getCells().getCell()) {

				for (org.supremica.manufacturingtables.xsd.controlInformation.Machine machine : cell
						.getMachines().getMachine()) {

					// Generate the FB for each machine
					// Newly generated pou will be added to the input pous. pous
					// are also used to check the existing FB connections
					fbTypeBuilder.instantiateFB(machine.getName(), listOFCOP,
							pous, pouNameList);

					this.addToIntelligentMachineVariableList(machine.getName(),
							fbTypeBuilder.getExternalVarList());

				}

				// FIXME the zone is for one cell
				fbTypeBuilder.instantiateZoneFB(listOfEOP, virtualResources,
						pous, pouNameList);
				// Add the VarList from the pou's interface, will be needed
				// when build the configuration var list
				this.addToPouInterfaceVarList(fbTypeBuilder
						.getInterfaceVarList());

				// FIXME temporary for only one cell
				break;

			}
			break;
			// FIXME temporary for only one cell

		}

		types.setPous(pous);
		plcopenProject.setTypes(types);

		return;

	}

	private void addToPouNameList(String pouName) {

		pouNameList.add(pouName);

	}

	public List<String> getPouNameList() {

		return pouNameList;
	}

	private void addToPouInterfaceVarList(
			org.supremica.external.operationframeworkto61131.data.VarList pouInterfaceVarList) {

		allPouInterfaceVarList.append(pouInterfaceVarList);

	}

	public org.supremica.external.operationframeworkto61131.data.VarList getAllPouInterfaceVarList() {

		return allPouInterfaceVarList;
	}

	public HashMap<String, org.supremica.external.operationframeworkto61131.data.VarList> getIntelligentMachineExternalHashMap() {

		return this.IntelligentMachineVariableList;
	}

	private Project.Types.Pous.Pou getPou(String pouName,
			Project.Types.Pous pous) {

		Project.Types.Pous.Pou pou = plcopenObjectFactory
				.createProjectTypesPousPou();

		for (Project.Types.Pous.Pou iPou : pous.getPou()) {

			if (iPou.getName().equals(pouName)) {

				pou = iPou;

				pous.getPou().remove(iPou);

				return pou;
			}
		}

		return pou;

	}

	private Project.Types.Pous getPous() {

		Project.Types types = plcopenProject.getTypes();
		if (types == null) {

			types = plcopenObjectFactory.createProjectTypes();
		}

		Project.Types.Pous pous = types.getPous();

		if (pous == null) {
			pous = plcopenObjectFactory.createProjectTypesPous();
		}

		return pous;

	}

	// index is eop id, when there is duplicate id, add a,b,c...to the duplicate
	// id as eop name
	private String getAlternativeEOPName(BigInteger id) {
		String pouName = Constant.EOP_PREFIX + id.toString();

		BigInteger letterIndex = BigInteger.ONE;
		if (this.eopNameMap.containsKey(id)) {

			letterIndex = eopNameMap.get(id);

			letterIndex = letterIndex.add(BigInteger.ONE);

			eopNameMap.remove(id);
			eopNameMap.put(id, letterIndex);

		} else {

			eopNameMap.put(id, BigInteger.ONE);
		}

		// Letter index ,A:65 a:97
		pouName = pouName + "_"
				+ PLCopenUtil.getLetterFromInt(letterIndex.intValue(), 96);

		return pouName;
	}

	/*
	 * Get the variable list which is needed by intelligent machine to
	 * communicate with PLC. Existing value pair is updated. New value pair is
	 * inserted as new pair.
	 */
	private void addToIntelligentMachineVariableList(String machineName,
			org.supremica.external.operationframeworkto61131.data.VarList exteranlVarList) {

		if (exteranlVarList.getVars().size() > 0) {

			if (this.IntelligentMachineVariableList.containsKey(machineName)) {

				org.supremica.external.operationframeworkto61131.data.VarList varList = this.IntelligentMachineVariableList
						.get(machineName);

				varList.append(exteranlVarList);

			} else {

				this.IntelligentMachineVariableList.put(machineName,
						exteranlVarList);

			}

		}

	}

}

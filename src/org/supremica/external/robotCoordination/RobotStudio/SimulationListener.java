/*
 * Supremica Software License Agreement
 *
 * The Supremica software is not in the public domain
 * However, it is freely available without fee for education,
 * research, and non-profit purposes.  By obtaining copies of
 * this and other files that comprise the Supremica software,
 * you, the Licensee, agree to abide by the following
 * conditions and understandings with respect to the
 * copyrighted software:
 *
 * The software is copyrighted in the name of Supremica,
 * and ownership of the software remains with Supremica.
 *
 * Permission to use, copy, and modify this software and its
 * documentation for education, research, and non-profit
 * purposes is hereby granted to Licensee, provided that the
 * copyright notice, the original author's names and unit
 * identification, and this permission notice appear on all
 * such copies, and that no charge be made for such copies.
 * Any entity desiring permission to incorporate this software
 * into commercial products or to use it for commercial
 * purposes should contact:
 *
 * Knut Akesson (KA), knut@supremica.org
 * Supremica,
 * Knarrhogsgatan 10
 * SE-431 60 MOLNDAL
 * SWEDEN
 *
 * to discuss license terms. No cost evaluation licenses are
 * available.
 *
 * Licensee may not use the name, logo, or any other symbol
 * of Supremica nor the names of any of its employees nor
 * any adaptation thereof in advertising or publicity
 * pertaining to the software without specific prior written
 * approval of the Supremica.
 *
 * SUPREMICA AND KA MAKES NO REPRESENTATIONS ABOUT THE
 * SUITABILITY OF THE SOFTWARE FOR ANY PURPOSE.
 * IT IS PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY.
 *
 * Supremica or KA shall not be liable for any damages
 * suffered by Licensee from the use of this software.
 *
 * Supremica is owned and represented by KA.
 */

package org.supremica.external.robotCoordination.RobotStudio;

import org.supremica.external.comInterfaces.robotstudio_3_1.RobotStudio.DSimulationEventsAdapter;
import org.supremica.log.*;

/**
 * A listener for determining when a simulation is finished.
 */
public class SimulationListener
    extends DSimulationEventsAdapter
{
    private static Logger logger = LoggerFactory.createLogger(SimulationListener.class);

    // Boolean for keeping track on when a simulation is running... not 100%!
    boolean simulationRunning = true;

    // Events generated by RobotStudio.ISimulation
    public synchronized void stop()
    {
	simulationRunning = false;

	logger.debug("Simulation finished.");

	notify();
    }

    public void tick(double time)
    {
	//System.out.println("Simtick: " + time);
    }

    ////////////////////////////
    // Junk constructed by me //
    ////////////////////////////

    /**
     * This method is designed to return when the current simulation has stopped.
     */
    public synchronized void waitForSimulationStop()
    {
	try
	    {
		//simulationRunning = true;
		while (simulationRunning)
		    {
			wait();
		    }

		// Make sure the simulation is really over before we return
		//Thread.sleep(2500);
	    }
	catch (Exception ex)
	    {
		//System.out.println("Interrupted! " + ex);
		logger.error("Interrupted! " + ex);
	    }

	return;
    }
}
/*
 * Supremica Software License Agreement
 *
 * The Supremica software is not in the public domain
 * However, it is freely available without fee for education,
 * research, and non-profit purposes.  By obtaining copies of
 * this and other files that comprise the Supremica software,
 * you, the Licensee, agree to abide by the following
 * conditions and understandings with respect to the
 * copyrighted software:
 *
 * The software is copyrighted in the name of Supremica,
 * and ownership of the software remains with Supremica.
 *
 * Permission to use, copy, and modify this software and its
 * documentation for education, research, and non-profit
 * purposes is hereby granted to Licensee, provided that the
 * copyright notice, the original author's names and unit
 * identification, and this permission notice appear on all
 * such copies, and that no charge be made for such copies.
 * Any entity desiring permission to incorporate this software
 * into commercial products or to use it for commercial
 * purposes should contact:
 *
 * Knut Akesson (KA), knut@supremica.org
 * Supremica,
 * Haradsgatan 26A
 * 431 42 Molndal
 * SWEDEN
 *
 * to discuss license terms. No cost evaluation licenses are
 * available.
 *
 * Licensee may not use the name, logo, or any other symbol
 * of Supremica nor the names of any of its employees nor
 * any adaptation thereof in advertising or publicity
 * pertaining to the software without specific prior written
 * approval of the Supremica.
 *
 * SUPREMICA AND KA MAKES NO REPRESENTATIONS ABOUT THE
 * SUITABILITY OF THE SOFTWARE FOR ANY PURPOSE.
 * IT IS PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY.
 *
 * Supremica or KA shall not be liable for any damages
 * suffered by Licensee from the use of this software.
 *
 * Supremica is owned and represented by KA.
 */

package org.supremica.external.robotCoordination.RobotStudio;

import org.supremica.external.comInterfaces.robotstudio_3_1.RobotStudio.*;
import org.supremica.external.comInterfaces.robotstudio_3_1.RobotStudio.enums.RsObjectType;
import org.supremica.external.robotCoordination.*;

/**
 * Listener for detecting when targets are reached and when collisions
 * begin and end.
 */
public class MechListener
    extends MechanismListener
{
    private RSRobot robot;
    private RobotListener robotListener;
    
    public MechListener(RSRobot robot) 
    {
		super(robot);
		
		robotListener = robot.getRobotListener();
    }
	
    ///////////////////////////////////////////////
    // Events generated by RobotStudio.Mechanism //
    ///////////////////////////////////////////////
	
	public synchronized int collisionStart(RsObject collidingObject)
    {
		try 
		{
			if (collidingObject.getObjectType() == RsObjectType.rsObjectTypeEntity)
			{				
				int time = (int) controller.getMotionTime() * 1000;
				
				robotListener.collisionStart(makeVolume(collidingObject), time);
			}		
		}
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
		return 0;
    }
    
    public synchronized int collisionEnd(RsObject collidingObject)
    {
		try 
		{
			if (collidingObject.getObjectType() == RsObjectType.rsObjectTypeEntity)
			{			
				int time = (int) controller.getMotionTime() * 1000;
				
				robotListener.collisionEnd(makeVolume(collidingObject), time);
			}		
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
		return 0;
    }
	
    public synchronized int targetReached()
    {
		// 	{
		// 	    int time = (int) controller.getMotionTime() * 1000;
	    
		// 	    if (!leavingTarget)
		// 	    {
		// 		robotListener.collisionEnd(RSCell.FINISHCONFIGURATION_NAME, time);
		// 	    }
		// 	    else
		// 	    {
		// 		robotListener.collisionEnd(RSCell.STARTCONFIGURATION_NAME, time);
		// 	    }
		
		// 	    leavingTarget = !leavingTarget;
		// 	}
		// 	catch (Exception ex)
		// 	{
		// 	    ex.printStackTrace();
		// 	}
		
		return 0;
    }
	
    private Volume makeVolume(RsObject collidingObject) 
		throws Exception
    {
		String name = collidingObject.getName();
		
		if (robotListener instanceof BoxSpanGenerator) 
		{
			// Convert the name of the object to Coordinate and return a new RSBox
			return new RSBox(name, Converter.toCoordinate(name));

// 			ITransform trans = ((IEntity)collidingObject).getTransform();
// 			Coordinate coord = Converter.toCoordinate(trans);
		}
		
		return new RSVolume(name);
    }
}
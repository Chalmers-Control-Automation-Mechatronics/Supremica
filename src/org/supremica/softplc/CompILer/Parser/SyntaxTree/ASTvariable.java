/* Generated By:JJTree: Do not edit this line. ASTvariable.java */
package org.supremica.softplc.CompILer.Parser.SyntaxTree;

import org.supremica.softplc.CompILer.Parser.*;
import org.supremica.softplc.CompILer.CodeGen.Datatypes.*;

public class ASTvariable
	extends SimpleNode
{
	public ASTvariable(int id)
	{
		super(id);
	}

	public ASTvariable(parser p, int id)
	{
		super(p, id);
	}

	// Appended
	private String name;
	private String typeName;
	private boolean directVariable;
	private String fieldSelector;
	private String fieldSelectorTypeName;
	private boolean isFunctionBlock;

	/*
	 * Get-metoder
	 */
	public String getName()
	{
		return name;
	}

	public String getTypeName()
	{
		return typeName;
	}

	public TypeConstant getType()
	{
	    if (isFunctionBlock || HelpMethods.parseTypeConstants(typeName) == null)
		{
		    return TypeConstant.T_DERIVED;
		}
	    else
		{
		    return HelpMethods.parseTypeConstants(typeName);
		}
	}

	public String getFieldSelector()
	{
		return fieldSelector;
	}

	public String getFieldSelectorTypeName()
	{
		return fieldSelectorTypeName;
	}

	public TypeConstant getFieldSelectorType()
	{
	    if (HelpMethods.parseTypeConstants(fieldSelectorTypeName) == null)
		{ /*the fieldselector itself is probably a functionblock/other derived variable*/
		    return TypeConstant.T_DERIVED;
		}
	    else
		{
		    return HelpMethods.parseTypeConstants(fieldSelectorTypeName);
		}
	}

	public boolean isDirectVariable()
	{
		return directVariable;
	}

	public boolean isFunctionBlock()
	{
		return isFunctionBlock;
	}

	/*
	 * Set-metoder
	 */
	public void setName(String n)
	{
		name = n;
	}

	public void setTypeName(String typeName)
	{
		this.typeName = typeName;
	}

	public void setFieldSelector(String fieldSelector)
	{
		this.fieldSelector = fieldSelector;
	}

	public void setFieldSelectorTypeName(String fieldSelectorTypeName)
	{
		this.fieldSelectorTypeName = fieldSelectorTypeName;
	}

	public void setIsDirectVariable(boolean d)
	{
		directVariable = d;
	}

	public void setIsFunctionBlock(boolean isFunctionBlock)
	{
		this.isFunctionBlock = isFunctionBlock;
	}

	public String toString()
	{
		if (directVariable)
		{
			return "variable: direct_variable " + name;
		}
		else if (fieldSelector != null)
		{
			return "variable: symbolic_variable " + name + "." + fieldSelector + " type: " + typeName + " fieldtype: " + fieldSelectorTypeName + " isFB: " + isFunctionBlock;
		}
		else
		{
			return "variable: symbolic_variable " + name + " type: " + typeName;
		}
	}

	public Object visit(SimpleNodeVisitor v, Object o)
	{
		try
		{
			return v.visitVARIABLE(this, o);
		}
		catch (Exception e)
		{
			System.err.println("Caught Exception: " + e.getMessage());
			return null;
		}
	}
}

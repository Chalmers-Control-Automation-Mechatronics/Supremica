/* Generated By:JJTree: Do not edit this line. SimpleNode.java */
package org.supremica.softplc.CompILer.Parser.SyntaxTree;

import org.supremica.softplc.CompILer.Parser.*;

public class SimpleNode
	implements Node
{
	protected Node parent;
	protected Node[] children;
	protected int id;
	protected parser parser;

	public SimpleNode(int i)
	{
		id = i;
	}

	public SimpleNode(parser p, int i)
	{
		this(i);

		parser = p;
	}

	public void jjtOpen() {}

	public void jjtClose() {}

	public void jjtSetParent(Node n)
	{
		parent = n;
	}

	public Node jjtGetParent()
	{
		return parent;
	}

	public void jjtAddChild(Node n, int i)
	{
		if (children == null)
		{
			children = new Node[i + 1];
		}
		else if (i >= children.length)
		{
			Node c[] = new Node[i + 1];

			System.arraycopy(children, 0, c, 0, children.length);

			children = c;
		}

		children[i] = n;
	}


	public void jjtInsertChild(Node n, int i){
		{
			Node c[] = new Node[children.length+1];

			if (i == 0) {
				System.arraycopy(children, 0, c, 1, children.length);
			} else {
				System.arraycopy(children, 0, c, 0, i);
				System.arraycopy(children, i, c, i+1, children.length-i);
			}

			children = c;
		}
		children[i] = n;
	};


	public void jjtDeleteChild(int i){
		if (children.length<=1) {
			children = null;
		} else {
			Node c[] = new Node[children.length-1];

			if (i == children.length-1) {
				//Sista barnet tas bort
				System.arraycopy(children, 0, c, 0, children.length-1);
			} else if (i == 0) {
				//Första barnet tas bort
				System.arraycopy(children, 1, c, 0, children.length-1);
			} else {
				System.arraycopy(children, 0, c, 0, i);
				System.arraycopy(children, i+1, c, i, children.length-i-1);
			}

			children = c;
		}
	}

	public Node jjtGetChild(int i)
	{
		return children[i];
	}

	public int jjtGetNumChildren()
	{
		return (children == null)
			   ? 0
			   : children.length;
	}

	/*
	 * You can override these two methods in subclasses of SimpleNode to
	 *  customize the way the node appears when the tree is dumped.  If
	 *  your output uses more than one line you should override
	 *  toString(String), otherwise overriding toString() is probably all
	 *  you need to do.
	 */
	public String toString()
	{
		return parserTreeConstants.jjtNodeName[id];
	}

	public String toString(String prefix)
	{
		return prefix + toString();
	}

	/*
	 * Override this method if you want to customize how the node dumps
	 *  out its children.
	 */
	public void dump(String prefix)
	{
		System.out.println(toString(prefix));

		if (children != null)
		{
			for (int i = 0; i < children.length; ++i)
			{
				SimpleNode n = (SimpleNode) children[i];

				if (n != null)
				{
					n.dump(prefix + " ");
				}
			}
		}
	}

	public Object visit(SimpleNodeVisitor v, Object o)
	{
		return v.visitStandard(this, o);
	}

	public Node[] getChildren()
	{
		return children;
	}
}

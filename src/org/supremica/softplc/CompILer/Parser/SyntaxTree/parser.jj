/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. parser.jj */
/*@egen*/                          



PARSER_BEGIN(parser)

package org.supremica.softplc.CompILer.Parser.SyntaxTree;
import java.io.*;
import org.supremica.softplc.CompILer.Parser.*;
import java.util.StringTokenizer;



public class parser/*@bgen(jjtree)*/implements parserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTparserState jjtree = new JJTparserState();

/*@egen*/


  public static void main(String args[])
  {
    try
    {
    parser t = new parser(new BufferedReader(new FileReader(new File(args[0]))));
    try {
      SimpleNode n = t.Start();
      n.dump("");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
	catch (Throwable e) {System.out.println("Unable to parse input " + e);}
  }
}


PARSER_END(parser)


SKIP :
{
 " "
| "\t"
| "\r"
| "\n"
}


SKIP :
{
	"(*" : WithinComment
}

<WithinComment> SKIP :
{
	"*)" : DEFAULT
}

<WithinComment> MORE :
{
	<~[]>
}



SimpleNode Start() :
{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
	(library_element_declaration())*

		<EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


/*
 *  =====================================
 *  B.0 Programming model
 *  =====================================
 */


void library_element_declaration()       :
{}
{
	//	data_type_declaration()
	//  | function_declaration()
	      function_block_declaration()
		| program_declaration()
	   //  | configuration_declaration()
			  | java_block_declaration() /* Added in addition to the
										  * normal grammar to handle
										  * calls to function blocks
										  * programmed in java.
										  */
}




/*
 *  =====================================
 *  B.1.1 Letters, digits and identifiers
 *  =====================================
 */


/*
 *  ===============
 *  B.1.2 Constants
 *  ===============
 */

Operand constant()       :
{
	String s;
	Operand o = new Operand();
}
{
	(
      s = numeric_literal() {o.type = "numeric_literal";}
	  | s = character_string() {o.type = "character_string";}
        //                | <time_literal>
        //                | <bit_string_literal>
	  | s = boolean_literal() {o.type = "boolean_literal";}
	)

	{
		o.value = s;
		return o;
	}

}


/*
 *  ==========================
 *  B.1.2.1   Numeric literals
 *  ==========================
 */

String numeric_literal() :
{/*@bgen(jjtree) numeric_literal */
        ASTnumeric_literal jjtn000 = new ASTnumeric_literal(JJTNUMERIC_LITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t = null;
}
{/*@bgen(jjtree) numeric_literal */
        try {
/*@egen*/
	(t = <integer_literal>  | t= <real_literal>)/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
			jjtn000.setName(t.image);
			return t.image;
		}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

TOKEN: /*integer_literal*/
{
	<integer_literal: (<integer_type_name>  "#")? (  <signed_integer>
	                                               | <binary_integer>
                                                   | <octal_integer>
                                                   | <hex_integer> ) >
}



TOKEN: /* signed_integer */
{
	<signed_integer: ("+" | "-")? <integer> >
}


TOKEN : /* integer */
{
	< integer: <digit> (("_")? <digit>)* >
}



TOKEN: /* binary_integer */
{
	< binary_integer: "2#" <bit> (("_")? <bit>)* >
      | < #bit: "1" | "0" >
}


TOKEN: /* octal_integer */
{
	< octal_integer: "8#" <octal_digit> (("_")? <octal_digit>)* >
      | < #octal_digit: "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" >
}


TOKEN: /* hex_integer */
{
	< hex_integer: "16#" <hex_digit> (("_")? <hex_digit>)* >
      | < #hex_digit:  <digit> | "A" | "B" | "C" | "D" | "E" | "F" >
}



TOKEN: /* real_literal */
{
	<real_literal: ( <real_type_name> "#" )? <signed_integer> "." <integer> (<exponent>)* >
| < #exponent: ("E" | "e") ("+"|"-")? <integer> >
}



TOKEN: /* bit_string_literal */
{
	<bit_string_literal: (("BYTE" | "WORD" | "DWORD" | "LWORD") "#" )?
	                      (  <integer>
                           | <binary_integer>
                           | <octal_integer>
                           | <hex_integer>) >
}


String boolean_literal() :
{/*@bgen(jjtree) boolean_literal */
        ASTboolean_literal jjtn000 = new ASTboolean_literal(JJTBOOLEAN_LITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) boolean_literal */
    try {
/*@egen*/
    t = <bool_literal>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
		return t.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

TOKEN: /* bool_literal */
{
	< bool_literal: (("BOOL#")? ("1" | "0")) | "TRUE" | "FALSE" >
}


/*
 *  ===============================
 *  B.1.2.2  Character strings
 *  ===============================
 */


String character_string() :
{/*@bgen(jjtree) character_string */
        ASTcharacter_string jjtn000 = new ASTcharacter_string(JJTCHARACTER_STRING);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) character_string */
        try {
/*@egen*/
	t = <single_byte_character_string> | t = <double_byte_character_string>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
        jjtn000.setName(t.image);
		return t.image;
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

TOKEN: /* single_byte_character_string */
{
	< single_byte_character_string: "'" (<single_byte_character_representation>)* "'" >
}


TOKEN: /* double_byte_character_string */
{
	< double_byte_character_string: "\"" (<double_byte_character_representation>)* "\"" >
}


TOKEN: /* single_byte_character_representation */
{
	< #single_byte_character_representation: <common_character_representation>
                                            | "$'" | "\"" | "$"
                                            | <hex_digit> <hex_digit> >
}


TOKEN: /* double_byte_character_representation */
{
	< #double_byte_character_representation: <common_character_representation>
                                            | "$\"" | "'" | "$"
                                            | <hex_digit> <hex_digit>
                                              <hex_digit> <hex_digit> >
}



TOKEN:  /* common_character_representation */
	/* Egna till\u00e4gg:
	 * " "
	 * "\u00e5", ...
	 */

{
	< #common_character_representation: "!" | "#" |"%" | "&" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" |  "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | ":" | ";" | "<" | "=" | ">" | "?" | "@" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "[" | "\\" | "]" | "^" | "_" | "`" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "{" | "|" | "}" | "~" | "$$" | "$L" | "$N" | "$P" | "$R" | "$T" | "$l" | "$n" | "$p" | "$r" | "$t" | " " | "\u00e5" | "\u00e4" | "\u00f6" | "\u00c5" | "\u00c4" | "\u00d6">
}


/*
 *  ======================
 *  B.1.2.3 Time literals
 *  ======================
 */

void time_literal() :
{/*@bgen(jjtree) time_literal */
  ASTtime_literal jjtn000 = new ASTtime_literal(JJTTIME_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) time_literal */
        try {
/*@egen*/
	duration() | time_of_day() | date() | date_and_time()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/*
 *  ===================
 *  B.1.2.3.1 Duration
 *  ===================
 */

void duration() :
{/*@bgen(jjtree) duration */
  ASTduration jjtn000 = new ASTduration(JJTDURATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) duration */
        try {
/*@egen*/
	("T" | "TIME") "#" ("-")? interval()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void interval() :
{/*@bgen(jjtree) interval */
  ASTinterval jjtn000 = new ASTinterval(JJTINTERVAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) interval */
          try {
/*@egen*/
	  LOOKAHEAD(3) days()
	| LOOKAHEAD(3) hours()
	| LOOKAHEAD(3) minutes()
	| LOOKAHEAD(3) seconds()
	| milliseconds()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}


void days() :
{/*@bgen(jjtree) days */
  ASTdays jjtn000 = new ASTdays(JJTDAYS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) days */
        try {
/*@egen*/
	LOOKAHEAD(3) fixed_point() ("d") | <integer> ("d") ("_")? hours()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void fixed_point() :
{/*@bgen(jjtree) fixed_point */
  ASTfixed_point jjtn000 = new ASTfixed_point(JJTFIXED_POINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fixed_point */
        try {
/*@egen*/
	<integer> ("." <integer>)?/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void hours() :
{/*@bgen(jjtree) hours */
  ASThours jjtn000 = new ASThours(JJTHOURS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) hours */
        try {
/*@egen*/
	LOOKAHEAD(3) fixed_point() ("h") | <integer> ("h") ("_")? minutes()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void minutes() :
{/*@bgen(jjtree) minutes */
  ASTminutes jjtn000 = new ASTminutes(JJTMINUTES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) minutes */
        try {
/*@egen*/
	LOOKAHEAD(3) fixed_point() ("m")  | <integer> ("m") ("_")? seconds()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void seconds() :
{/*@bgen(jjtree) seconds */
  ASTseconds jjtn000 = new ASTseconds(JJTSECONDS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) seconds */
        try {
/*@egen*/
	LOOKAHEAD(3) fixed_point() ("s") | <integer> ("s") ("_")? milliseconds()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void milliseconds() :
{/*@bgen(jjtree) milliseconds */
  ASTmilliseconds jjtn000 = new ASTmilliseconds(JJTMILLISECONDS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) milliseconds */
        try {
/*@egen*/
	fixed_point() ("ms")/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/*
 *  ================================
 *  B.1.2.3.2  Time of day and date
 *  ================================
 */

void time_of_day() :
{/*@bgen(jjtree) time_of_day */
  ASTtime_of_day jjtn000 = new ASTtime_of_day(JJTTIME_OF_DAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) time_of_day */
        try {
/*@egen*/
	("TIME_OF_DAY" | "TOD")  "#" daytime()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void daytime() :
{/*@bgen(jjtree) daytime */
  ASTdaytime jjtn000 = new ASTdaytime(JJTDAYTIME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) daytime */
        try {
/*@egen*/
	day_hour() ":" day_minute() ":" day_second()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void day_hour() :
{/*@bgen(jjtree) day_hour */
  ASTday_hour jjtn000 = new ASTday_hour(JJTDAY_HOUR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) day_hour */
        try {
/*@egen*/
	<integer>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void day_minute() :
{/*@bgen(jjtree) day_minute */
  ASTday_minute jjtn000 = new ASTday_minute(JJTDAY_MINUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) day_minute */
        try {
/*@egen*/
	<integer>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void day_second() :
{/*@bgen(jjtree) day_second */
  ASTday_second jjtn000 = new ASTday_second(JJTDAY_SECOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) day_second */
        try {
/*@egen*/
	fixed_point()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void date() :
{/*@bgen(jjtree) date */
  ASTdate jjtn000 = new ASTdate(JJTDATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) date */
        try {
/*@egen*/
	("DATE#" | "D#") date_literal()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void date_literal() :
{/*@bgen(jjtree) date_literal */
  ASTdate_literal jjtn000 = new ASTdate_literal(JJTDATE_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) date_literal */
        try {
/*@egen*/
	year() "-" month() "-" day()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void year() :
{/*@bgen(jjtree) year */
  ASTyear jjtn000 = new ASTyear(JJTYEAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) year */
        try {
/*@egen*/
	<integer>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void month() :
{/*@bgen(jjtree) month */
  ASTmonth jjtn000 = new ASTmonth(JJTMONTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) month */
        try {
/*@egen*/
	<integer>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void day() :
{/*@bgen(jjtree) day */
  ASTday jjtn000 = new ASTday(JJTDAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) day */
        try {
/*@egen*/
	<integer>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void date_and_time() :
{/*@bgen(jjtree) date_and_time */
  ASTdate_and_time jjtn000 = new ASTdate_and_time(JJTDATE_AND_TIME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) date_and_time */
        try {
/*@egen*/
	("DATE_AND_TIME" | "DT") "#" date_literal() "-" daytime()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/*
 *  ===================
 *  B.1.3   Data types
 *  ===================
 */

void data_type_name() :
{/*@bgen(jjtree) data_type_name */
  ASTdata_type_name jjtn000 = new ASTdata_type_name(JJTDATA_TYPE_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) data_type_name */
        try {
/*@egen*/
	non_generic_type_name() | <generic_type_name>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void non_generic_type_name() :
{/*@bgen(jjtree) non_generic_type_name */
  ASTnon_generic_type_name jjtn000 = new ASTnon_generic_type_name(JJTNON_GENERIC_TYPE_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) non_generic_type_name */
        try {
/*@egen*/
	elementary_type_name() | derived_type_name()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/*
 *  ===============================
 *  B.1.3.1  Elementary data types
 *  ===============================
 */


Token elementary_type_name() :
{/*@bgen(jjtree) elementary_type_name */
        ASTelementary_type_name jjtn000 = new ASTelementary_type_name(JJTELEMENTARY_TYPE_NAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) elementary_type_name */
    try {
/*@egen*/
    (     t=numeric_type_name()
        | t = <date_type_name>
        | t = <bit_string_type_name>
        | t = "STRING"
        | t = "WSTRING"
        | t = "TIME")/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/

  {
	  jjtn000.setName(t.image);
	  return t;
  }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}



Token numeric_type_name()       :
{
	Token t;
}
{
	//	integer_type_name() | <real_type_name>
    (t = <integer_type_name> | t = <real_type_name>)
        {
			return t;
		}
}

TOKEN: /*integer_type_name*/
{
	<integer_type_name: "SINT" | "INT" | "DINT" | "LINT" | "USINT" | "UINT" | "UDINT" | "ULINT" >
}


TOKEN: /* real_type_name */
{
	< real_type_name: "REAL" | "LREAL" >
}


TOKEN: /* date_type_name */
{
	< date_type_name: "DATE" | "TIME_OF_DAY" | "TOD"  | "DATE_AND_TIME" | "DT" >
}


TOKEN: /* bit_string_type_name */
{
	< bit_string_type_name: "BOOL" | "BYTE" | "WORD" | "DWORD" | "LWORD" >
}


/*
 *  ============================
 *  B.1.3.2  Generic data types
 *  ============================
 */


TOKEN: /* generic_type_name */
{
	< generic_type_name: "ANY" | "ANY_DERIVED" | "ANY_ELEMENTARY" | "ANY_MAGNITUDE" | "ANY_NUM" | "ANY_REAL" | "ANY_INT" | "ANY_BIT" | "ANY_STRING" | "ANY_DATE" >
}




/*
 *  ============================
 *  B.1.3.3  Derived data types
 *  ============================
 */

void derived_type_name() :
{/*@bgen(jjtree) derived_type_name */
  ASTderived_type_name jjtn000 = new ASTderived_type_name(JJTDERIVED_TYPE_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) derived_type_name */
        try {
/*@egen*/
	LOOKAHEAD(2) single_element_type_name()
	| LOOKAHEAD(2) array_type_name()
	| LOOKAHEAD(2)structure_type_name()
	| string_type_name()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void single_element_type_name() :
{/*@bgen(jjtree) single_element_type_name */
  ASTsingle_element_type_name jjtn000 = new ASTsingle_element_type_name(JJTSINGLE_ELEMENT_TYPE_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) single_element_type_name */
        try {
/*@egen*/
	LOOKAHEAD(2) simple_type_name()
	| LOOKAHEAD(2) subrange_type_name()
	| enumerated_type_name()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Token simple_type_name() :
{/*@bgen(jjtree) simple_type_name */
 ASTsimple_type_name jjtn000 = new ASTsimple_type_name(JJTSIMPLE_TYPE_NAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) simple_type_name */
        try {
/*@egen*/
	t = <identifier>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setName(t.image);
		return t;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void subrange_type_name() :
{/*@bgen(jjtree) subrange_type_name */
  ASTsubrange_type_name jjtn000 = new ASTsubrange_type_name(JJTSUBRANGE_TYPE_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) subrange_type_name */
        try {
/*@egen*/
	<identifier>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Token enumerated_type_name() :
{/*@bgen(jjtree) enumerated_type_name */
        ASTenumerated_type_name jjtn000 = new ASTenumerated_type_name(JJTENUMERATED_TYPE_NAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) enumerated_type_name */
        try {
/*@egen*/
	t = <identifier>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return t;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void array_type_name() :
{/*@bgen(jjtree) array_type_name */
  ASTarray_type_name jjtn000 = new ASTarray_type_name(JJTARRAY_TYPE_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) array_type_name */
        try {
/*@egen*/
	<identifier>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void structure_type_name() :
{/*@bgen(jjtree) structure_type_name */
  ASTstructure_type_name jjtn000 = new ASTstructure_type_name(JJTSTRUCTURE_TYPE_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) structure_type_name */
        try {
/*@egen*/
	<identifier>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void data_type_declaration() :
{/*@bgen(jjtree) data_type_declaration */
  ASTdata_type_declaration jjtn000 = new ASTdata_type_declaration(JJTDATA_TYPE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) data_type_declaration */
        try {
/*@egen*/
	"TYPE" type_declaration() ";" (type_declaration() ";")* "END_TYPE"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void type_declaration() :
{/*@bgen(jjtree) type_declaration */
  ASTtype_declaration jjtn000 = new ASTtype_declaration(JJTTYPE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) type_declaration */
        try {
/*@egen*/
	LOOKAHEAD(3) single_element_type_declaration()
	| LOOKAHEAD(3) array_type_declaration()
 	| LOOKAHEAD(3) structure_type_declaration()
	| string_type_declaration()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void single_element_type_declaration() :
{/*@bgen(jjtree) single_element_type_declaration */
  ASTsingle_element_type_declaration jjtn000 = new ASTsingle_element_type_declaration(JJTSINGLE_ELEMENT_TYPE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) single_element_type_declaration */
        try {
/*@egen*/
	LOOKAHEAD(3) simple_type_declaration()
	| LOOKAHEAD(3) subrange_type_declaration()
	| enumerated_type_declaration()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void simple_type_declaration() :
{/*@bgen(jjtree) simple_type_declaration */
  ASTsimple_type_declaration jjtn000 = new ASTsimple_type_declaration(JJTSIMPLE_TYPE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) simple_type_declaration */
        try {
/*@egen*/
	simple_type_name() ":" simple_spec_init()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Token simple_spec_init() :
{/*@bgen(jjtree) simple_spec_init */
        ASTsimple_spec_init jjtn000 = new ASTsimple_spec_init(JJTSIMPLE_SPEC_INIT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) simple_spec_init */
        try {
/*@egen*/
	t = simple_specification() (":=" constant())?/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{
		jjtn000.setTypeName(t.image);
		return t;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Token simple_specification() :
{/*@bgen(jjtree) simple_specification */
        ASTsimple_specification jjtn000 = new ASTsimple_specification(JJTSIMPLE_SPECIFICATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) simple_specification */
        try {
/*@egen*/
	(t = elementary_type_name() | t = simple_type_name())/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
			jjtn000.setTypeName(t.image);
			return t;
		}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void subrange_type_declaration() :
{/*@bgen(jjtree) subrange_type_declaration */
  ASTsubrange_type_declaration jjtn000 = new ASTsubrange_type_declaration(JJTSUBRANGE_TYPE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) subrange_type_declaration */
        try {
/*@egen*/
	subrange_type_name() ":" subrange_spec_init()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void subrange_spec_init() :
{/*@bgen(jjtree) subrange_spec_init */
  ASTsubrange_spec_init jjtn000 = new ASTsubrange_spec_init(JJTSUBRANGE_SPEC_INIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) subrange_spec_init */
        try {
/*@egen*/
	subrange_specification() (":=" <signed_integer>)?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void subrange_specification() :
{/*@bgen(jjtree) subrange_specification */
  ASTsubrange_specification jjtn000 = new ASTsubrange_specification(JJTSUBRANGE_SPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) subrange_specification */
        try {
/*@egen*/
	<integer_type_name> "(" subrange() ")" | subrange_type_name()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void subrange() :
{/*@bgen(jjtree) subrange */
  ASTsubrange jjtn000 = new ASTsubrange(JJTSUBRANGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) subrange */
        try {
/*@egen*/
	<signed_integer> ".." <signed_integer>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void enumerated_type_declaration() :
{/*@bgen(jjtree) enumerated_type_declaration */
  ASTenumerated_type_declaration jjtn000 = new ASTenumerated_type_declaration(JJTENUMERATED_TYPE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) enumerated_type_declaration */
        try {
/*@egen*/
	enumerated_type_name() ":" enumerated_spec_init()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void enumerated_spec_init() :
{/*@bgen(jjtree) enumerated_spec_init */
  ASTenumerated_spec_init jjtn000 = new ASTenumerated_spec_init(JJTENUMERATED_SPEC_INIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) enumerated_spec_init */
        try {
/*@egen*/
	enumerated_specification() (":=" enumerated_value() )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void enumerated_specification() :
{/*@bgen(jjtree) enumerated_specification */
  ASTenumerated_specification jjtn000 = new ASTenumerated_specification(JJTENUMERATED_SPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) enumerated_specification */
        try {
/*@egen*/
	( "(" enumerated_value() ("," enumerated_value())* ")" )
	| enumerated_type_name()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Operand enumerated_value() :
{/*@bgen(jjtree) enumerated_value */
        ASTenumerated_value jjtn000 = new ASTenumerated_value(JJTENUMERATED_VALUE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t1 = null;
	Token t2;
	Operand o = new Operand();
}
{/*@bgen(jjtree) enumerated_value */
        try {
/*@egen*/
	((LOOKAHEAD(2) t1=enumerated_type_name() "#")? t2=<identifier>)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		//		return (t1==null ? t2.image : t1.image + "#" + t2.image);
		if (t1==null) {
			o.value = t2.image;
		} else {
			o.value = t1.image + "#" + t2.image;
		}
		o.type = "enumerated_value";
		return o;

	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void array_type_declaration() :
{/*@bgen(jjtree) array_type_declaration */
  ASTarray_type_declaration jjtn000 = new ASTarray_type_declaration(JJTARRAY_TYPE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) array_type_declaration */
        try {
/*@egen*/
	array_type_name() ":" array_spec_init()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void array_spec_init() :
{/*@bgen(jjtree) array_spec_init */
  ASTarray_spec_init jjtn000 = new ASTarray_spec_init(JJTARRAY_SPEC_INIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) array_spec_init */
        try {
/*@egen*/
	array_specification() (":=" array_initialization())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void array_specification() :
{/*@bgen(jjtree) array_specification */
  ASTarray_specification jjtn000 = new ASTarray_specification(JJTARRAY_SPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) array_specification */
        try {
/*@egen*/
	array_type_name()
	| "ARRAY" "[" subrange() ("," subrange())* "]" "OF" non_generic_type_name()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void array_initialization() :
{/*@bgen(jjtree) array_initialization */
  ASTarray_initialization jjtn000 = new ASTarray_initialization(JJTARRAY_INITIALIZATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) array_initialization */
        try {
/*@egen*/
	"[" array_initial_elements() ("," array_initial_elements())* "]"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void array_initial_elements() :
{/*@bgen(jjtree) array_initial_elements */
  ASTarray_initial_elements jjtn000 = new ASTarray_initial_elements(JJTARRAY_INITIAL_ELEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) array_initial_elements */
        try {
/*@egen*/
	array_initial_element() | <integer> "(" (array_initial_element())? ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void array_initial_element() :
{/*@bgen(jjtree) array_initial_element */
  ASTarray_initial_element jjtn000 = new ASTarray_initial_element(JJTARRAY_INITIAL_ELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) array_initial_element */
        try {
/*@egen*/
	constant()
	| enumerated_value()
	| structure_initialization()
	| array_initialization()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void structure_type_declaration() :
{/*@bgen(jjtree) structure_type_declaration */
  ASTstructure_type_declaration jjtn000 = new ASTstructure_type_declaration(JJTSTRUCTURE_TYPE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) structure_type_declaration */
        try {
/*@egen*/
	structure_type_name() ":" structure_specification()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void structure_specification() :
{/*@bgen(jjtree) structure_specification */
  ASTstructure_specification jjtn000 = new ASTstructure_specification(JJTSTRUCTURE_SPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) structure_specification */
        try {
/*@egen*/
	structure_declaration() | initialized_structure()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void initialized_structure() :
{/*@bgen(jjtree) initialized_structure */
  ASTinitialized_structure jjtn000 = new ASTinitialized_structure(JJTINITIALIZED_STRUCTURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) initialized_structure */
        try {
/*@egen*/
	structure_type_name() (":=" structure_initialization())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void structure_declaration() :
{/*@bgen(jjtree) structure_declaration */
  ASTstructure_declaration jjtn000 = new ASTstructure_declaration(JJTSTRUCTURE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) structure_declaration */
        try {
/*@egen*/
	"STRUCT" structure_element_declaration() ";"
	(structure_element_declaration() ";")* "END_STRUCT"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void structure_element_declaration() :
{/*@bgen(jjtree) structure_element_declaration */
  ASTstructure_element_declaration jjtn000 = new ASTstructure_element_declaration(JJTSTRUCTURE_ELEMENT_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) structure_element_declaration */
        try {
/*@egen*/
	structure_element_name() ":"
	(LOOKAHEAD(3) simple_spec_init()
	 | LOOKAHEAD(3) subrange_spec_init()
	 | LOOKAHEAD(3) enumerated_spec_init()
	 | LOOKAHEAD(3) array_spec_init()
	 | initialized_structure() )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void structure_element_name() :
{/*@bgen(jjtree) structure_element_name */
  ASTstructure_element_name jjtn000 = new ASTstructure_element_name(JJTSTRUCTURE_ELEMENT_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) structure_element_name */
        try {
/*@egen*/
	<identifier>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void structure_initialization() :
{/*@bgen(jjtree) structure_initialization */
  ASTstructure_initialization jjtn000 = new ASTstructure_initialization(JJTSTRUCTURE_INITIALIZATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) structure_initialization */
        try {
/*@egen*/
	"(" structure_element_initialization()
	(","  structure_element_initialization())* ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void structure_element_initialization() :
{/*@bgen(jjtree) structure_element_initialization */
  ASTstructure_element_initialization jjtn000 = new ASTstructure_element_initialization(JJTSTRUCTURE_ELEMENT_INITIALIZATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) structure_element_initialization */
        try {
/*@egen*/
	structure_element_name() ":="
	(constant()
	 | enumerated_value()
	 | array_initialization()
	 | structure_initialization() )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void string_type_name() :
{/*@bgen(jjtree) string_type_name */
  ASTstring_type_name jjtn000 = new ASTstring_type_name(JJTSTRING_TYPE_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) string_type_name */
        try {
/*@egen*/
	<identifier>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void string_type_declaration() :
{/*@bgen(jjtree) string_type_declaration */
  ASTstring_type_declaration jjtn000 = new ASTstring_type_declaration(JJTSTRING_TYPE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) string_type_declaration */
        try {
/*@egen*/
	string_type_name() ":"
	("STRING"|"WSTRING") ("[" <integer> "]")? (":=" character_string())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


/*
 *  =================
 *  B.1.4  Variables
 *  =================
 */


Operand variable() : //#void :
{/*@bgen(jjtree) variable */
        ASTvariable jjtn000 = new ASTvariable(JJTVARIABLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token  d = null;
	String s = null;
	Operand o = new Operand();
}
{/*@bgen(jjtree) variable */
        try {
/*@egen*/
	(d = <direct_variable> | s = symbolic_variable())/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		if (d != null){
			jjtn000.setIsDirectVariable(true);
			jjtn000.setName(d.image);

			o.type = "direct_variable";
			o.value = d.image;
		}
		else {
			jjtn000.setIsDirectVariable(false);
			StringTokenizer st = new StringTokenizer(s, ".");
			jjtn000.setName(st.nextToken());
			if (st.hasMoreTokens()) {
				jjtn000.setFieldSelector(st.nextToken());
			}

			o.type = "symbolic_variable";
			o.value = s;
		}

		//		return (d!=null ? d.image : s);
		return o;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


String symbolic_variable()       :
{
	String m = null;
	Token  v = null;
}
{
	(  LOOKAHEAD(3) m = multi_element_variable()
       | LOOKAHEAD(3) v = variable_name()
	    )

	{
		if (m != null) {
			return m;
		} else {
			return v.image;
		}
	}

/* multi_element_variable ger left recursion-fel
	variable_name() | multi_element_variable()
*/
}


Token variable_name() ://#void:
{/*@bgen(jjtree) variable_name */
        ASTvariable_name jjtn000 = new ASTvariable_name(JJTVARIABLE_NAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) variable_name */
        try {
/*@egen*/
	t = <identifier>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setName(t.image); // used in var1_list()
      return t;                 // result used in variable()
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/*
 *  ========================================
 *  B.1.4.1  Directly represented variables
 *  ========================================
 */

TOKEN:
{
	<direct_variable: "%" <location_prefix> <size_prefix> <integer> ("." <integer>)* >
	  | <#location_prefix : "I" | "Q" | "M">
// <NIL> ger varning, s\u00e5 ta bort den f\u00f6r tillf\u00e4llet
      | <#size_prefix: "X" | "B" | "W" | "D" | "L" >
}



/*
 *  =================================
 *  B.1.4.2  Multi-element variables
 *  =================================
 */


String multi_element_variable() :
{/*@bgen(jjtree) multi_element_variable */
        ASTmulti_element_variable jjtn000 = new ASTmulti_element_variable(JJTMULTI_ELEMENT_VARIABLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	String varName;
}
{/*@bgen(jjtree) multi_element_variable */
        try {
/*@egen*/
	varName = structured_variable()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ // | array_variable()
	{
		return varName;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}


void array_variable() :
{/*@bgen(jjtree) array_variable */
  ASTarray_variable jjtn000 = new ASTarray_variable(JJTARRAY_VARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) array_variable */
        try {
/*@egen*/
	subscripted_variable() subscript_list()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void subscripted_variable() :
{/*@bgen(jjtree) subscripted_variable */
  ASTsubscripted_variable jjtn000 = new ASTsubscripted_variable(JJTSUBSCRIPTED_VARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) subscripted_variable */
        try {
/*@egen*/
	symbolic_variable()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void subscript_list() :
{/*@bgen(jjtree) subscript_list */
  ASTsubscript_list jjtn000 = new ASTsubscript_list(JJTSUBSCRIPT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) subscript_list */
        try {
/*@egen*/
	"[" subscript() ("," subscript())* "]"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void subscript() :
{/*@bgen(jjtree) subscript */
  ASTsubscript jjtn000 = new ASTsubscript(JJTSUBSCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) subscript */
        try {
/*@egen*/
	"expression"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ //ska bort sen
//	expression()
}


String structured_variable() :
{/*@bgen(jjtree) structured_variable */
        ASTstructured_variable jjtn000 = new ASTstructured_variable(JJTSTRUCTURED_VARIABLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token r;
	Token f;
}
{/*@bgen(jjtree) structured_variable */
        try {
/*@egen*/
	//	t = record_variable() (LOOKAHEAD(2) "." record_variable())* "." field_selector()
	r = record_variable() "." f = field_selector()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return r.image + "." + f.image;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}


Token record_variable() :
{/*@bgen(jjtree) record_variable */
        ASTrecord_variable jjtn000 = new ASTrecord_variable(JJTRECORD_VARIABLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) record_variable */
        try {
/*@egen*/
	t = variable_name()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return t;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	// Ger left recursion-fel
	//	symbolic_variable()
}


Token field_selector() :
{/*@bgen(jjtree) field_selector */
 ASTfield_selector jjtn000 = new ASTfield_selector(JJTFIELD_SELECTOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token t;
}
{/*@bgen(jjtree) field_selector */
        try {
/*@egen*/
	t = <identifier>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setName(t.image);
		return t;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/*
 *  ========================================
 *  B.1.4.3  Declaration and initialization
 *  ========================================
 */

void input_declarations() :
{/*@bgen(jjtree) input_declarations */
  ASTinput_declarations jjtn000 = new ASTinput_declarations(JJTINPUT_DECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) input_declarations */
        try {
/*@egen*/
	"VAR_INPUT" ("RETAIN" | "NON_RETAIN")?
	(input_declaration() ";")+ "END_VAR"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void input_declaration() :
{/*@bgen(jjtree) input_declaration */
  ASTinput_declaration jjtn000 = new ASTinput_declaration(JJTINPUT_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) input_declaration */
        try {
/*@egen*/
	LOOKAHEAD(3) var_init_decl() | edge_declaration()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void edge_declaration() :
{/*@bgen(jjtree) edge_declaration */
  ASTedge_declaration jjtn000 = new ASTedge_declaration(JJTEDGE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) edge_declaration */
        try {
/*@egen*/
	var1_list() ":" ("BOOLR_EDGE" | "BOOLF_EDGE")/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void var_init_decl() :
{/*@bgen(jjtree) var_init_decl */
  ASTvar_init_decl jjtn000 = new ASTvar_init_decl(JJTVAR_INIT_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) var_init_decl */
        try {
/*@egen*/
	LOOKAHEAD(3) var1_init_decl()
	| LOOKAHEAD(3) array_var_init_decl()
	| LOOKAHEAD(3) structured_var_init_decl()
	| LOOKAHEAD(3) fb_name_decl()
		//fb_name_decl is unneccesary. function_block variables will
		//be parsed as temp_var_decl anyway, since there is no way to
		//distinguish between a function block name and a declared
		//data type name.
	| string_var_declaration()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void var1_init_decl() :
{/*@bgen(jjtree) var1_init_decl */
    ASTvar1_init_decl jjtn000 = new ASTvar1_init_decl(JJTVAR1_INIT_DECL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String[] names;
	Token t;
}
{/*@bgen(jjtree) var1_init_decl */
        try {
/*@egen*/
	names = var1_list()

	 ":"
		//M\u00e5ste fixa s\u00e5 att subrange... och enumerated... returnerar token, annars f\u00e5r man en varning om att t might not have been initialized.

		//	(LOOKAHEAD(3) t = simple_spec_init() | LOOKAHEAD(3) subrange_spec_init() | enumerated_spec_init())
		t = simple_spec_init()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{
		jjtn000.setNames(names);
		jjtn000.setTypeName(t.image);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/


}


String[] var1_list() :
{/*@bgen(jjtree) var1_list */
    ASTvar1_list jjtn000 = new ASTvar1_list(JJTVAR1_LIST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) var1_list */
        try {
/*@egen*/
	(
	 (t = variable_name() {jjtn000.addName(t.image);})
	 ("," t = variable_name() {jjtn000.addName(t.image);})*
	)/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
			return jjtn000.getNames();
		}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void array_var_init_decl() :
{/*@bgen(jjtree) array_var_init_decl */
  ASTarray_var_init_decl jjtn000 = new ASTarray_var_init_decl(JJTARRAY_VAR_INIT_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) array_var_init_decl */
        try {
/*@egen*/
	var1_list() ":" array_spec_init()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void structured_var_init_decl() :
{/*@bgen(jjtree) structured_var_init_decl */
  ASTstructured_var_init_decl jjtn000 = new ASTstructured_var_init_decl(JJTSTRUCTURED_VAR_INIT_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) structured_var_init_decl */
        try {
/*@egen*/
	var1_list() ":" initialized_structure()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void fb_name_decl() :
{/*@bgen(jjtree) fb_name_decl */
  ASTfb_name_decl jjtn000 = new ASTfb_name_decl(JJTFB_NAME_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fb_name_decl */
        try {
/*@egen*/
	fb_name_list() ":" function_block_type_name()
 	( ":=" structure_initialization() )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void fb_name_list() :
{/*@bgen(jjtree) fb_name_list */
  ASTfb_name_list jjtn000 = new ASTfb_name_list(JJTFB_NAME_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fb_name_list */
        try {
/*@egen*/
	fb_name() ("," fb_name())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void fb_name() :
{/*@bgen(jjtree) fb_name */
 ASTfb_name jjtn000 = new ASTfb_name(JJTFB_NAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) fb_name */
    try {
/*@egen*/
    t=<identifier>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {jjtn000.setName(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void output_declarations() :
{/*@bgen(jjtree) output_declarations */
  ASToutput_declarations jjtn000 = new ASToutput_declarations(JJTOUTPUT_DECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) output_declarations */
        try {
/*@egen*/
	"VAR_OUTPUT" ("RETAIN" | "NON_RETAIN")?
	(var_init_decl() ";")+
	"END_VAR"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void input_output_declarations() :
{/*@bgen(jjtree) input_output_declarations */
  ASTinput_output_declarations jjtn000 = new ASTinput_output_declarations(JJTINPUT_OUTPUT_DECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) input_output_declarations */
        try {
/*@egen*/
	"VAR_IN_OUT" var_declaration() ";" (var_declaration() ";")* "END_VAR"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void var_declaration() :
{/*@bgen(jjtree) var_declaration */
  ASTvar_declaration jjtn000 = new ASTvar_declaration(JJTVAR_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) var_declaration */
        try {
/*@egen*/
	//fb_name_decl is unneccesary. function_block variables will
	//be parsed as temp_var_decl anyway, since there is no way to
	//distinguish between a function block name and a declared
	//data type name.
	LOOKAHEAD(3) temp_var_decl() | fb_name_decl()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void temp_var_decl() :
{/*@bgen(jjtree) temp_var_decl */
  ASTtemp_var_decl jjtn000 = new ASTtemp_var_decl(JJTTEMP_VAR_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) temp_var_decl */
        try {
/*@egen*/
	LOOKAHEAD(3) var1_declaration()
	| LOOKAHEAD(3) array_var_declaration()
	| LOOKAHEAD(3) structured_var_declaration()
	| string_var_declaration()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void var1_declaration() :
{/*@bgen(jjtree) var1_declaration */
  ASTvar1_declaration jjtn000 = new ASTvar1_declaration(JJTVAR1_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) var1_declaration */
        try {
/*@egen*/
	var1_list() ":"
	(LOOKAHEAD(2) simple_specification()
	| LOOKAHEAD(2) subrange_specification()
	| enumerated_specification() )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void array_var_declaration() :
{/*@bgen(jjtree) array_var_declaration */
  ASTarray_var_declaration jjtn000 = new ASTarray_var_declaration(JJTARRAY_VAR_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) array_var_declaration */
        try {
/*@egen*/
	var1_list() ":" array_specification()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void structured_var_declaration() :
{/*@bgen(jjtree) structured_var_declaration */
  ASTstructured_var_declaration jjtn000 = new ASTstructured_var_declaration(JJTSTRUCTURED_VAR_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) structured_var_declaration */
        try {
/*@egen*/
	var1_list() ":" structure_type_name()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void var_declarations() :
{/*@bgen(jjtree) var_declarations */
  ASTvar_declarations jjtn000 = new ASTvar_declarations(JJTVAR_DECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) var_declarations */
        try {
/*@egen*/
	"VAR" ("CONSTANT")?  (var_init_decl() ";")+ "END_VAR"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void retentive_var_declarations() :
{/*@bgen(jjtree) retentive_var_declarations */
  ASTretentive_var_declarations jjtn000 = new ASTretentive_var_declarations(JJTRETENTIVE_VAR_DECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) retentive_var_declarations */
        try {
/*@egen*/
	"VAR" "RETAIN" (var_init_decl() ";" )+ "END_VAR"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void located_var_declarations() :
{/*@bgen(jjtree) located_var_declarations */
  ASTlocated_var_declarations jjtn000 = new ASTlocated_var_declarations(JJTLOCATED_VAR_DECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) located_var_declarations */
        try {
/*@egen*/
	"VAR" ("CONSTANT" | "RETAIN" | "NON_RETAIN")?
	located_var_decl() ";" (located_var_decl() ";")* "END_VAR"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void located_var_decl() :
{/*@bgen(jjtree) located_var_decl */
        ASTlocated_var_decl jjtn000 = new ASTlocated_var_decl(JJTLOCATED_VAR_DECL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token var = null;
	Token loc;

}
{/*@bgen(jjtree) located_var_decl */
        try {
/*@egen*/
	(var = variable_name())? loc = location() ":" located_var_spec_init()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{
		jjtn000.setVariableName(var.image);
		jjtn000.setLocation(loc.image);
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void external_var_declarations() :
{/*@bgen(jjtree) external_var_declarations */
  ASTexternal_var_declarations jjtn000 = new ASTexternal_var_declarations(JJTEXTERNAL_VAR_DECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) external_var_declarations */
        try {
/*@egen*/
	"VAR_EXTERNAL" ("CONSTANT")? external_declaration() ";"
	(external_declaration() ";")* "END_VAR"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void external_declaration() :
{/*@bgen(jjtree) external_declaration */
  ASTexternal_declaration jjtn000 = new ASTexternal_declaration(JJTEXTERNAL_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) external_declaration */
        try {
/*@egen*/
	global_var_name() ":"
	(LOOKAHEAD(2) simple_specification()
	| LOOKAHEAD(2) subrange_specification()
	| LOOKAHEAD(2) enumerated_specification()
	| LOOKAHEAD(2) array_specification()
	| LOOKAHEAD(2) structure_type_name()
	| function_block_type_name() )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void global_var_name() :
{/*@bgen(jjtree) global_var_name */
  ASTglobal_var_name jjtn000 = new ASTglobal_var_name(JJTGLOBAL_VAR_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) global_var_name */
        try {
/*@egen*/
	<identifier>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void global_var_declarations() :
{/*@bgen(jjtree) global_var_declarations */
  ASTglobal_var_declarations jjtn000 = new ASTglobal_var_declarations(JJTGLOBAL_VAR_DECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) global_var_declarations */
        try {
/*@egen*/
	"VAR_GLOBAL" ("CONSTANT" | "RETAIN")?
	global_var_decl() ";" (global_var_decl() ";")* "END_VAR"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void global_var_decl() :
{/*@bgen(jjtree) global_var_decl */
  ASTglobal_var_decl jjtn000 = new ASTglobal_var_decl(JJTGLOBAL_VAR_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) global_var_decl */
        try {
/*@egen*/
	global_var_spec() ":" (LOOKAHEAD(2) located_var_spec_init() | function_block_type_name())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void global_var_spec() :
{/*@bgen(jjtree) global_var_spec */
  ASTglobal_var_spec jjtn000 = new ASTglobal_var_spec(JJTGLOBAL_VAR_SPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) global_var_spec */
        try {
/*@egen*/
	LOOKAHEAD(2) global_var_list() | (global_var_name())? location()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void located_var_spec_init() :
{/*@bgen(jjtree) located_var_spec_init */
  ASTlocated_var_spec_init jjtn000 = new ASTlocated_var_spec_init(JJTLOCATED_VAR_SPEC_INIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) located_var_spec_init */
        try {
/*@egen*/
	LOOKAHEAD(3) simple_spec_init()
	| LOOKAHEAD(3) subrange_spec_init()
	| LOOKAHEAD(3) enumerated_spec_init()
	| LOOKAHEAD(3) array_spec_init()
	| LOOKAHEAD(3) initialized_structure()
		| <single_byte_string_spec> //nothing parses this way?
	| <double_byte_string_spec>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ //nothing parses this way?
}

Token location() :
{/*@bgen(jjtree) location */
        ASTlocation jjtn000 = new ASTlocation(JJTLOCATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token loc;
}
{/*@bgen(jjtree) location */
        try {
/*@egen*/
	"AT"
	loc = <direct_variable>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{
		jjtn000.setName(loc.image);
		return loc;
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void global_var_list() :
{/*@bgen(jjtree) global_var_list */
  ASTglobal_var_list jjtn000 = new ASTglobal_var_list(JJTGLOBAL_VAR_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) global_var_list */
        try {
/*@egen*/
	global_var_name() ("," global_var_name())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void string_var_declaration() :
{/*@bgen(jjtree) string_var_declaration */
  ASTstring_var_declaration jjtn000 = new ASTstring_var_declaration(JJTSTRING_VAR_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) string_var_declaration */
        try {
/*@egen*/
	LOOKAHEAD(3) single_byte_string_var_declaration() | double_byte_string_var_declaration()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void single_byte_string_var_declaration() :
{/*@bgen(jjtree) single_byte_string_var_declaration */
  ASTsingle_byte_string_var_declaration jjtn000 = new ASTsingle_byte_string_var_declaration(JJTSINGLE_BYTE_STRING_VAR_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) single_byte_string_var_declaration */
        try {
/*@egen*/
	var1_list() ":" <single_byte_string_spec>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

TOKEN: /* single_byte_string_spec */
{
	<single_byte_string_spec: "STRING" ("[" <integer> "]")? (":=" <single_byte_character_string> )?>
}

void double_byte_string_var_declaration() :
{/*@bgen(jjtree) double_byte_string_var_declaration */
  ASTdouble_byte_string_var_declaration jjtn000 = new ASTdouble_byte_string_var_declaration(JJTDOUBLE_BYTE_STRING_VAR_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) double_byte_string_var_declaration */
        try {
/*@egen*/
	var1_list() ":" <double_byte_string_spec>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

TOKEN: /* double_byte_string_spec */
{
	<double_byte_string_spec: "WSTRING" ("[" <integer> "]")? (":=" <double_byte_character_string> )? >
}

void incompl_located_var_declarations() :
{/*@bgen(jjtree) incompl_located_var_declarations */
  ASTincompl_located_var_declarations jjtn000 = new ASTincompl_located_var_declarations(JJTINCOMPL_LOCATED_VAR_DECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) incompl_located_var_declarations */
        try {
/*@egen*/
	"VAR" ("RETAIN"|"NON_RETAIN")?
	incompl_located_var_decl() ";" (incompl_located_var_decl() ";")* "END_VAR"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void incompl_located_var_decl() :
{/*@bgen(jjtree) incompl_located_var_decl */
  ASTincompl_located_var_decl jjtn000 = new ASTincompl_located_var_decl(JJTINCOMPL_LOCATED_VAR_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) incompl_located_var_decl */
        try {
/*@egen*/
	variable_name() incompl_location() ":" var_spec()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void incompl_location() :
{/*@bgen(jjtree) incompl_location */
  ASTincompl_location jjtn000 = new ASTincompl_location(JJTINCOMPL_LOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) incompl_location */
        try {
/*@egen*/
	("AT%I" | "AT%Q" | "AT%M") "*"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void var_spec() :
{/*@bgen(jjtree) var_spec */
  ASTvar_spec jjtn000 = new ASTvar_spec(JJTVAR_SPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) var_spec */
        try {
/*@egen*/
	LOOKAHEAD(2) simple_specification()
	| LOOKAHEAD(2) subrange_specification()
	| LOOKAHEAD(2) enumerated_specification()
	| LOOKAHEAD(2) array_specification()
	| structure_type_name()
	| "STRING" ("[" <integer> "]")?
	| "WSTRING" ("[" <integer> "]")?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


/*
 *  ==================================
 *  B.1.5  Program organization units
 *  ==================================
 */


/*
 *  ===================
 *  B.1.5.1  Functions
 *  ===================
 */


void function_name() :
{/*@bgen(jjtree) function_name */
  ASTfunction_name jjtn000 = new ASTfunction_name(JJTFUNCTION_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) function_name */
        try {
/*@egen*/
	derived_function_name()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void derived_function_name() :
{/*@bgen(jjtree) derived_function_name */
  ASTderived_function_name jjtn000 = new ASTderived_function_name(JJTDERIVED_FUNCTION_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) derived_function_name */
        try {
/*@egen*/
	<identifier>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void function_declaration() :
{/*@bgen(jjtree) function_declaration */
  ASTfunction_declaration jjtn000 = new ASTfunction_declaration(JJTFUNCTION_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) function_declaration */
        try {
/*@egen*/
	"FUNCTION" derived_function_name() ":"
	(elementary_type_name() | derived_type_name())
	( io_var_declarations() | function_var_decls() )*
	function_body() "END_FUNCTION"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void io_var_declarations() :
{/*@bgen(jjtree) io_var_declarations */
  ASTio_var_declarations jjtn000 = new ASTio_var_declarations(JJTIO_VAR_DECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) io_var_declarations */
        try {
/*@egen*/
	input_declarations() | output_declarations() | input_output_declarations()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void function_var_decls() :
{/*@bgen(jjtree) function_var_decls */
  ASTfunction_var_decls jjtn000 = new ASTfunction_var_decls(JJTFUNCTION_VAR_DECLS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) function_var_decls */
        try {
/*@egen*/
	"VAR" ("CONSTANT")? var2_init_decl() ";" (var2_init_decl() ";")* "END_VAR"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void function_body() :
{/*@bgen(jjtree) function_body */
  ASTfunction_body jjtn000 = new ASTfunction_body(JJTFUNCTION_BODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) function_body */
        try {
/*@egen*/
	//	ladder_diagram()
	//	| function_block_diagram()
	instruction_list()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	//	| statement_list()
}

void var2_init_decl() :
{/*@bgen(jjtree) var2_init_decl */
  ASTvar2_init_decl jjtn000 = new ASTvar2_init_decl(JJTVAR2_INIT_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) var2_init_decl */
        try {
/*@egen*/
	LOOKAHEAD(3) var1_init_decl()
	| LOOKAHEAD(3) array_var_init_decl()
	| LOOKAHEAD(3) structured_var_init_decl()
	| string_var_declaration()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


/*
 *  ========================
 *  B.1.5.2  Function blocks
 *  ========================
 */

void function_block_type_name() :
{/*@bgen(jjtree) function_block_type_name */
  ASTfunction_block_type_name jjtn000 = new ASTfunction_block_type_name(JJTFUNCTION_BLOCK_TYPE_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) function_block_type_name */
        try {
/*@egen*/
	derived_function_block_name()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ // standard_function_block_name()
}

/*
 * void standard_function_block_name() :
 *	<as defined in 2.5.2.3>
 */

void derived_function_block_name() :
{/*@bgen(jjtree) derived_function_block_name */
 ASTderived_function_block_name jjtn000 = new ASTderived_function_block_name(JJTDERIVED_FUNCTION_BLOCK_NAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) derived_function_block_name */
        try {
/*@egen*/
	t = <identifier>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void function_block_declaration() :
{/*@bgen(jjtree) function_block_declaration */
  ASTfunction_block_declaration jjtn000 = new ASTfunction_block_declaration(JJTFUNCTION_BLOCK_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) function_block_declaration */
        try {
/*@egen*/
	"FUNCTION_BLOCK" derived_function_block_name()
	( io_var_declarations() | other_var_declarations() )*
	function_block_body() "END_FUNCTION_BLOCK"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
 * Till\u00e4gg f\u00f6r JAVA_BLOCK 2002-04-15 av Anders
 * java_block_declaration \u00e4r endast till f\u00f6r att typdeklarara
 * function blocks som \u00e4r skrivna direkt i java ist. f\u00f6r i IL.
 * D\u00e4rf\u00f6r anv\u00e4nds exakt samma byggstenar i java_block_declaration
 * som i
 */
void java_block_declaration() :
{/*@bgen(jjtree) java_block_declaration */
  ASTjava_block_declaration jjtn000 = new ASTjava_block_declaration(JJTJAVA_BLOCK_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) java_block_declaration */
        try {
/*@egen*/
	"JAVA_BLOCK" derived_function_block_name()
		io_var_declarations()
	"END_JAVA_BLOCK"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
 * Slut JAVA_BLOCK-till\u00e4gg
 */



void other_var_declarations() :
{/*@bgen(jjtree) other_var_declarations */
  ASTother_var_declarations jjtn000 = new ASTother_var_declarations(JJTOTHER_VAR_DECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) other_var_declarations */
        try {
/*@egen*/
	LOOKAHEAD(3) external_var_declarations()
	| LOOKAHEAD(3) var_declarations()
	| LOOKAHEAD(3) retentive_var_declarations()
	| LOOKAHEAD(3) non_retentive_var_decls()
	| LOOKAHEAD(3) temp_var_decls()
	| incompl_located_var_declarations()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void temp_var_decls() :
{/*@bgen(jjtree) temp_var_decls */
  ASTtemp_var_decls jjtn000 = new ASTtemp_var_decls(JJTTEMP_VAR_DECLS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) temp_var_decls */
        try {
/*@egen*/
	"VAR_TEMP" temp_var_decl() ";" (temp_var_decl() ";")* "END_VAR"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void non_retentive_var_decls() :
{/*@bgen(jjtree) non_retentive_var_decls */
  ASTnon_retentive_var_decls jjtn000 = new ASTnon_retentive_var_decls(JJTNON_RETENTIVE_VAR_DECLS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) non_retentive_var_decls */
        try {
/*@egen*/
	"VAR" "NON_RETAIN" var_init_decl() ";" (var_init_decl() ";")* "END_VAR"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void function_block_body() :
{/*@bgen(jjtree) function_block_body */
  ASTfunction_block_body jjtn000 = new ASTfunction_block_body(JJTFUNCTION_BLOCK_BODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) function_block_body */
         try {
/*@egen*/
	//	sequential_function_chart()
	//	| ladder_diagram()
	//	| function_block_diagram()
	 instruction_list()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
	//	| statement_list()
}


/*
 *  ===================
 *  B.1.5.3  Functions
 *  ===================
 */

void program_type_name() :
{/*@bgen(jjtree) program_type_name */
 ASTprogram_type_name jjtn000 = new ASTprogram_type_name(JJTPROGRAM_TYPE_NAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) program_type_name */
        try {
/*@egen*/
	t = <identifier>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void program_declaration() :
{/*@bgen(jjtree) program_declaration */
  ASTprogram_declaration jjtn000 = new ASTprogram_declaration(JJTPROGRAM_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) program_declaration */
        try {
/*@egen*/
	"PROGRAM"
    program_type_name()
            (  (io_var_declarations()
				/* H\u00e4r beh\u00f6ves en kraftig lookahead f\u00f6r att skilja p\u00e5
                   other_var och located_var */
                | LOOKAHEAD(6) other_var_declarations()
                | located_var_declarations()
                | program_access_decls()))*
            function_block_body()
	"END_PROGRAM"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void program_access_decls() :
{/*@bgen(jjtree) program_access_decls */
  ASTprogram_access_decls jjtn000 = new ASTprogram_access_decls(JJTPROGRAM_ACCESS_DECLS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) program_access_decls */
        try {
/*@egen*/
	"VAR_ACCESS"
    program_access_decl() ";" (program_access_decl() ";" )*
    "END_VAR"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void program_access_decl() :
{/*@bgen(jjtree) program_access_decl */
  ASTprogram_access_decl jjtn000 = new ASTprogram_access_decl(JJTPROGRAM_ACCESS_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) program_access_decl */
        try {
/*@egen*/
	access_name() ":" symbolic_variable() ":"
	non_generic_type_name() (direction() )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


/*
 *  ====================================
 *  B.1.7  Configuration elements
 *  ====================================
 */


void configuration_name() :
{/*@bgen(jjtree) configuration_name */
  ASTconfiguration_name jjtn000 = new ASTconfiguration_name(JJTCONFIGURATION_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) configuration_name */
        try {
/*@egen*/
	<identifier>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void resource_type_name() :
{/*@bgen(jjtree) resource_type_name */
  ASTresource_type_name jjtn000 = new ASTresource_type_name(JJTRESOURCE_TYPE_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) resource_type_name */
        try {
/*@egen*/
	<identifier>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void configuration_declaration() :
{/*@bgen(jjtree) configuration_declaration */
  ASTconfiguration_declaration jjtn000 = new ASTconfiguration_declaration(JJTCONFIGURATION_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) configuration_declaration */
        try {
/*@egen*/
	"CONFIGURATION"
    configuration_name()
    (global_var_declarations())?
	  (single_resource_declaration()
    | (resource_declaration() (resource_declaration())*))
    (access_declarations())?
    (instance_specific_initializations())?
    "END_CONFIGURATION"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
		}

void resource_declaration() :
{/*@bgen(jjtree) resource_declaration */
  ASTresource_declaration jjtn000 = new ASTresource_declaration(JJTRESOURCE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) resource_declaration */
        try {
/*@egen*/
	"RESOURCE"
	resource_name() "ON" resource_type_name()
    (global_var_declarations())?
	single_resource_declaration()
    "END_RESOURCE"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void single_resource_declaration() :
{/*@bgen(jjtree) single_resource_declaration */
  ASTsingle_resource_declaration jjtn000 = new ASTsingle_resource_declaration(JJTSINGLE_RESOURCE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) single_resource_declaration */
        try {
/*@egen*/
	(task_configuration() ";")*
	(program_configuration() ";")+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void resource_name() :
{/*@bgen(jjtree) resource_name */
  ASTresource_name jjtn000 = new ASTresource_name(JJTRESOURCE_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) resource_name */
        try {
/*@egen*/
	<identifier>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void access_declarations() :
{/*@bgen(jjtree) access_declarations */
  ASTaccess_declarations jjtn000 = new ASTaccess_declarations(JJTACCESS_DECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) access_declarations */
        try {
/*@egen*/
	"VAR_ACCESS"
	(access_declaration() ";")+
	"END_VAR"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void access_declaration() :
{/*@bgen(jjtree) access_declaration */
  ASTaccess_declaration jjtn000 = new ASTaccess_declaration(JJTACCESS_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) access_declaration */
        try {
/*@egen*/
	access_name() ":" access_path() ":" non_generic_type_name() (direction())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void access_path() :
{/*@bgen(jjtree) access_path */
  ASTaccess_path jjtn000 = new ASTaccess_path(JJTACCESS_PATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) access_path */
        try {
/*@egen*/
	(LOOKAHEAD(2) (LOOKAHEAD(2) resource_name() ".")?
	 <direct_variable> | (LOOKAHEAD(2) resource_name() ".")?)
    (LOOKAHEAD(2) program_name() ".")?
	(LOOKAHEAD(2) fb_name() ".")*
    symbolic_variable()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void global_var_reference() :
{/*@bgen(jjtree) global_var_reference */
  ASTglobal_var_reference jjtn000 = new ASTglobal_var_reference(JJTGLOBAL_VAR_REFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) global_var_reference */
    try {
/*@egen*/
    (LOOKAHEAD(2) resource_name() ".")? global_var_name() ("." structure_element_name())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void access_name() :
{/*@bgen(jjtree) access_name */
  ASTaccess_name jjtn000 = new ASTaccess_name(JJTACCESS_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) access_name */
        try {
/*@egen*/
	<identifier>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void program_output_reference() :
{/*@bgen(jjtree) program_output_reference */
  ASTprogram_output_reference jjtn000 = new ASTprogram_output_reference(JJTPROGRAM_OUTPUT_REFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) program_output_reference */
        try {
/*@egen*/
	program_name() "." symbolic_variable()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void program_name() :
{/*@bgen(jjtree) program_name */
  ASTprogram_name jjtn000 = new ASTprogram_name(JJTPROGRAM_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) program_name */
        try {
/*@egen*/
	<identifier>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void direction() :
{/*@bgen(jjtree) direction */
  ASTdirection jjtn000 = new ASTdirection(JJTDIRECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) direction */
        try {
/*@egen*/
	"READ_WRITE" | "READ_ONLY"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void task_configuration() :
{/*@bgen(jjtree) task_configuration */
  ASTtask_configuration jjtn000 = new ASTtask_configuration(JJTTASK_CONFIGURATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) task_configuration */
        try {
/*@egen*/
	"TASK" task_name() task_initialization()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void task_name() :
{/*@bgen(jjtree) task_name */
  ASTtask_name jjtn000 = new ASTtask_name(JJTTASK_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) task_name */
        try {
/*@egen*/
	<identifier>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void task_initialization() :
{/*@bgen(jjtree) task_initialization */
  ASTtask_initialization jjtn000 = new ASTtask_initialization(JJTTASK_INITIALIZATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) task_initialization */
        try {
/*@egen*/
	"("
	("SINGLE" ":=" data_source() ",")?
    ("INTERVAL" ":=" data_source() ",")?
    "PRIORITY" ":=" <integer>
    ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void data_source() :
{/*@bgen(jjtree) data_source */
  ASTdata_source jjtn000 = new ASTdata_source(JJTDATA_SOURCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) data_source */
          try {
/*@egen*/
	  LOOKAHEAD(3) constant()
	| LOOKAHEAD(3) global_var_reference()
    | LOOKAHEAD(3) program_output_reference()
	| <direct_variable>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void program_configuration() :
{/*@bgen(jjtree) program_configuration */
  ASTprogram_configuration jjtn000 = new ASTprogram_configuration(JJTPROGRAM_CONFIGURATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) program_configuration */
        try {
/*@egen*/
	"PROGRAM" ("RETAIN" | "NON_RETAIN")?
	program_name() ("WITH" task_name())? ":" program_type_name()
    ("(" prog_conf_elements() ")")?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void prog_conf_elements() :
{/*@bgen(jjtree) prog_conf_elements */
  ASTprog_conf_elements jjtn000 = new ASTprog_conf_elements(JJTPROG_CONF_ELEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) prog_conf_elements */
        try {
/*@egen*/
	prog_conf_element() ("," prog_conf_element())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void prog_conf_element() :
{/*@bgen(jjtree) prog_conf_element */
  ASTprog_conf_element jjtn000 = new ASTprog_conf_element(JJTPROG_CONF_ELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) prog_conf_element */
        try {
/*@egen*/
	LOOKAHEAD(2) fb_task() | prog_cnxn()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void fb_task() :
{/*@bgen(jjtree) fb_task */
  ASTfb_task jjtn000 = new ASTfb_task(JJTFB_TASK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fb_task */
        try {
/*@egen*/
	fb_name() "WITH" task_name()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void prog_cnxn() :
{/*@bgen(jjtree) prog_cnxn */
  ASTprog_cnxn jjtn000 = new ASTprog_cnxn(JJTPROG_CNXN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) prog_cnxn */
        try {
/*@egen*/
	LOOKAHEAD(2) symbolic_variable() ":="
    prog_data_source() | symbolic_variable() "=>" data_sink()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void prog_data_source() :
{/*@bgen(jjtree) prog_data_source */
  ASTprog_data_source jjtn000 = new ASTprog_data_source(JJTPROG_DATA_SOURCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) prog_data_source */
          try {
/*@egen*/
	  LOOKAHEAD(2) constant()
    | LOOKAHEAD(2) enumerated_value()
    | LOOKAHEAD(2) global_var_reference()
	| <direct_variable>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void data_sink() :
{/*@bgen(jjtree) data_sink */
  ASTdata_sink jjtn000 = new ASTdata_sink(JJTDATA_SINK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) data_sink */
        try {
/*@egen*/
	global_var_reference() | <direct_variable>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void instance_specific_initializations() :
{/*@bgen(jjtree) instance_specific_initializations */
  ASTinstance_specific_initializations jjtn000 = new ASTinstance_specific_initializations(JJTINSTANCE_SPECIFIC_INITIALIZATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) instance_specific_initializations */
        try {
/*@egen*/
	"VAR_CONFIG"
	(instance_specific_init() ";")+
	"END_VAR"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void instance_specific_init() :
{/*@bgen(jjtree) instance_specific_init */
  ASTinstance_specific_init jjtn000 = new ASTinstance_specific_init(JJTINSTANCE_SPECIFIC_INIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) instance_specific_init */
        try {
/*@egen*/
	resource_name() "."
    program_name() "."
    (LOOKAHEAD(3) fb_name() ".")*
	(LOOKAHEAD(3) (variable_name()
     (location())? ":"
     located_var_spec_init()
    )
    | (fb_name() ":"
       function_block_type_name() ":=" structure_initialization())
    )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
 *  ====================================
 *  B.2  Language IL (Instruction List)
 *  ====================================
 */


/*
 *  =================================
 *  B.2.1  Instructions and operands
 *  =================================
 */


void instruction_list()       :
{}
{
	(il_instruction())*
}


void il_instruction()       :
{}
{

	/*
	 * En il_instruction kan vara n\u00e5got av tre saker:
     *  - endast en label()
     *  - en label() f\u00f6ljd av en il_expression osv
     *  - en il_expression osv utan label()
     * Det g\u00e5r inte att skriva (label())? (il_expression())?
     * eftersom detta kan matchas av en tom str\u00e4ng, vilket ger fel i javacc
     * D\u00e4rf\u00f6r splittade vi il_instruction i tv\u00e5 separata produktioner.
     *
	 * /Thomas
     *
     */

	 LOOKAHEAD(3) (label() ":")
   | (

	    ( LOOKAHEAD(2) label() ":")?

		(
		    il_expression()
		  | il_simple_operation()
		  | il_jump_operation()
		  | il_fb_call()
		  | il_return_operator()
        )
	  )

}


void label() :
{/*@bgen(jjtree) label */
 ASTlabel jjtn000 = new ASTlabel(JJTLABEL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) label */
        try {
/*@egen*/
	t = <identifier>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setName(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}


void il_simple_operation():
{/*@bgen(jjtree) il_simple_operation */
                ASTil_simple_operation jjtn000 = new ASTil_simple_operation(JJTIL_SIMPLE_OPERATION);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/
		Token t;
}
{/*@bgen(jjtree) il_simple_operation */
        try {
/*@egen*/
	( t = <il_simple_operator>  (LOOKAHEAD(2) il_operand())? )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
		//   | ( function_name() (il_operand_list())? )

  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}


void il_expression() :
{/*@bgen(jjtree) il_expression */
 ASTil_expression jjtn000 = new ASTil_expression(JJTIL_EXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) il_expression */
        try {
/*@egen*/
	t = <il_expr_operator>
		(LOOKAHEAD(2) il_operand())?  (LOOKAHEAD(2) simple_instr_list())?
		")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void il_jump_operation() :
{/*@bgen(jjtree) il_jump_operation */
  ASTil_jump_operation jjtn000 = new ASTil_jump_operation(JJTIL_JUMP_OPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) il_jump_operation */
        try {
/*@egen*/
	il_jump_operator() label()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void il_fb_call() :
{/*@bgen(jjtree) il_fb_call */
  ASTil_fb_call jjtn000 = new ASTil_fb_call(JJTIL_FB_CALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) il_fb_call */
    try {
/*@egen*/
/*
 * il_call_java_operator added in addition to the
 * normal grammar to handle calls to function blocks
 * programmed in java.
 */

    ( il_call_operator() | il_call_java_operator() )
        fb_name()
        ("("
         (
		  LOOKAHEAD(2) il_param_list()//?

		  | il_operand_list())//?)
         ")")?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}



//void il_formal_funct_call() :
//{}
//{
//	function_name() "(" <EOL> (<EOL>)* (il_param_list())? ")"
//}


Operand il_operand()       :
{
	String s;
	Operand o = new Operand();
}
{
	(  o = constant()
     | LOOKAHEAD(2) o = variable()
     | o = enumerated_value()
    )
	 {
		 return o;
	 }
}


void il_operand_list() :
{/*@bgen(jjtree) il_operand_list */
  ASTil_operand_list jjtn000 = new ASTil_operand_list(JJTIL_OPERAND_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) il_operand_list */
        try {
/*@egen*/
	il_operand() ("," il_operand())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void simple_instr_list() :
{/*@bgen(jjtree) simple_instr_list */
  ASTsimple_instr_list jjtn000 = new ASTsimple_instr_list(JJTSIMPLE_INSTR_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) simple_instr_list */
        try {
/*@egen*/
	il_simple_instruction() (il_simple_instruction())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void il_simple_instruction() :
{/*@bgen(jjtree) il_simple_instruction */
  ASTil_simple_instruction jjtn000 = new ASTil_simple_instruction(JJTIL_SIMPLE_INSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) il_simple_instruction */
        try {
/*@egen*/
	(  LOOKAHEAD(2) il_simple_operation()
     | il_expression()
)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*///     | il_formal_funct_call())

}


void il_param_list() :
{/*@bgen(jjtree) il_param_list */
        ASTil_param_list jjtn000 = new ASTil_param_list(JJTIL_PARAM_LIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Param p;
}
{/*@bgen(jjtree) il_param_list */
         try {
/*@egen*/
	 (   LOOKAHEAD(4) p = il_param_instruction()
	  		 {jjtn000.addParameter(p);}
     )*
		 p = il_param_last_instruction()/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/
	 {
		 jjtn000.addParameter(p);
	 }/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}


Param il_param_instruction() :
{/*@bgen(jjtree) il_param_instruction */
        ASTil_param_instruction jjtn000 = new ASTil_param_instruction(JJTIL_PARAM_INSTRUCTION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Param p;
}
{/*@bgen(jjtree) il_param_instruction */
        try {
/*@egen*/
	(  LOOKAHEAD(2) p = il_param_assignment() | p = il_param_out_assignment()) ","/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
			return p;
		}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


Param il_param_last_instruction() :
{/*@bgen(jjtree) il_param_last_instruction */
        ASTil_param_last_instruction jjtn000 = new ASTil_param_last_instruction(JJTIL_PARAM_LAST_INSTRUCTION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Param p;
}
{/*@bgen(jjtree) il_param_last_instruction */
         try {
/*@egen*/
	 (  LOOKAHEAD(2) p = il_param_assignment() | p = il_param_out_assignment())/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/
		 {
			 return p;
		 }/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}


Param il_param_assignment() :
{/*@bgen(jjtree) il_param_assignment */
        ASTil_param_assignment jjtn000 = new ASTil_param_assignment(JJTIL_PARAM_ASSIGNMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	String a;
	Operand o = null;
	Param p = new Param();
}
{/*@bgen(jjtree) il_param_assignment */
        try {
/*@egen*/
	a = il_assign_operator()
		(  o = il_operand()
		   | ("("
			  simple_instr_list()
			  ")"
			  )
		   )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ p.type = "in";
	  p.parameter = a;
	  p.value = o.value;
	  p.parameterType = o.type;
	  return p;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


Param il_param_out_assignment() :
{/*@bgen(jjtree) il_param_out_assignment */
        ASTil_param_out_assignment jjtn000 = new ASTil_param_out_assignment(JJTIL_PARAM_OUT_ASSIGNMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	String a;
	Operand o;
	Param p = new Param();
}
{/*@bgen(jjtree) il_param_out_assignment */
        try {
/*@egen*/
	a = il_assign_out_operator() o = variable()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		p.type = "out";
		p.parameter = a;
		p.value = o.value;
		p.parameterType = o.type;

		return p;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/*
 *  =================
 *  B.2.2  Operators
 *  =================
 */



String il_assign_operator() :
{/*@bgen(jjtree) il_assign_operator */
        ASTil_assign_operator jjtn000 = new ASTil_assign_operator(JJTIL_ASSIGN_OPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) il_assign_operator */
        try {
/*@egen*/
	t = variable_name() ":="/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return t.image;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


String il_assign_out_operator() :
{/*@bgen(jjtree) il_assign_out_operator */
        ASTil_assign_out_operator jjtn000 = new ASTil_assign_out_operator(JJTIL_ASSIGN_OUT_OPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) il_assign_out_operator */
        try {
/*@egen*/
	(("NOT")? t = variable_name() "=>")/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/

		{
			return t.image;
		}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void il_call_operator() :
{/*@bgen(jjtree) il_call_operator */
 ASTil_call_operator jjtn000 = new ASTil_call_operator(JJTIL_CALL_OPERATOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) il_call_operator */
        try {
/*@egen*/
	t = <il_call_op>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

TOKEN:
{
	<il_call_op:
	  "CAL"
	| "CALC"
	| "CALCN">
}


void il_call_java_operator() :
/* Added in addition to the normal grammar to handle
 * calls to function blocks programmed in java.
 */
{/*@bgen(jjtree) il_call_java_operator */
        ASTil_call_java_operator jjtn000 = new ASTil_call_java_operator(JJTIL_CALL_JAVA_OPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) il_call_java_operator */
        try {
/*@egen*/
	t = <il_call_java_op>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


TOKEN:
/* Added in addition to the normal grammar to handle
 * calls to function blocks programmed in java.
 */
{
	<il_call_java_op: "CAL_JAVA" >
}



void il_return_operator() :
{/*@bgen(jjtree) il_return_operator */
  ASTil_return_operator jjtn000 = new ASTil_return_operator(JJTIL_RETURN_OPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) il_return_operator */
        try {
/*@egen*/
	t = <il_return_op>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
		//	{jjtThis.setName(t.image);}
}
TOKEN:
{
	<il_return_op:
	  "RET"
	| "RETC"
	| "RETCN">
}

void il_jump_operator() :
{/*@bgen(jjtree) il_jump_operator */
  ASTil_jump_operator jjtn000 = new ASTil_jump_operator(JJTIL_JUMP_OPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) il_jump_operator */
        try {
/*@egen*/
	t = <il_jump_op>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
TOKEN:
{
	<il_jump_op:
	  "JMP"
	| "JMPC"
	| "JMPCN">
}



TOKEN:
{
	<il_expr_operator:
   	  "AND("
	| "&("
   	| "OR("
  	| "XOR("
 	| "ANDN("
    | "&N("
    | "ORN("
    | "XORN("
    | "ADD("
    | "SUB("
    | "MUL("
    | "DIV("
    | "MOD("
    | "GT("
    | "GE("
    | "EQ("
    | "LT("
    | "LE("
    | "NE(">
}


TOKEN :
{
	<il_simple_operator:
      "LD"
    | "LDN"
    | "ST"
    | "STN"
    | "NOT"
    | "S"
    | "R"
    | "S1"
    | "R1"
    | "CLK"
    | "CU"
    | "CD"
    | "PV"
    | "IN"
    | "PT"
    | "AND"
    | "&"
    | "OR"
    | "XOR"
    | "ANDN"
    | "&N"
    | "ORN"
    | "XORN"
    | "ADD"
    | "SUB"
    | "MUL"
    | "DIV"
    | "MOD"
    | "GT"
    | "GE"
    | "EQ"
    | "LT"
    | "LE"
    | "NE">
}


TOKEN: /* identifier */
{
	<identifier: (<letter> | ("_" <letter> | <digit>))  (("_")? (<letter> | <digit>))*>
     | < #digit: ["0"-"9"] >
     | < #letter: ["A"-"Z", "a"-"z"] >

}


package org.supremica.softplc.CompILer.CodeGen;

import org.supremica.softplc.CompILer.CodeGen.Datatypes.*;
import org.supremica.softplc.CompILer.CodeGen.Constants.*;
import de.fub.bytecode.generic.*;

/**
 * Interface describing an entity for generating java byte code from 
 * different IL (IEC 6-1131) statements.
 * 
 * @author Anders Röding
 */
public interface Builder
{
	/**
	 * generates code for an IL simple operation.
	 */
	void emitIL_SIMPLE_OPERATION(String operator, Object arg);
	/**
	 * generates code for an IL simple expression. 
	 */
	void emitIL_EXPRESSION(String operator, TypeConstant t, Object arg);
	/**
	 * generates code for increasing the JVM's stack by size spaces.
	 */
	void emitStackSpace(int size);
	/**
	 * generates code for loading constants and variables.
	 */
	void emitLoad(Object arg);
	/**
	 * dumps the code generated by other methods in this interface to a class file.
	 */
	void dumpCode();
	/**
	 * makes room for a new variable in the class being generated.
	 */
	void emitVarField(String varName, Object type, boolean global, boolean inputOutputVar);
	/**
	 * makes an initialisation of an IL direct variable.
	 */
	void emitDirectInit(IECDirectVariable v, TypeBOOL i);

	/**
	 * the first part of generating code for an IL function block call.
	 * Calling this method should assure that conditional calls 
	 * to IL function blocks are handled properly (
	 * Example using emitIL_FB_CALL_Start
	 * <pre>
	 *
	 *   BranchInstruction condition = emitIL_FB_CALL_Start(IlCallOperator.CALC);
	 *   emitIL_FB_CALL_Run("a variable of function block kind", 
	 *                      "a function block type")
	 *   emitIL_FB_CALL_End(condition);
	 * </pre>
	 */
	BranchInstruction emitIL_FB_CALL_Start(IlCallOperator op);

	/**
	 * the middle part of generating code for an IL function block call.
	 *
	 * @see {@link #emitIL_FB_CALL_start}
	 */
	void emitIL_FB_CALL_Run(String fbName, String fbTypeName);

	/**
	 * the last part of generating code for an IL function block call.
	 * 
	 * @see {@link #emitIL_FB_CALL_start}
	 */
	void emitIL_FB_CALL_End(BranchInstruction callCondition);

	/**
	 * generates code for a jump target.
	 */
	void emitLABEL(String label);

	/**
	 * generates code for an IL jump operation.
	 */
	void emitIL_JUMP_OPERATION(IlJumpOperator op, String targetLabel);

	//XXX il_fb_call är en hackfunktion
	//	void emitIL_FB_CALL(IlCallOperator op, String fb_name, Object[] args);
}

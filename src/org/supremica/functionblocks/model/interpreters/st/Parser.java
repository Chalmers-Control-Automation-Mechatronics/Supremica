
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Mar 02 10:16:32 CET 2005
//----------------------------------------------------

package org.supremica.functionblocks.model.interpreters.st;

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Wed Mar 02 10:16:32 CET 2005
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\003\004\000\002\004" +
    "\005\000\002\004\003\000\002\005\004\000\002\006\005" +
    "\000\002\006\003\000\002\007\004\000\002\010\005\000" +
    "\002\010\003\000\002\011\004\000\002\012\005\000\002" +
    "\012\005\000\002\012\003\000\002\013\004\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\003\000\002\015\004\000\002\016\005\000" +
    "\002\016\005\000\002\016\003\000\002\017\004\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\003\000\002\021\004\000\002\022\005\000\002\022\003" +
    "\000\002\023\003\000\002\023\004\000\002\023\004\000" +
    "\002\024\003\000\002\024\003\000\002\024\005\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\026" +
    "\003\000\002\027\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\020\016\022\023\007\024\013\026\015\027" +
    "\020\030\025\031\005\001\002\000\044\002\uffe1\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\025\uffe1\001\002\000\044\002\uffd8\004\uffd8\005" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\025\uffd8\001\002\000\044\002\uffde\004\uffde\005\uffde" +
    "\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\025\uffde\001\002\000\014\024\013\026\015\027\020\030" +
    "\025\031\005\001\002\000\044\002\uffd7\004\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\124" +
    "\025\uffd7\001\002\000\012\002\uffd7\004\uffd7\005\120\025" +
    "\uffd7\001\002\000\042\002\uffd7\004\uffd7\005\uffd7\006\uffd7" +
    "\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\106\020\105\021\103\025\uffd7\001\002" +
    "\000\020\016\022\023\007\024\013\026\015\027\020\030" +
    "\025\031\005\001\002\000\010\002\uffd7\004\076\025\uffd7" +
    "\001\002\000\044\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\025\uffdb\001" +
    "\002\000\004\002\073\001\002\000\030\002\uffd7\004\uffd7" +
    "\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\057\012\056\013" +
    "\061\014\062\025\uffd7\001\002\000\044\002\uffda\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\022\uffda\025\uffda\001\002\000\034\002\uffd7\004\uffd7\005" +
    "\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\015\045\016\047\025\uffd7\001\002\000\014\024" +
    "\013\026\015\027\020\030\025\031\005\001\002\000\044" +
    "\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011" +
    "\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\022\uffdd\025\uffdd\001\002\000\020\002" +
    "\uffd7\004\uffd7\005\uffd7\006\uffd7\007\034\010\037\025\uffd7" +
    "\001\002\000\044\002\uffd9\004\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\025\uffd9\001" +
    "\002\000\014\002\uffd7\004\uffd7\005\uffd7\006\030\025\uffd7" +
    "\001\002\000\012\002\ufffa\004\ufffa\005\ufffa\025\ufffa\001" +
    "\002\000\020\016\022\023\007\024\013\026\015\027\020" +
    "\030\025\031\005\001\002\000\012\002\ufff8\004\ufff8\005" +
    "\ufff8\025\ufff8\001\002\000\014\002\uffd7\004\uffd7\005\uffd7" +
    "\006\030\025\uffd7\001\002\000\012\002\ufff9\004\ufff9\005" +
    "\ufff9\025\ufff9\001\002\000\020\016\022\023\007\024\013" +
    "\026\015\027\020\030\025\031\005\001\002\000\014\002" +
    "\ufff7\004\ufff7\005\ufff7\006\ufff7\025\ufff7\001\002\000\014" +
    "\002\ufff4\004\ufff4\005\ufff4\006\ufff4\025\ufff4\001\002\000" +
    "\020\016\022\023\007\024\013\026\015\027\020\030\025" +
    "\031\005\001\002\000\020\002\uffd7\004\uffd7\005\uffd7\006" +
    "\uffd7\007\034\010\037\025\uffd7\001\002\000\014\002\ufff5" +
    "\004\ufff5\005\ufff5\006\ufff5\025\ufff5\001\002\000\020\002" +
    "\uffd7\004\uffd7\005\uffd7\006\uffd7\007\034\010\037\025\uffd7" +
    "\001\002\000\014\002\ufff6\004\ufff6\005\ufff6\006\ufff6\025" +
    "\ufff6\001\002\000\044\002\uffe0\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\025\uffe0" +
    "\001\002\000\020\016\022\023\007\024\013\026\015\027" +
    "\020\030\025\031\005\001\002\000\030\002\uffed\004\uffed" +
    "\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013" +
    "\uffed\014\uffed\025\uffed\001\002\000\020\016\022\023\007" +
    "\024\013\026\015\027\020\030\025\031\005\001\002\000" +
    "\030\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea" +
    "\011\uffea\012\uffea\013\uffea\014\uffea\025\uffea\001\002\000" +
    "\034\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7" +
    "\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\045\016\047\025" +
    "\uffd7\001\002\000\030\002\uffeb\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\025" +
    "\uffeb\001\002\000\034\002\uffd7\004\uffd7\005\uffd7\006\uffd7" +
    "\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015" +
    "\045\016\047\025\uffd7\001\002\000\030\002\uffec\004\uffec" +
    "\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013" +
    "\uffec\014\uffec\025\uffec\001\002\000\020\002\ufff3\004\ufff3" +
    "\005\ufff3\006\ufff3\007\ufff3\010\ufff3\025\ufff3\001\002\000" +
    "\020\016\022\023\007\024\013\026\015\027\020\030\025" +
    "\031\005\001\002\000\020\016\022\023\007\024\013\026" +
    "\015\027\020\030\025\031\005\001\002\000\020\002\uffee" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\025\uffee\001" +
    "\002\000\020\016\022\023\007\024\013\026\015\027\020" +
    "\030\025\031\005\001\002\000\020\016\022\023\007\024" +
    "\013\026\015\027\020\030\025\031\005\001\002\000\030" +
    "\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011" +
    "\057\012\056\013\061\014\062\025\uffd7\001\002\000\020" +
    "\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\025" +
    "\uffef\001\002\000\030\002\uffd7\004\uffd7\005\uffd7\006\uffd7" +
    "\007\uffd7\010\uffd7\011\057\012\056\013\061\014\062\025" +
    "\uffd7\001\002\000\020\002\ufff0\004\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\010\ufff0\025\ufff0\001\002\000\030\002\uffd7\004" +
    "\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\057\012\056" +
    "\013\061\014\062\025\uffd7\001\002\000\020\002\ufff2\004" +
    "\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\025\ufff2\001\002" +
    "\000\030\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010" +
    "\uffd7\011\057\012\056\013\061\014\062\025\uffd7\001\002" +
    "\000\020\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\025\ufff1\001\002\000\004\002\001\001\002\000\006" +
    "\002\ufffe\025\ufffe\001\002\000\006\002\000\025\000\001" +
    "\002\000\020\016\022\023\007\024\013\026\015\027\020" +
    "\030\025\031\005\001\002\000\010\002\uffd7\004\076\025" +
    "\uffd7\001\002\000\006\002\uffff\025\uffff\001\002\000\004" +
    "\025\102\001\002\000\044\002\uffdc\004\uffdc\005\uffdc\006" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\025" +
    "\uffdc\001\002\000\020\016\022\023\007\024\013\026\015" +
    "\027\020\030\025\031\005\001\002\000\034\002\uffe5\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\016\uffe5\025\uffe5\001\002\000" +
    "\020\016\022\023\007\024\013\026\015\027\020\030\025" +
    "\031\005\001\002\000\020\016\022\023\007\024\013\026" +
    "\015\027\020\030\025\031\005\001\002\000\034\002\uffe9" +
    "\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\025\uffe9\001\002" +
    "\000\042\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7" +
    "\017\106\020\105\021\103\025\uffd7\001\002\000\034\002" +
    "\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\025\uffe8\001" +
    "\002\000\042\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\017\106\020\105\021\103\025\uffd7\001\002\000\034" +
    "\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\025\uffe7" +
    "\001\002\000\042\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007" +
    "\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\017\106\020\105\021\103\025\uffd7\001\002\000" +
    "\034\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\025" +
    "\uffe6\001\002\000\010\002\ufffd\004\ufffd\025\ufffd\001\002" +
    "\000\010\002\ufffb\004\ufffb\025\ufffb\001\002\000\020\016" +
    "\022\023\007\024\013\026\015\027\020\030\025\031\005" +
    "\001\002\000\012\002\uffd7\004\uffd7\005\120\025\uffd7\001" +
    "\002\000\010\002\ufffc\004\ufffc\025\ufffc\001\002\000\042" +
    "\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\025\uffe4\001\002\000\020\016\022\023" +
    "\007\024\013\026\015\027\020\030\025\031\005\001\002" +
    "\000\042\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2" +
    "\017\uffe2\020\uffe2\021\uffe2\025\uffe2\001\002\000\044\002" +
    "\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7" +
    "\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020" +
    "\uffd7\021\uffd7\022\124\025\uffd7\001\002\000\042\002\uffe3" +
    "\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\025\uffe3\001\002\000\044\002\uffdf\004\uffdf\005" +
    "\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf" +
    "\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022" +
    "\uffdf\025\uffdf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\032\003\015\005\013\007\010\011\025\013" +
    "\023\015\016\017\020\021\011\023\007\024\003\025\005" +
    "\026\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\024\127\025\005\026\022\001\001" +
    "\000\006\022\122\027\124\001\001\000\006\006\115\027" +
    "\116\001\001\000\006\020\106\027\103\001\001\000\032" +
    "\003\100\005\013\007\010\011\025\013\023\015\016\017" +
    "\020\021\011\023\007\024\003\025\005\026\022\001\001" +
    "\000\006\004\074\027\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\054\027\057\001\001\000\002" +
    "\001\001\000\006\016\045\027\047\001\001\000\010\024" +
    "\043\025\005\026\022\001\001\000\002\001\001\000\006" +
    "\012\034\027\035\001\001\000\002\001\001\000\006\010" +
    "\026\027\030\001\001\000\002\001\001\000\024\011\031" +
    "\013\023\015\016\017\020\021\011\023\007\024\003\025" +
    "\005\026\022\001\001\000\002\001\001\000\006\010\032" +
    "\027\030\001\001\000\002\001\001\000\022\013\041\015" +
    "\016\017\020\021\011\023\007\024\003\025\005\026\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\013" +
    "\037\015\016\017\020\021\011\023\007\024\003\025\005" +
    "\026\022\001\001\000\006\012\040\027\035\001\001\000" +
    "\002\001\001\000\006\012\042\027\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\052\021\011\023" +
    "\007\024\003\025\005\026\022\001\001\000\002\001\001" +
    "\000\016\017\050\021\011\023\007\024\003\025\005\026" +
    "\022\001\001\000\002\001\001\000\006\016\051\027\047" +
    "\001\001\000\002\001\001\000\006\016\053\027\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\070" +
    "\017\020\021\011\023\007\024\003\025\005\026\022\001" +
    "\001\000\020\015\066\017\020\021\011\023\007\024\003" +
    "\025\005\026\022\001\001\000\002\001\001\000\020\015" +
    "\064\017\020\021\011\023\007\024\003\025\005\026\022" +
    "\001\001\000\020\015\062\017\020\021\011\023\007\024" +
    "\003\025\005\026\022\001\001\000\006\014\063\027\057" +
    "\001\001\000\002\001\001\000\006\014\065\027\057\001" +
    "\001\000\002\001\001\000\006\014\067\027\057\001\001" +
    "\000\002\001\001\000\006\014\071\027\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\076\007\010\011\025\013\023\015" +
    "\016\017\020\021\011\023\007\024\003\025\005\026\022" +
    "\001\001\000\006\004\077\027\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\021\113" +
    "\023\007\024\003\025\005\026\022\001\001\000\002\001" +
    "\001\000\014\021\111\023\007\024\003\025\005\026\022" +
    "\001\001\000\014\021\107\023\007\024\003\025\005\026" +
    "\022\001\001\000\002\001\001\000\006\020\110\027\103" +
    "\001\001\000\002\001\001\000\006\020\112\027\103\001" +
    "\001\000\002\001\001\000\006\020\114\027\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\007\120\011\025\013\023\015\016\017\020\021\011" +
    "\023\007\024\003\025\005\026\022\001\001\000\006\006" +
    "\121\027\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\023\125\024\003\025\005\026\022\001\001\000" +
    "\002\001\001\000\006\022\126\027\124\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // empty ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(21/*empty*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // variable ::= IDENT 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(20/*variable*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // constant ::= BOOL 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(19/*constant*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // constant ::= NUMBER 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(19/*constant*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // constant ::= STRING 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(19/*constant*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // primary_expression ::= LPAREN expression RPAREN 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(18/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // primary_expression ::= variable 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(18/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // primary_expression ::= constant 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(18/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // unary_expression ::= NOT primary_expression 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(17/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // unary_expression ::= MINUS primary_expression 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(17/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // unary_expression ::= primary_expression 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(17/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // power_expressionp ::= empty 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(16/*power_expressionp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // power_expressionp ::= POWER unary_expression power_expressionp 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(16/*power_expressionp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // power_expression ::= unary_expression power_expressionp 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(15/*power_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // termp ::= empty 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(14/*termp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // termp ::= MOD power_expression termp 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(14/*termp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // termp ::= DIV power_expression termp 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(14/*termp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // termp ::= TIMES power_expression termp 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(14/*termp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // term ::= power_expression termp 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(13/*term*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // add_expressionp ::= empty 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(12/*add_expressionp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // add_expressionp ::= MINUS term add_expressionp 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(12/*add_expressionp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // add_expressionp ::= PLUS term add_expressionp 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(12/*add_expressionp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // add_expression ::= term add_expressionp 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(11/*add_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // equ_expressionp ::= empty 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(10/*equ_expressionp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // equ_expressionp ::= MOREEQ add_expression equ_expressionp 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(10/*equ_expressionp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // equ_expressionp ::= MORE add_expression equ_expressionp 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(10/*equ_expressionp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // equ_expressionp ::= LESSEQ add_expression equ_expressionp 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(10/*equ_expressionp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // equ_expressionp ::= LESS add_expression equ_expressionp 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(10/*equ_expressionp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // equ_expression ::= add_expression equ_expressionp 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(9/*equ_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // comparisonp ::= empty 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(8/*comparisonp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // comparisonp ::= NEQ equ_expression comparisonp 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(8/*comparisonp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // comparisonp ::= EQ equ_expression comparisonp 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(8/*comparisonp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // comparison ::= equ_expression comparisonp 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*comparison*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // and_expressionp ::= empty 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(6/*and_expressionp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // and_expressionp ::= AND comparison and_expressionp 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(6/*and_expressionp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // and_expression ::= comparison and_expressionp 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(5/*and_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // xor_expressionp ::= empty 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(4/*xor_expressionp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // xor_expressionp ::= XOR and_expression xor_expressionp 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(4/*xor_expressionp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // xor_expression ::= and_expression xor_expressionp 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(3/*xor_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expressionp ::= empty 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(2/*expressionp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expressionp ::= OR xor_expression expressionp 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(2/*expressionp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expression ::= xor_expression expressionp 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expression EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


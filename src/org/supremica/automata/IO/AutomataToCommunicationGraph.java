
package org.supremica.automata.IO;

import java.io.*;
import org.supremica.automata.*;

/**
 * skapar en PCG-fil. det mesta kopierat från AutomataToHierarchyToDot.java
 *
 *  /Arash
 */

public class AutomataToCommunicationGraph
	implements AutomataSerializer
{
	private Automata theAutomata;

	public AutomataToCommunicationGraph(Automata aut)
	{
		this.theAutomata = aut;
	}


	public void serialize(PrintWriter pw)
		throws Exception
	{
		pw.println("# Generated by AutomataToCommunicationGraph.java ");
		pw.println("# This is a weighted undirected graph for dependency analysis. ");
		pw.println("# PCG-syntax:    Node1 <TAB> Node2 <TAB> Weight               <LF>");
		pw.println("# For Supremica: Aut1  <TAB> Aut2  <TAB> num-of-shared-events <LF>");
		pw.println("#     /Arash ");

		int edges = 0, nodes = 0;
		for (int i=0; i<theAutomata.size(); i++)
		{
			Automaton currAutomaton = theAutomata.getAutomatonAt(i);
			Alphabet currAlphabet = currAutomaton.getAlphabet();
			int save_edges = edges;
			for (int j=i+1; j<theAutomata.size(); j++)
			{
				Automaton otherAutomaton = theAutomata.getAutomatonAt(j);
				Alphabet otherAlphabet = otherAutomaton.getAlphabet();
				int weight = currAlphabet.nbrOfCommonEvents(otherAlphabet);
				if (weight > 0)
				{
					pw.println("" + currAutomaton.getName() + "\t" + otherAutomaton.getName() + "\t" + weight);
					edges++;
				}
			}
			if(save_edges < edges) nodes++;
		}

		// TODO:
		// we have num of edges and nodes, give a simple statistic and analysis about the graph type here

		pw.flush();
		pw.close();
	}

	public void serialize(String fileName)
		throws Exception
	{
		serialize(new PrintWriter(new FileWriter(fileName)));
	}
}


/*
 * Supremica Software License Agreement
 *
 * The Supremica software is not in the public domain
 * However, it is freely available without fee for education,
 * research, and non-profit purposes.  By obtaining copies of
 * this and other files that comprise the Supremica software,
 * you, the Licensee, agree to abide by the following
 * conditions and understandings with respect to the
 * copyrighted software:
 *
 * The software is copyrighted in the name of Supremica,
 * and ownership of the software remains with Supremica.
 *
 * Permission to use, copy, and modify this software and its
 * documentation for education, research, and non-profit
 * purposes is hereby granted to Licensee, provided that the
 * copyright notice, the original author's names and unit
 * identification, and this permission notice appear on all
 * such copies, and that no charge be made for such copies.
 * Any entity desiring permission to incorporate this software
 * into commercial products or to use it for commercial
 * purposes should contact:
 *
 * Knut Akesson (KA), knut@supremica.org
 * Supremica,
 * Haradsgatan 26A
 * 431 42 Molndal
 * SWEDEN
 *
 * to discuss license terms. No cost evaluation licenses are
 * available.
 *
 * Licensee may not use the name, logo, or any other symbol
 * of Supremica nor the names of any of its employees nor
 * any adaptation thereof in advertising or publicity
 * pertaining to the software without specific prior written
 * approval of the Supremica.
 *
 * SUPREMICA AND KA MAKES NO REPRESENTATIONS ABOUT THE
 * SUITABILITY OF THE SOFTWARE FOR ANY PURPOSE.
 * IT IS PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY.
 *
 * Supremica or KA shall not be liable for any damages
 * suffered by Licensee from the use of this software.
 *
 * Supremica is owned and represented by KA.
 */
package org.supremica.automata.algorithms;

import org.supremica.log.*;
import java.io.*;
import java.util.*;
import java.text.DateFormat;

public class IEC61131Helper
{
	private static IEC61131Helper theHelper;

	protected IEC61131Helper()
	{
	}

	public static IEC61131Helper getInstance()
	{
		if (theHelper == null)
		{
			theHelper = new IEC61131Helper();
		}
		return theHelper;
	}

	public void printBeginProgram(PrintWriter pw, String fileName)
	{

		pw.println("(* This file is automatically generated from Supremica *)");
		pw.println("(* Supremica version: " + org.supremica.Version.version() + " *)");
		pw.println("(* This file was generated at: " +  DateFormat.getDateTimeInstance().format(new Date()) + " *)");
		//pw.println("(* Synchronization type: " + syncType.toString() + "*)");
		/*
		pw.println("(* The following automata are synchronized: *)");
		for (Iterator autIt = theAutomata.iterator(); autIt.hasNext();)
		{
			Automaton currAutomaton = (Automaton)autIt.next();
			pw.println("(* Automaton: " + currAutomaton.getName() + " *)");
		} */
		// Start of file header
		Date theDate = new Date();

		pw.println("PROGRAM " + fileName);
	}

	public void printEndProgram(PrintWriter pw)
	{
		pw.println("END_PROGRAM");
	}

	public void printBeginVariables(PrintWriter pw)
	{
		pw.println("\tVAR (* Internal variables *)");
	}

	public void printBooleanVariableDeclaration(PrintWriter pw, String variableName, String comment)
	{
		pw.print("\t\t" + variableName + " : BOOL; ");
		if (comment != null)
		{
			pw.print("(* " + comment + " *)");
		}
		pw.println();
	}

	public void printEndVariables(PrintWriter pw)
	{
		pw.println("\tEND_VAR\n");
	}

	public void printILBegin(PrintWriter pw)
	{ // Empty
	}

	public void printILEnd(PrintWriter pw)
	{ // Empty
	}

	public void printSTBegin(PrintWriter pw)
	{ // Empty
	}

	public void printSTEnd(PrintWriter pw)
	{ // Empty
	}

	public void printILStatement(PrintWriter pw, String label, String cmd, String operand, String comment)
	{
		if (label != null)
		{
			pw.print(label + ":");
		}
		pw.print("\t");
		if (cmd != null)
		{
			pw.print(cmd);
		}
		pw.print("\t");
		if (operand != null)
		{
			pw.print(operand);
		}
		pw.print("\t");
		if (comment != null)
		{
			pw.print("(* " + comment + " *)");
		}
		pw.println();
	}

	public void printILComment(PrintWriter pw, String comment)
	{
		pw.println("\t(* " + comment + " *)");
	}

	public void printILLabel(PrintWriter pw, String label)
	{
		printILStatement(pw, label, null, null, null);
	}

	public void printILCommand(PrintWriter pw, String command, String operand)
	{
		printILStatement(pw, null, command, operand, null);
	}
}

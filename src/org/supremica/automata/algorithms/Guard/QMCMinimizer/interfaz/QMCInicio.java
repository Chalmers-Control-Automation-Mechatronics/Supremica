/** * Paquete que contiene las clases propias de la interfaz de la aplicacion */package org.supremica.automata.algorithms.Guard.QMCMinimizer.interfaz;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Dimension;import java.awt.FlowLayout;import java.awt.Toolkit;import java.awt.datatransfer.Clipboard;import java.awt.datatransfer.ClipboardOwner;import java.awt.datatransfer.DataFlavor;import java.awt.datatransfer.StringSelection;import java.awt.datatransfer.Transferable;import java.awt.event.KeyEvent;import java.awt.event.MouseEvent;import java.io.BufferedReader;import java.io.FileReader;import java.io.FileWriter;import java.io.IOException;import java.io.PrintWriter;import java.util.Enumeration;import java.util.StringTokenizer;import javax.swing.BorderFactory;import javax.swing.ButtonGroup;import javax.swing.ImageIcon;import javax.swing.JButton;import javax.swing.JComboBox;import javax.swing.JFileChooser;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JList;import javax.swing.JMenu;import javax.swing.JMenuBar;import javax.swing.JMenuItem;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JPopupMenu;import javax.swing.JRadioButtonMenuItem;import javax.swing.JScrollPane;import javax.swing.JSeparator;import javax.swing.JTabbedPane;import javax.swing.JTable;import javax.swing.JTextField;import javax.swing.JToggleButton;import javax.swing.JToolBar;import javax.swing.ListSelectionModel;import javax.swing.SwingConstants;import javax.swing.TransferHandler;import javax.swing.table.DefaultTableCellRenderer;import javax.swing.table.TableColumn;import javax.swing.text.DefaultEditorKit;import org.supremica.automata.algorithms.Guard.QMCMinimizer.logica.QMCAlgoritmo;import org.supremica.automata.algorithms.Guard.QMCMinimizer.logica.QMCBinarioBean;import org.supremica.automata.algorithms.Guard.QMCMinimizer.logica.QMCControladorListaImplicantesEsenciales;import org.supremica.automata.algorithms.Guard.QMCMinimizer.logica.QMCControladorListaImplicantesReducida;import org.supremica.automata.algorithms.Guard.QMCMinimizer.logica.QMCControladorListaTablaVerdad;import org.supremica.automata.algorithms.Guard.QMCMinimizer.logica.QMCControladorTablaAdyacencias;import org.supremica.automata.algorithms.Guard.QMCMinimizer.logica.QMCControladorTablaTerminos;import org.supremica.automata.algorithms.Guard.QMCMinimizer.logica.QMCFuncion;import org.supremica.automata.algorithms.Guard.QMCMinimizer.logica.QMCImplicanteBean;import org.supremica.automata.algorithms.Guard.QMCMinimizer.util.QMCFiltradorExtensionesArchivos;import org.supremica.automata.algorithms.Guard.QMCMinimizer.util.QMCUtilFormateo;import org.supremica.automata.algorithms.Guard.QMCMinimizer.util.QMCUtilLogica;/** * Clase inicial de la aplicacion, base de la interfaz * @author Pedro Sanz * Creado 29/10/2005 */public class QMCInicio extends JFrame implements ClipboardOwner{	private static final long serialVersionUID = 1L;	////////////////////////////////    // DECLARACION DE COMPONENTES //    ////////////////////////////////    // PANELES	private JPanel jContentPane = null;	private JPanel panelSolucion = null;	private JPanel panelIzquierdo = null;	private JPanel panelBotonesTabla = null;	private JPanel panelSuperior = null;	private JPanel panelFuncion = null;	private JPanel panelMinimizacionGeneral = null;	private JPanel panelFase1 = null;	private JPanel panelFase2 = null;	private JPanel panelSolucionImplicantes = null;	private JPanel panelSolucionAlgebraica = null;	private JScrollPane panelTablaVerdad = null;	private JScrollPane panelTablaTerminos = null;	private JScrollPane panelTablaTerminosAgrupados = null;  //  @jve:decl-index=0:visual-constraint="812,482"	private JScrollPane panelTablaAdyacencias = null;  //  @jve:decl-index=0:visual-constraint="681,522"	private JScrollPane panelScrollFase1 = null;	private JScrollPane panelScrollFase2 = null;	private JScrollPane panelTablaImplicantes = null;	private JScrollPane panelTablaImplicantesEsenciales = null;	private JTabbedPane panelFasesMinimizacion = null;	// TABLAS	private JTable tablaVerdad = null;  //  @jve:decl-index=0:visual-constraint="780,10"	private JTable tablaTerminos = null;	private JTable tablaTerminosAgrupados = null;	private JTable tablaAdyacencias = null;    private JTable tablaAnterior = null;    private JTable tablaActual = null;    private JTable tablaCopia = null;    private JTable tablaImplicantes = null;    private JTable tablaImplicantesEsenciales = null;    private TableColumn columnaChecks = null;    // LISTAS    private JList listaCabecerasFilasImplicantes = null;    private JList listaCabecerasTablaVerdad = null;	// BOTONES	private JToolBar barraHerramientas = null;	private JButton botonTablaCeros = null;	private JButton botonTablaBorrar = null;	private JButton botonTablaUnos = null;	private JButton botonNuevaTabla = null;	private JButton botonNuevaExpresion = null;	private JButton botonImportar = null;	private JButton botonExportar = null;	private JButton botonDetenerMin = null;	private JButton botonIniciarMin = null;	private JButton botonPasoSiguiente = null;	private JButton botonAyuda = null;	private JToggleButton botonMinAuto = null;	private JToggleButton botonMinInter = null;	// MENUS	private JMenuBar barraMenu = null;	private JMenu menuArchivo = null;	private JMenu menuMin = null;	private JMenu menuAyuda = null;	private JMenu menuNuevaFuncion = null;	private JPopupMenu menuEmergenteTabla = null;	private JPopupMenu menuEmergenteExpresion = null;	private JMenuItem itemImportar = null;	private JMenuItem itemExportar = null;	private JMenuItem itemSalir = null;	private JMenuItem itemAcercaDe = null;	private JMenuItem itemNuevaTabla = null;	private JMenuItem itemNuevaExpresion = null;	private JMenuItem itemIniciar = null;	private JMenuItem itemCopiarTabla = null;	private JMenuItem itemAyudaOnline = null;	private JMenuItem itemAyudaContextual = null;	private JMenuItem itemCopiarExpresion = null;	private JSeparator separadorArchivo1 = null;	private JSeparator separadorArchivo2 = null;    private JSeparator separadorMin1 = null;    private ButtonGroup seleccionSimulacion = null;    private JRadioButtonMenuItem itemMinAuto = null;	private JRadioButtonMenuItem itemMinInter = null;	// CAJAS Y ETIQUETAS	private JTextField cajaFuncion = null;	private JTextField cajaFuncionMinimizada = null;	private JLabel etiquetaTituloProceso = null;	private JLabel etiquetaImplicantesEsenciales = null;	private JComboBox comboImplicantesNoEsenciales = null;	// MODELOS	private QMCModeloTablaVerdad modeloTablaVerdad = null;  //  @jve:decl-index=0:visual-constraint=""    private QMCModeloTablaTerminosAgrupados modeloTablaTerminosAgrupados = null;    private QMCModeloTablaAdyacencias modeloTablaTerminos = null;    private QMCModeloTablaAdyacencias modeloTablaAdyacencias = null;    // LOGICA    private QMCFuncion funcion = null;    private QMCAlgoritmo algoritmo = null;    private static QMCInicio aplicacion = null;    // SISTEMA DE AYUDA//    private HelpSet helpSet = null;//	private HelpBroker helpBroker = null;	// VARIABLES	private boolean minimizacionAuto = false;    private boolean inicio = true;    private int paso, contador, anchoTabla, alturaTabla;	/**	 * Constructor de la aplicacion	 */	public QMCInicio() {		super();		iniciaSistemaAyuda();		initialize();	}	/**	 * Motodo iniciador de los componentes de la aplicacion	 *	 * @return void	 */	private void initialize() {		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);		this.setSize(760,456);		this.setLocationRelativeTo(null);		this.setJMenuBar(getBarraMenu());		this.setContentPane(getJContentPane());		this.setTitle("QMCMinimizer");        this.setIconImage(new ImageIcon(getClass().getResource("/Iconos/QMCIcono.gif")).getImage());	}    //////////////////////////////////////////////    // METODOS DE INICIO DE COMPONENTES (BEANS) //    //////////////////////////////////////////////	/**	 * Motodo que inicializa el componente jContentPane	 *	 * @return javax.swing.JPanel	 */	public JPanel getJContentPane() {		if (jContentPane == null) {			jContentPane = new JPanel();			jContentPane.setLayout(new BorderLayout());			jContentPane.add(getPanelSolucion(), java.awt.BorderLayout.SOUTH);			jContentPane.add(getPanelIzquierdo(), java.awt.BorderLayout.WEST);			jContentPane.add(getPanelSuperior(), java.awt.BorderLayout.NORTH);			jContentPane.add(getPanelMinimizacionGeneral(), java.awt.BorderLayout.CENTER);		}		return jContentPane;	}	/**	 * Motodo que inicializa el componente barraMenu	 *	 * @return javax.swing.JMenuBar	 */	public JMenuBar getBarraMenu() {		if (barraMenu == null) {			barraMenu = new JMenuBar();			barraMenu.add(getMenuArchivo());			barraMenu.add(getSimulacion());			barraMenu.add(getMenuAyuda());		}		return barraMenu;	}	/**	 * Motodo que inicializa el componente menuArchivo	 *	 * @return javax.swing.JMenu	 */	public JMenu getMenuArchivo() {		if (menuArchivo == null) {			menuArchivo = new JMenu();			separadorArchivo1 =  new JSeparator();			separadorArchivo2 = new JSeparator();			menuArchivo.setText("Archivo");			menuArchivo.setMnemonic(java.awt.event.KeyEvent.VK_A);			menuArchivo.add(getMenuNuevaFuncion());			menuArchivo.add(separadorArchivo1);			menuArchivo.add(getItemImportar());			menuArchivo.add(getItemExportar());			menuArchivo.add(separadorArchivo2);			menuArchivo.add(getItemSalir());		}		return menuArchivo;	}    /**     * Motodo que inicializa el componente menuEmergenteTabla     *     * @return javax.swing.JPopupMenu     */    public JPopupMenu getMenuEmergenteTabla()    {        if (menuEmergenteTabla == null) {            menuEmergenteTabla = new JPopupMenu();            menuEmergenteTabla.add(getItemCopiarTabla());            menuEmergenteTabla.add(getItemAyudaContextual());        }        return menuEmergenteTabla;    }	/**	 * Motodo que inicializa el componente Simulacion	 *	 * @return javax.swing.JMenu	 */	public JMenu getSimulacion() {		if (menuMin == null) {			menuMin = new JMenu();			menuMin.setText("Minimizacion");			menuMin.setMnemonic(java.awt.event.KeyEvent.VK_M);			seleccionSimulacion = new ButtonGroup();			menuMin.add(getItemIniciar());            separadorMin1 =  new JSeparator();            menuMin.add(separadorMin1);			seleccionSimulacion.add(getItemMinAuto());			seleccionSimulacion.add(getItemMinInteract());			menuMin.add(getItemMinAuto());			menuMin.add(getItemMinInteract());		}		return menuMin;	}	/**	 * Motodo que inicializa el componente menuAyuda	 *	 * @return javax.swing.JMenu	 */	public JMenu getMenuAyuda() {		if (menuAyuda == null) {			menuAyuda = new JMenu();			menuAyuda.setText("Ayuda");			menuAyuda.setMnemonic(java.awt.event.KeyEvent.VK_Y);			menuAyuda.add(getItemAyudaOnline());            menuAyuda.add(getItemAcercaDe());		}		return menuAyuda;	}	/**	 * Motodo que inicializa el componente menuNuevaFuncion	 *	 * @return javax.swing.JMenu	 */	public JMenu getMenuNuevaFuncion() {		if (menuNuevaFuncion == null) {			menuNuevaFuncion = new JMenu();			menuNuevaFuncion.setText("Nueva Funcion");			menuNuevaFuncion.add(getItemNuevaTabla());			menuNuevaFuncion.add(getItemNuevaExpresion());		}		return menuNuevaFuncion;	}	/**	 * Motodo que inicializa el componente itemImportar	 *	 * @return javax.swing.JMenuItem	 */	public JMenuItem getItemImportar() {		if (itemImportar == null) {			itemImportar = new JMenuItem();			itemImportar.setText("Importar...");			itemImportar.setMnemonic(java.awt.event.KeyEvent.VK_I);			itemImportar.addActionListener(new java.awt.event.ActionListener() {				public void actionPerformed(final java.awt.event.ActionEvent e) {                    accionImportar();				}			});		}		return itemImportar;	}	/**	 * Motodo que inicializa el componente itemExportar	 *	 * @return javax.swing.JMenuItem	 */	public JMenuItem getItemExportar() {		if (itemExportar == null) {			itemExportar = new JMenuItem();			itemExportar.setText("Exportar...");            itemExportar.setEnabled(false);			itemExportar.setMnemonic(java.awt.event.KeyEvent.VK_E);			itemExportar.addActionListener(new java.awt.event.ActionListener() {				public void actionPerformed(final java.awt.event.ActionEvent e) {                    accionExportar();				}			});		}		return itemExportar;	}	/**	 * Motodo que inicializa el componente itemSalir	 *	 * @return javax.swing.JMenuItem	 */	public JMenuItem getItemSalir() {		if (itemSalir == null) {			itemSalir = new JMenuItem();			itemSalir.setText("Salir");			itemSalir.setMnemonic(java.awt.event.KeyEvent.VK_S);			itemSalir.addActionListener(new java.awt.event.ActionListener() {				public void actionPerformed(final java.awt.event.ActionEvent e) {					System.exit(0);				}			});		}		return itemSalir;	}	/**	 * Motodo que inicializa el componente itemSimAuto	 *	 * @return javax.swing.JRadioButtonMenuItem	 */	public JRadioButtonMenuItem getItemMinAuto() {		if (itemMinAuto == null) {			itemMinAuto = new JRadioButtonMenuItem();			itemMinAuto.setText("Automotica");			itemMinAuto.setMnemonic(java.awt.event.KeyEvent.VK_A);			itemMinAuto.addActionListener(new java.awt.event.ActionListener() {			    public void actionPerformed(final java.awt.event.ActionEvent e)                {                    getBotonMinAuto().setSelected(true);                    getBotonMinInter().setSelected(false);                    minimizacionAuto = true;                }			});		}		return itemMinAuto;	}	/**	 * Motodo que inicializa el componente itemSimInteract	 *	 * @return javax.swing.JRadioButtonMenuItem	 */	public JRadioButtonMenuItem getItemMinInteract() {		if (itemMinInter == null) {			itemMinInter = new JRadioButtonMenuItem();			itemMinInter.setText("Interactiva");            itemMinInter.setSelected(true);			itemMinInter.setMnemonic(java.awt.event.KeyEvent.VK_I);			itemMinInter.addActionListener(new java.awt.event.ActionListener() {			    public void actionPerformed(final java.awt.event.ActionEvent e)                {                    getBotonMinAuto().setSelected(false);                    getBotonMinInter().setSelected(true);                    minimizacionAuto = false;			    }			});		}		return itemMinInter;	}	/**	 * Motodo que inicializa el componente itemAcercaDe	 *	 * @return javax.swing.JMenuItem	 */	public JMenuItem getItemAcercaDe() {		if (itemAcercaDe == null) {			itemAcercaDe = new JMenuItem();			itemAcercaDe.setText("Acerca de...");			itemAcercaDe.addActionListener(new java.awt.event.ActionListener() {				public void actionPerformed(final java.awt.event.ActionEvent e) {                    accionAcerca();					}			});		}		return itemAcercaDe;	}	/**	 * Motodo que inicializa el componente itemNuevaTabla	 *	 * @return javax.swing.JMenuItem	 */	public JMenuItem getItemNuevaTabla() {		if (itemNuevaTabla == null) {			itemNuevaTabla = new JMenuItem();			itemNuevaTabla.setText("Nueva tabla...");			itemNuevaTabla.setMnemonic(java.awt.event.KeyEvent.VK_T);			itemNuevaTabla.addActionListener(new java.awt.event.ActionListener() {				public void actionPerformed(final java.awt.event.ActionEvent e) {					accionNuevaTabla();				}			});		}		return itemNuevaTabla;	}	/**	 * Motodo que inicializa el componente itemNuevaEcuacion	 *	 * @return javax.swing.JMenuItem	 */	public JMenuItem getItemNuevaExpresion() {		if (itemNuevaExpresion == null) {			itemNuevaExpresion = new JMenuItem();			itemNuevaExpresion.setText("Nueva expresion...");			itemNuevaExpresion.setMnemonic(java.awt.event.KeyEvent.VK_F);			itemNuevaExpresion.addActionListener(new java.awt.event.ActionListener() {				public void actionPerformed(final java.awt.event.ActionEvent e) {                    accionNuevaFuncion();				}			});		}		return itemNuevaExpresion;	}	/**	 * Motodo que inicializa el componente panelSolucion	 *	 * @return javax.swing.JPanel	 */	public JPanel getPanelSolucion() {	    if (panelSolucion == null) {	        panelSolucion = new JPanel();	        panelSolucion.setLayout(new BorderLayout());	        panelSolucion.setPreferredSize(new java.awt.Dimension(10,119));	        panelSolucion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Funcion Minimizada", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, null));            panelSolucion.setVisible(false);	    }	    return panelSolucion;	}	/**	 * Motodo que inicializa el componente panelTabla	 *	 * @return javax.swing.JScrollPane	 */	public JScrollPane getPanelTablaVerdad() {	    if (panelTablaVerdad == null) {	        panelTablaVerdad = new JScrollPane();	        panelTablaVerdad.setPreferredSize(new java.awt.Dimension(190,90));            panelTablaVerdad.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tabla de Verdad", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, null));	    }	    return panelTablaVerdad;	}	/**	 * Motodo que inicializa el componente tablaVerdad	 *	 * @return javax.swing.JTable	 */	public JTable getTablaVerdad() {	   if (tablaVerdad == null) {	      tablaVerdad = new JTable();          tablaVerdad.setAutoCreateColumnsFromModel(true);          tablaVerdad.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);          //tablaVerdad.setSize(new java.awt.Dimension(36,54));          tablaVerdad.setToolTipText("Tabla de verdad");          tablaVerdad.setFont(new java.awt.Font("Lucida Sans", java.awt.Font.PLAIN, 12));          tablaVerdad.setModel(getModeloTablaVerdad());          // Establezco el formato de las columnas          final DefaultTableCellRenderer rendererCentrado = new DefaultTableCellRenderer();          rendererCentrado.setHorizontalAlignment(SwingConstants.CENTER);          TableColumn columna = null;          for (int i=0; i<tablaVerdad.getColumnCount(); i++)          {              columna = tablaVerdad.getColumnModel().getColumn(i);              columna.setCellRenderer(rendererCentrado);              columna.setPreferredWidth(24);          }          final DefaultTableCellRenderer rendererCentradoColor = new DefaultTableCellRenderer();          rendererCentradoColor.setHorizontalAlignment(SwingConstants.CENTER);          rendererCentradoColor.setBackground(Color.lightGray);          columna.setCellRenderer(rendererCentradoColor);          tablaVerdad.addMouseListener(new java.awt.event.MouseAdapter()          {              String salida;              Object datoCelda;              int posicionSalida;              public void mouseClicked(final java.awt.event.MouseEvent e)              {                  // Accion de cambiar manualmente un valor de salida de la tabla                  if (e.getButton() == MouseEvent.BUTTON1 && tablaVerdad.getSelectedColumn() == (tablaVerdad.getColumnCount()-1) && tablaVerdad.isEnabled())                  {                      // Cadena de valores que puede tomar la salida                      salida = "n01X";                      // Recojo el valor actual de la celda                      datoCelda = tablaVerdad.getValueAt(tablaVerdad.getSelectedRow(),tablaVerdad.getSelectedColumn());                      if (datoCelda == null || datoCelda.equals("X"))                      {                          datoCelda = "n";                      }                      posicionSalida = salida.indexOf((String)datoCelda);                      // Tomo el valor siguiente                      salida = String.valueOf(salida.charAt(posicionSalida+1));                      // Establezco el nuevo valor                      tablaVerdad.setValueAt(salida, tablaVerdad.getSelectedRow(), tablaVerdad.getSelectedColumn());                  }                  else if(e.getButton() == MouseEvent.BUTTON3)                  {                      System.out.println("boton derecho");                      setTablaCopia(tablaVerdad);                      // Marca ayuda contextual//                      getHelpBroker().setCurrentID("TablaVerdad");                      getMenuEmergenteTabla().show(tablaVerdad, e.getX(),e.getY());                  }              }          });       }	    return tablaVerdad;	}	/**	 * Motodo que inicializa el componente modeloTablaVerdad	 *	 * @return logica.QMCModeloTablaVerdad	 */	public QMCModeloTablaVerdad getModeloTablaVerdad() {	    if (modeloTablaVerdad == null) {	        modeloTablaVerdad = new QMCModeloTablaVerdad(QMCUtilFormateo.generaCabeceraTablaVerdad(funcion.getVariables()),QMCUtilFormateo.generaDatosTablaVerdad(funcion.getNumVariables(),funcion.getForma(),funcion.getTerminos(),funcion.getIndiferencias()));	    }	    return modeloTablaVerdad;	}     /**     * Motodo que inicializa el componente modeloTablaTerminos     *     * @return logica.QMCModeloTablaAdyacencia     */    public QMCModeloTablaAdyacencias getModeloTablaTerminos() {        if (modeloTablaTerminos == null) {            final String cabecera[] = new String[] {"DEC","BIN","IND",""};            Object datosTabla[][];            datosTabla = QMCUtilFormateo.generaMatrizTerminos(funcion.getListaTerminos(),minimizacionAuto);            modeloTablaTerminos = new QMCModeloTablaAdyacencias(cabecera, datosTabla);        }        return modeloTablaTerminos;    }    /**     * Motodo que inicializa el componente modeloTablaAdyacencias     *     * @return logica.QMCModeloTablaAdyacencia     */    public QMCModeloTablaAdyacencias getModeloTablaAdyacencias() {        if (modeloTablaAdyacencias == null) {            final String cabecera[] = new String[] {"IND","DEC","BIN",""};            Object datosTabla[][];            datosTabla = QMCUtilFormateo.generaMatrizAdyacencias(algoritmo.getListaAdyacenciasActual(),minimizacionAuto);            modeloTablaAdyacencias = new QMCModeloTablaAdyacencias(cabecera, datosTabla);        }        return modeloTablaAdyacencias;    }    /**     * Motodo que inicializa el componente modeloTablaTerminos     *     * @return logica.QMCModeloTablaAdyacencia     */    public QMCModeloTablaTerminosAgrupados getModeloTablaTerminosAgrupados() {        if (modeloTablaTerminosAgrupados == null) {            final String cabecera[] = new String[] {"IND","DEC",""};            Object datosTabla [][];            datosTabla = QMCUtilFormateo.generaMatrizTerminosOrdenados(algoritmo.getListaAdyacenciasActual(), minimizacionAuto);            modeloTablaTerminosAgrupados = new QMCModeloTablaTerminosAgrupados(cabecera, datosTabla);        }        return modeloTablaTerminosAgrupados;    }	/**	 * Motodo que inicializa el componente panelIzquierdo	 *	 * @return javax.swing.JPanel	 */	public JPanel getPanelIzquierdo() {	    if (panelIzquierdo == null) {	        panelIzquierdo = new JPanel();	        panelIzquierdo.setLayout(new BorderLayout());	        panelIzquierdo.setPreferredSize(new java.awt.Dimension(212,10));	        panelIzquierdo.add(getPanelBotonesTabla(), java.awt.BorderLayout.SOUTH);	        panelIzquierdo.add(getPanelTablaVerdad(), java.awt.BorderLayout.CENTER);            panelIzquierdo.setVisible(false);	    }	    return panelIzquierdo;	}	/**	 * Motodo que inicializa el componente panelBotonesTabla	 *	 * @return javax.swing.JPanel	 */	public JPanel getPanelBotonesTabla() {	    if (panelBotonesTabla == null) {	        panelBotonesTabla = new JPanel();	        panelBotonesTabla.setPreferredSize(new java.awt.Dimension(60,55));	        panelBotonesTabla.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Rellenar tabla", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, null));	        panelBotonesTabla.setVisible(false);	        panelBotonesTabla.add(getBotonTablaCeros(), null);	        panelBotonesTabla.add(getBotonTablaBorrar(), null);	        panelBotonesTabla.add(getBotonTablaUnos(), null);	    }	    return panelBotonesTabla;	}	/**	 * Motodo que inicializa el componente botonCeros	 *	 * @return javax.swing.JButton	 */	public JButton getBotonTablaCeros() {	    if (botonTablaCeros == null) {	        botonTablaCeros = new JButton();	        botonTablaCeros.setPreferredSize(new java.awt.Dimension(45,25));	        botonTablaCeros.setToolTipText("Rellena con ceros los valores de salida de la tabla");	        botonTablaCeros.setText("0");	        botonTablaCeros.setVisible(true);	        botonTablaCeros.addActionListener(new java.awt.event.ActionListener() {	            public void actionPerformed(final java.awt.event.ActionEvent e) {                    Object datoCelda;                    for(int i=0; i<tablaVerdad.getRowCount(); i++)                    {                        // Recojo el valor actual de la celda                        datoCelda = tablaVerdad.getValueAt(i, tablaVerdad.getColumnCount()-1);                        if (datoCelda == null)                        {                            tablaVerdad.setValueAt("0", i,(tablaVerdad.getColumnCount()-1));                        }                    }                }	        });	    }	    return botonTablaCeros;	}	/**	 * Motodo que inicializa el componente jButton	 *	 * @return javax.swing.JButton	 */	public JButton getBotonTablaBorrar() {	    if (botonTablaBorrar == null) {	        botonTablaBorrar = new JButton();	        botonTablaBorrar.setPreferredSize(new java.awt.Dimension(74,25));	        botonTablaBorrar.setToolTipText("Vacia los valores de salida de la tabla");	        botonTablaBorrar.setText("Borrar");	        botonTablaBorrar.setVisible(true);	        botonTablaBorrar.addActionListener(new java.awt.event.ActionListener() {	            public void actionPerformed(final java.awt.event.ActionEvent e) {                    for(int i=0; i<tablaVerdad.getRowCount(); i++)                    {                        tablaVerdad.setValueAt(null, i,(tablaVerdad.getColumnCount()-1));                    }	            }	        });	    }	    return botonTablaBorrar;	}	/**	 * Motodo que inicializa el componente jButton1	 *	 * @return javax.swing.JButton	 */	public JButton getBotonTablaUnos() {	    if (botonTablaUnos == null) {	        botonTablaUnos = new JButton();	        botonTablaUnos.setPreferredSize(new java.awt.Dimension(45,25));	        botonTablaUnos.setToolTipText("Rellena con unos los valores de salida de la tabla");	        botonTablaUnos.setText("1");	        botonTablaUnos.setVisible(true);	        botonTablaUnos.addActionListener(new java.awt.event.ActionListener() {	            public void actionPerformed(final java.awt.event.ActionEvent e) {                    Object datoCelda;                    for(int i=0; i<tablaVerdad.getRowCount(); i++)                    {                        // Recojo el valor actual de la celda                        datoCelda = tablaVerdad.getValueAt(i, tablaVerdad.getColumnCount()-1);                        if (datoCelda == null)                        {                            tablaVerdad.setValueAt("1", i,(tablaVerdad.getColumnCount()-1));                        }                    }                }	        });	    }	    return botonTablaUnos;	}	/**	 * Motodo que inicializa el componente Iniciar	 *	 * @return javax.swing.JMenuItem	 */	public JMenuItem getItemIniciar() {	    if (itemIniciar == null) {	        itemIniciar = new JMenuItem();	        itemIniciar.setPreferredSize(new java.awt.Dimension(93,21));	        itemIniciar.setMnemonic(java.awt.event.KeyEvent.VK_I);	        itemIniciar.setText("Iniciar");            itemIniciar.setEnabled(false);            itemIniciar.addActionListener(new java.awt.event.ActionListener() {                public void actionPerformed(final java.awt.event.ActionEvent e)                {                    accionIniciar();                }            });	    }	    return itemIniciar;	}    /**     * Motodo que inicializa el componente barraHerramientas     *     * @return javax.swing.JToolBar     */    public JToolBar getBarraHerramientas() {        if (barraHerramientas == null) {            barraHerramientas = new JToolBar();            barraHerramientas.setLayout(null);            barraHerramientas.setPreferredSize(new java.awt.Dimension(76,32));            barraHerramientas.add(getBotonNuevaTabla());            barraHerramientas.add(getBotonNuevaExpresion());            barraHerramientas.add(getBotonImportar());            barraHerramientas.add(getBotonExportar());            barraHerramientas.add(getBotonMinAuto());            barraHerramientas.add(getBotonMinInter());            barraHerramientas.add(getBotonDetenerMin());            barraHerramientas.add(getBotonIniciarMin());            barraHerramientas.add(getBotonPasoSiguiente());            barraHerramientas.add(getBotonAyuda());        }        return barraHerramientas;    }	/**	 * Motodo que inicializa el componente botonNuevaTabla	 *	 * @return javax.swing.JButton	 */	public JButton getBotonNuevaTabla() {	    if (botonNuevaTabla == null) {	        botonNuevaTabla = new JButton();	        botonNuevaTabla.setIcon(new ImageIcon(getClass().getResource("/Iconos/ColumnInsertAfter16.gif")));	        botonNuevaTabla.setToolTipText("Nueva tabla de verdad");	        botonNuevaTabla.setMnemonic(java.awt.event.KeyEvent.VK_T);            botonNuevaTabla.setFocusPainted(false);	        botonNuevaTabla.setBounds(new java.awt.Rectangle(16,1,28,28));	        botonNuevaTabla.addActionListener(new java.awt.event.ActionListener() {	            public void actionPerformed(final java.awt.event.ActionEvent e) {                    accionNuevaTabla();                }	        });	    }	    return botonNuevaTabla;	}	/**	 * Motodo que inicializa el componente botonNuevaExpresion	 *	 * @return javax.swing.JButton	 */	public JButton getBotonNuevaExpresion() {	    if (botonNuevaExpresion == null) {	        botonNuevaExpresion = new JButton();	        botonNuevaExpresion.setText("f(..)");	        botonNuevaExpresion.setToolTipText("Nueva expresion");            botonNuevaExpresion.setFocusPainted(false);            botonNuevaExpresion.setMnemonic(java.awt.event.KeyEvent.VK_F);	        botonNuevaExpresion.setBounds(new java.awt.Rectangle(44,1,30,28));	        botonNuevaExpresion.addActionListener(new java.awt.event.ActionListener() {	            public void actionPerformed(final java.awt.event.ActionEvent e) {                    accionNuevaFuncion();                }	        });	    }	    return botonNuevaExpresion;	}	/**	 * Motodo que inicializa el componente botonImportar	 *	 * @return javax.swing.JButton	 */	public JButton getBotonImportar() {	    if (botonImportar == null) {	        botonImportar = new JButton();	        botonImportar.setIcon(new ImageIcon(getClass().getResource("/Iconos/open16.gif")));	        botonImportar.setToolTipText("Importar");            botonImportar.setFocusPainted(false);            botonImportar.setMnemonic(java.awt.event.KeyEvent.VK_I);            botonImportar.setBounds(new java.awt.Rectangle(74,1,30,28));            botonImportar.addActionListener(new java.awt.event.ActionListener() {                public void actionPerformed(final java.awt.event.ActionEvent e) {                    accionImportar();                }            });	    }	    return botonImportar;	}	/**	 * Motodo que inicializa el componente botonExportar	 *	 * @return javax.swing.JButton	 */	public JButton getBotonExportar() {	    if (botonExportar == null) {	        botonExportar = new JButton();	        botonExportar.setBounds(new java.awt.Rectangle(104,1,28,28));	        botonExportar.setToolTipText("Exportar");            botonExportar.setFocusPainted(false);            botonExportar.setMnemonic(java.awt.event.KeyEvent.VK_E);	        botonExportar.setIcon(new ImageIcon(getClass().getResource("/Iconos/Save16.gif")));            botonExportar.setEnabled(false);	        botonExportar.addActionListener(new java.awt.event.ActionListener() {	            public void actionPerformed(final java.awt.event.ActionEvent e) {                    accionExportar();	            }	        });	    }	    return botonExportar;	}	/**	 * Motodo que inicializa el componente botonDetenerMin	 *	 * @return javax.swing.JButton	 */	public JButton getBotonDetenerMin() {	    if (botonDetenerMin == null) {	        botonDetenerMin = new JButton();	        botonDetenerMin.setIcon(new ImageIcon(getClass().getResource("/Iconos/Stop16.gif")));	        botonDetenerMin.setToolTipText("Detener minimizacion");            botonDetenerMin.setFocusPainted(false);            botonDetenerMin.setEnabled(false);            botonDetenerMin.setMnemonic(java.awt.event.KeyEvent.VK_D);            botonDetenerMin.setBounds(new java.awt.Rectangle(272,1,28,28));            botonDetenerMin.addActionListener(new java.awt.event.ActionListener() {                public void actionPerformed(final java.awt.event.ActionEvent e) {                   accionDetener();                }            });	    }	    return botonDetenerMin;	}	/**	 * Motodo que inicializa el componente botonIniciarMin	 *	 * @return javax.swing.JButton	 */	public JButton getBotonIniciarMin() {	    if (botonIniciarMin == null) {	        botonIniciarMin = new JButton();	        botonIniciarMin.setIcon(new ImageIcon(getClass().getResource("/Iconos/Play16.gif")));	        botonIniciarMin.setToolTipText("Iniciar minimizacion");            botonIniciarMin.setFocusPainted(false);            botonIniciarMin.setEnabled(false);            botonIniciarMin.setMnemonic(java.awt.event.KeyEvent.VK_C);            botonIniciarMin.setBounds(new java.awt.Rectangle(302,1,28,28));            botonIniciarMin.addActionListener(new java.awt.event.ActionListener() {                public void actionPerformed(final java.awt.event.ActionEvent e) {                    accionIniciar();                }            });	    }	    return botonIniciarMin;	}	/**	 * Motodo que inicializa el componente botonPasoSiguiente	 *	 * @return javax.swing.JButton	 */	public JButton getBotonPasoSiguiente() {	    if (botonPasoSiguiente == null) {	        botonPasoSiguiente = new JButton();	        botonPasoSiguiente.setIcon(new ImageIcon(getClass().getResource("/Iconos/FastForward16.gif")));	        botonPasoSiguiente.setToolTipText("Paso siguiente de la minimizacion");            botonPasoSiguiente.setFocusPainted(false);            botonPasoSiguiente.setEnabled(false);            botonPasoSiguiente.setMnemonic(java.awt.event.KeyEvent.VK_S);            botonPasoSiguiente.setBounds(new java.awt.Rectangle(332,1,28,28));            botonPasoSiguiente.addActionListener(new java.awt.event.ActionListener() {                public void actionPerformed(final java.awt.event.ActionEvent e) {                    boolean continua = true;                    boolean error = false;                    String cadenaMarcas, cadenaSolucion, comprobacion;                    comprobacion = "";                    // COMPROBACION DE PASOS COMPLETOS                    // pasos fase 1                    if(paso<4)                    {                        Object datoCelda;                        for(int i=0; (i<tablaActual.getRowCount()) && (continua); i++)                        {                            datoCelda = getTablaActual().getValueAt(i,(1));                            if(datoCelda == "")                            {                                comprobacion = "No se ha completado el paso";                                continua  = false;                            }                        }                        // Comprobacion de adyacencias cubiertas                        if(paso==2)                        {                            QMCBinarioBean adyacencia;                            boolean check;                            for(int i=0;i<getTablaAnterior().getRowCount();i++)                            {                                adyacencia = (QMCBinarioBean)algoritmo.getListaAdyacenciasAnterior().get(i);                                check = ((Boolean)getTablaAnterior().getValueAt(i,(getTablaAnterior().getColumnCount()-1))).booleanValue();                                if(adyacencia.isUsada()!=check)                                {                                    comprobacion = "Faltan adyacencias por usar";                                    continua = false;                                }                            }                         }                    }                    // Pasos fase 2                    // Comprobacion de tabla de implicantes esenciales                    if(paso==4)                    {                        cadenaMarcas = QMCUtilFormateo.generaCadenaImplicantesEsenciales(algoritmo.getListaImplicantesInteractivos(),'n');                        cadenaSolucion = QMCUtilFormateo.generaCadenaImplicantesEsenciales(algoritmo.getListaImplicantesPrimos(),'n');                        if(cadenaMarcas.length()!=cadenaSolucion.length())                        {                            comprobacion = "Faltan implicantes esenciales por marcar";                            continua = false;                            error = true;                        }                        if(algoritmo.isTerminosTodosCubiertos())                        {                            // Salta el paso de la tabla de implicantes reducida                            paso++;                        }                    }                    // Comprobacion de tabla de implicantes reducida                    if(paso==5 && !algoritmo.isTerminosTodosCubiertos())                    {                        cadenaMarcas = QMCUtilFormateo.generaCadenaImplicantesEsenciales(algoritmo.getListaImplicantesInteractivos(), 'n');                        comprobacion = QMCUtilLogica.compruebaImplicantesNoEsenciales(algoritmo.getListaSolucionesMinimas(), cadenaMarcas);                        if(comprobacion.equals("correcto"))                        {                            algoritmo.setListaSolucionesMinimas(cadenaMarcas);                        }                        else                        {                            comprobacion = "Seleccion de implicantes incorrecta: "+comprobacion;                            continua = false;                        }                    }                    // CAMBIA DE PASO                    if(continua)                    {                        // Intervalos para los que no se muestran tablas de adyacencia                        if (paso!=2)                        {                            paso++;                        }                        // Intervalos para los que si (recorre array de listas de adyacencias)                        if (paso==2)                        {                            contador++;                            // Comprobamos si es la ultima adyacencia                            if(contador > algoritmo.getArrayListasAdyacencias().size()-1)                            {                                // habilita la fase 2                                getPanelFasesMinimizacion().setEnabledAt(1,true);                                contador = 0;                                paso++;                            }                        }                        cambioPaso();                    }                    // No continua                    else                    {                        // Muestra mensaje de paso no finalizado                        if(!error)                        {                            JOptionPane.showMessageDialog(null,comprobacion,"Minimizacion interactiva",JOptionPane.INFORMATION_MESSAGE);                        }                        else                        {                            JOptionPane.showMessageDialog(null, comprobacion, "Minimizacion interactiva", JOptionPane.ERROR_MESSAGE);                        }                    }                }            });	    }	    return botonPasoSiguiente;	}	/**	 * Motodo que inicializa el componente panelSuperior	 *	 * @return javax.swing.JPanel	 */	public JPanel getPanelSuperior() {	    if (panelSuperior == null) {	        panelSuperior = new JPanel();	        panelSuperior.setLayout(new BorderLayout());            panelSuperior.add(getBarraHerramientas(), java.awt.BorderLayout.NORTH);            panelSuperior.add(getPanelFuncion(), java.awt.BorderLayout.SOUTH);	    }	    return panelSuperior;	}	/**	 * Motodo que inicializa el componente panelFuncion	 *	 * @return javax.swing.JPanel	 */	public JPanel getPanelFuncion() {	    if (panelFuncion == null) {	        panelFuncion = new JPanel();	        panelFuncion.setLayout(new BorderLayout());	        panelFuncion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Funcion", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, null));	        panelFuncion.setVisible(false);	        panelFuncion.add(getCajaFuncion(), java.awt.BorderLayout.CENTER);	    }	    return panelFuncion;	}    /**     * Motodo que inicializa el componente etiquetaFuncion     */    public JTextField getCajaFuncion(){        if (cajaFuncion == null){            cajaFuncion = new JTextField();            cajaFuncion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);            cajaFuncion.setToolTipText("Funcion de conmutacion en forma canonica");            cajaFuncion.setFont(new java.awt.Font("Georgia", java.awt.Font.BOLD | java.awt.Font.ITALIC, 13));            cajaFuncion.addMouseListener(new java.awt.event.MouseAdapter() {            	public void mouseClicked(final java.awt.event.MouseEvent e)            	{            		if(e.getButton() == MouseEvent.BUTTON3)                    {           			 	getMenuEmergenteExpresion().show(cajaFuncion, e.getX(),e.getY());           			 	cajaFuncion.selectAll();           			 	cajaFuncion.copy();                    }            	}            });        }        return cajaFuncion;    }	/**	 * Motodo que inicializa el componente panelMinimizacion	 *	 * @return javax.swing.JPanel	 */	public JPanel getPanelMinimizacionGeneral() {	    if (panelMinimizacionGeneral == null) {	        etiquetaTituloProceso = new JLabel();            etiquetaTituloProceso.setText("Fases del motodo de minimizacion Quine-McCluskey");	        etiquetaTituloProceso.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);	        etiquetaTituloProceso.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 14));	        etiquetaTituloProceso.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);            etiquetaTituloProceso.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));	        panelMinimizacionGeneral = new JPanel();            panelMinimizacionGeneral.setLayout(new BorderLayout());            panelMinimizacionGeneral.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));            panelMinimizacionGeneral.add(etiquetaTituloProceso, java.awt.BorderLayout.NORTH);            panelMinimizacionGeneral.setVisible(false);            panelMinimizacionGeneral.add(getPanelFasesMinimizacion(), java.awt.BorderLayout.CENTER);	    }	    return panelMinimizacionGeneral;	}    /**     * Motodo que inicializa el componente panelTablaTerminos     *     * @return javax.swing.JScrollPane     */    public JScrollPane getPanelTablaTerminos() {        if (panelTablaTerminos == null) {            panelTablaTerminos = new JScrollPane();            panelTablaTerminos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, null), "Paso 1: Tabla de terminos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", java.awt.Font.BOLD, 10), new java.awt.Color(51,51,51)));            panelTablaTerminos.setViewportView(getTablaTerminos());            panelTablaTerminos.setPreferredSize(new Dimension(175,700));        }        return panelTablaTerminos;    }    /**     * Motodo que inicializa el componente panelTablaAgrupacion     *     * @return javax.swing.JScrollPane     */    public JScrollPane getPanelTablaTerminosAgrupados() {        if (panelTablaTerminosAgrupados == null) {            panelTablaTerminosAgrupados = new JScrollPane();            panelTablaTerminosAgrupados.setViewportView(getTablaTerminosAgrupados());            panelTablaTerminosAgrupados.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Paso 2: Agrupacion terminos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", java.awt.Font.BOLD, 10), new java.awt.Color(51,51,51)));            panelTablaTerminosAgrupados.setPreferredSize(new Dimension(152,700));        }        return panelTablaTerminosAgrupados;    }    /**     * Motodo que inicializa el componente panelTablaAdyacencias     *     * @return javax.swing.JScrollPane     */    public JScrollPane getPanelTablaAdyacencias() {        if (panelTablaAdyacencias == null) {            final int pasoTexto = paso+contador;            anchoTabla = 70*((int)Math.pow(contador,1.5));            panelTablaAdyacencias = new JScrollPane();            panelTablaAdyacencias.setViewportView(getTablaAdyacencias());            panelTablaAdyacencias.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Paso "+pasoTexto+": Adyacencias "+contador+"o", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", java.awt.Font.BOLD, 10), new java.awt.Color(51,51,51)));            panelTablaAdyacencias.setPreferredSize(new Dimension(anchoTabla+147,700));        }        return panelTablaAdyacencias;    }    /**     * Motodo que inicializa el componente tablaTerminos     *     * @return javax.swing.JTable     */    public JTable getTablaTerminos() {        if (tablaTerminos == null) {            tablaTerminos = new JTable();            tablaTerminos.setModel(getModeloTablaTerminos());            tablaTerminos.setFont(new java.awt.Font("Lucida Sans", java.awt.Font.PLAIN, 12));            final DefaultTableCellRenderer rendererCentrado = new DefaultTableCellRenderer();            rendererCentrado.setHorizontalAlignment(SwingConstants.CENTER);            tablaTerminos.getColumnModel().getColumn(0).setMaxWidth(30);            tablaTerminos.getColumnModel().getColumn(0).setCellRenderer(rendererCentrado);            tablaTerminos.getColumnModel().getColumn(1).setCellRenderer(rendererCentrado);            tablaTerminos.getColumnModel().getColumn(2).setMaxWidth(30);            tablaTerminos.getColumnModel().getColumn(2).setCellRenderer(rendererCentrado);            tablaTerminos.getColumnModel().getColumn(3).setMaxWidth(16);            tablaTerminos.getColumnModel().getColumns();            // Modo automatico            if(minimizacionAuto)            {                final TableColumn columna = tablaTerminos.getColumnModel().getColumn(3);                // Esconde la columna de ordenacion de terminos                tablaTerminos.getColumnModel().removeColumn(columna);                // Si el modo de minimizacion es automatico habilita el menu emergente solamente                tablaTerminos.addMouseListener(new java.awt.event.MouseAdapter() {                        public void mouseClicked(final java.awt.event.MouseEvent e)                        {                            if(e.getButton() == MouseEvent.BUTTON3)                            {                                setTablaCopia(tablaTerminos);                                // Marca ayuda contextual//                                getHelpBroker().setCurrentID("Terminos");                                getMenuEmergenteTabla().show(tablaTerminos, e.getX(),e.getY());                            }                        }                 });            }            // Modo interactivo            else            {                final QMCControladorTablaTerminos listenerTablaTerminos = new QMCControladorTablaTerminos(aplicacion, funcion, algoritmo);                tablaTerminos.addMouseListener(listenerTablaTerminos);            }        }        return tablaTerminos;    }    /**     * Motodo que inicializa el componente tablaAgrupacionTerminos     *     * @return javax.swing.JTable     */    public JTable getTablaTerminosAgrupados() {        if (tablaTerminosAgrupados == null) {            tablaTerminosAgrupados = new JTable();            final DefaultTableCellRenderer rendererCentrado = new DefaultTableCellRenderer();            rendererCentrado.setHorizontalAlignment(SwingConstants.CENTER);            tablaTerminosAgrupados.setModel(getModeloTablaTerminosAgrupados());            tablaTerminosAgrupados.setFont(new java.awt.Font("Lucida Sans", java.awt.Font.PLAIN, 12));            tablaTerminosAgrupados.getColumnModel().getColumn(0).setMaxWidth(30);            tablaTerminosAgrupados.getColumnModel().getColumn(0).setCellRenderer(rendererCentrado);            tablaTerminosAgrupados.getColumnModel().getColumn(2).setMaxWidth(16);            if(!minimizacionAuto)            {                final QMCControladorTablaAdyacencias listenerTerminosAgrupados = new QMCControladorTablaAdyacencias(aplicacion, algoritmo);                tablaTerminosAgrupados.addMouseListener(listenerTerminosAgrupados);            }            // Si el modo de minimizacion es automatico habilita el menu emergente solamente            else            {                tablaTerminosAgrupados.addMouseListener(new java.awt.event.MouseAdapter() {                    public void mouseClicked(final java.awt.event.MouseEvent e)                    {                        if(e.getButton() == MouseEvent.BUTTON3)                        {                            setTablaCopia(tablaTerminosAgrupados);                            // Marca ayuda contextual//                            getHelpBroker().setCurrentID("TerminosAgrupados");                            getMenuEmergenteTabla().show(tablaTerminosAgrupados, e.getX(),e.getY());                        }                    }                });            }        }        return tablaTerminosAgrupados;    }	/**	 * Motodo que inicializa el componente tablaAdyacencias	 *	 * @return javax.swing.JTable	 */	public JTable getTablaAdyacencias() {	    if (tablaAdyacencias == null) {            tablaAdyacencias = new JTable();            System.out.println(tablaAdyacencias.hashCode());            final DefaultTableCellRenderer rendererCentrado = new DefaultTableCellRenderer();            rendererCentrado.setHorizontalAlignment(SwingConstants.CENTER);            tablaAdyacencias.setModel(getModeloTablaAdyacencias());            tablaAdyacencias.setFont(new java.awt.Font("Lucida Sans", java.awt.Font.PLAIN, 12));            tablaAdyacencias.getColumnModel().getColumn(0).setMaxWidth(30);            tablaAdyacencias.getColumnModel().getColumn(0).setCellRenderer(rendererCentrado);            tablaAdyacencias.getColumnModel().getColumn(1).setCellRenderer(rendererCentrado);            tablaAdyacencias.getColumnModel().getColumn(2).setMaxWidth(70);            tablaAdyacencias.getColumnModel().getColumn(2).setCellRenderer(rendererCentrado);            tablaAdyacencias.getColumnModel().getColumn(2).setMinWidth(70);            tablaAdyacencias.getColumnModel().getColumn(3).setMaxWidth(16);            // Si el modo de minimizacion es interactivo aoade listener de eventos a la tabla            if(!minimizacionAuto)            {                final QMCControladorTablaAdyacencias listenerAdyacencias = new QMCControladorTablaAdyacencias(aplicacion, algoritmo);                tablaAdyacencias.addMouseListener(listenerAdyacencias);            }            // Si el modo de minimizacion es automatico habilita el menu emergente            else            {                tablaAdyacencias.addMouseListener(new java.awt.event.MouseAdapter() {                    public void mouseClicked(final java.awt.event.MouseEvent e)                    {                        if(e.getButton() == MouseEvent.BUTTON3)                        {                        	tablaAdyacencias = (JTable)e.getComponent();                            setTablaCopia(tablaAdyacencias);                            // Marca ayuda contextual//                            getHelpBroker().setCurrentID("Adyacencias");                            getMenuEmergenteTabla().show(tablaAdyacencias, e.getX(),e.getY());                        }                    }                });            }	    }	    return tablaAdyacencias;	}	/**	 * Motodo que inicializa el componente panelFasesMinimizacion	 *	 * @return javax.swing.JTabbedPane	 */	public JTabbedPane getPanelFasesMinimizacion() {	    if (panelFasesMinimizacion == null) {	        panelFasesMinimizacion = new JTabbedPane();            panelFasesMinimizacion.addTab("Fase 1: Generacion de adyacencias",getPanelScrollFase1());            panelFasesMinimizacion.setToolTipTextAt(0,"Proceso que elimina variables de los terminos que expresan la funcion");            panelFasesMinimizacion.addTab("Fase 2: Determinacion de implicantes",getPanelScrollFase2());            panelFasesMinimizacion.setToolTipTextAt(1,"Proceso que elimina torminos de la expresion de la funcion");            panelFasesMinimizacion.setEnabledAt(1,false);	    }	    return panelFasesMinimizacion;	}    /**     * Motodo que inicializa el componente panelScrollFase1     *     * @return javax.swing.JScrollPane     */    public JScrollPane getPanelScrollFase1() {        if (panelScrollFase1 == null) {            panelScrollFase1 = new JScrollPane();            panelScrollFase1.setViewportView(getPanelFase1());        }        return panelScrollFase1;    }    /**	 * Motodo que inicializa el componente PanelScrollFase2	 *	 * @return javax.swing.JScrollPane	 */	public JScrollPane getPanelScrollFase2() {	    if (panelScrollFase2 == null) {	        panelScrollFase2 = new JScrollPane();	        panelScrollFase2.setViewportView(getPanelFase2());	    }	    return panelScrollFase2;	}    /**     * Motodo que inicializa el componente panelFase1     *     * @return javax.swing.JPanel     */    public JPanel getPanelFase1() {        if (panelFase1 == null) {            panelFase1 = new JPanel();            panelFase1.setLayout(new FlowLayout(FlowLayout.LEFT));        }        return panelFase1;    }	/**	 * Motodo que inicializa el componente panelFase2	 *	 * @return javax.swing.JPanel	 */	public JPanel getPanelFase2() {	    if (panelFase2 == null) {	        panelFase2 = new JPanel();            panelFase2.setLayout(new FlowLayout(FlowLayout.LEFT));	    }	    return panelFase2;	}	/**	 * Motodo que inicializa el componente panelTablaImplicantes	 *	 * @return javax.swing.JScrollPane	 */	public JScrollPane getPanelTablaImplicantes() {	    if (panelTablaImplicantes == null) {	        panelTablaImplicantes = new JScrollPane();            alturaTabla = (algoritmo.getListaImplicantesPrimos().size()*16)+40;            if(algoritmo.getListaTerminosImplicantes().size()>15)            {            	alturaTabla = alturaTabla+17;            }            panelTablaImplicantes.setViewportView(getTablaImplicantes());            panelTablaImplicantes.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Paso 1: Tabla de Implicantes Primos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", java.awt.Font.BOLD, 10), new java.awt.Color(51,51,51)));            panelTablaImplicantes.setPreferredSize(new Dimension(anchoTabla+147,alturaTabla));	    }	    return panelTablaImplicantes;	}	/**	 * Motodo que inicializa el componente tablaImplicantes	 *	 * @return javax.swing.JTable	 */	public JTable getTablaImplicantes() {	    if (tablaImplicantes == null) {            final String variables = QMCUtilFormateo.convierteArray2cadena(funcion.getVariables());            final String [] cabecera = {"ORD","Adyacencia",variables,"Nombre"};            final DefaultTableCellRenderer rendererCentrado = new DefaultTableCellRenderer();            rendererCentrado.setHorizontalAlignment(SwingConstants.CENTER);	        tablaImplicantes = new JTable( QMCUtilFormateo.generaMatrizImplicantes(algoritmo.getListaImplicantesPrimos()),cabecera);            tablaImplicantes.setFont(new java.awt.Font("Lucida Sans", java.awt.Font.PLAIN, 12));            tablaImplicantes.getTableHeader().setFont(new java.awt.Font("Lucida Sans", java.awt.Font.PLAIN, 12));            tablaImplicantes.getColumnModel().getColumn(0).setMaxWidth(30);            tablaImplicantes.getColumnModel().getColumn(0).setMinWidth(30);            tablaImplicantes.getColumnModel().getColumn(0).setCellRenderer(rendererCentrado);            tablaImplicantes.getColumnModel().getColumn(1).setCellRenderer(rendererCentrado);            tablaImplicantes.getColumnModel().getColumn(2).setMaxWidth(variables.length()*10);            tablaImplicantes.getColumnModel().getColumn(2).setCellRenderer(rendererCentrado);            tablaImplicantes.getColumnModel().getColumn(3).setMaxWidth(50);            tablaImplicantes.getColumnModel().getColumn(3).setMinWidth(50);            tablaImplicantes.getColumnModel().getColumn(3).setCellRenderer(rendererCentrado);            tablaImplicantes.addMouseListener(new java.awt.event.MouseAdapter() {                public void mouseClicked(final java.awt.event.MouseEvent e)                {                    if(e.getButton() == MouseEvent.BUTTON3)                    {                        setTablaCopia(tablaImplicantes);                        // Marca ayuda contextual//                        getHelpBroker().setCurrentID("ImplicantesPrimos");                        getMenuEmergenteTabla().show(tablaImplicantes, e.getX(),e.getY());                    }                }         });	    }	    return tablaImplicantes;	}	/**	 * Motodo que inicializa el componente listaCabecerasFilasImplicantes	 *	 * @return javax.swing.JList	 */	public JList getListaCabecerasFilasImplicantes() {	    if (listaCabecerasFilasImplicantes == null) {            Object [] cabecera;            if(minimizacionAuto)            {                // Paso 4                cabecera = algoritmo.getListaImplicantesPrimos().toArray();                // Paso 5                if(paso == 5)                {                    cabecera = algoritmo.getListaImplicantesReducida().toArray();                }            }            else            {                cabecera = algoritmo.getListaImplicantesInteractivos().toArray();            }	        listaCabecerasFilasImplicantes = new JList(cabecera);            listaCabecerasFilasImplicantes.setFixedCellWidth(40);            // Se puede quitar, nu se pa q sirve el selection model            listaCabecerasFilasImplicantes.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);            listaCabecerasFilasImplicantes.setFixedCellHeight(getTablaImplicantesEsenciales().getRowHeight());            listaCabecerasFilasImplicantes.setCellRenderer(new QMCRendererListaImplicantes(getTablaImplicantesEsenciales()));            // Si el modo de minimizacion es interactivo aoade listener de eventos a la tabla            if(!minimizacionAuto)            {                if(paso==4)                {                    final QMCControladorListaImplicantesEsenciales listenerImplicantesEsenciales = new QMCControladorListaImplicantesEsenciales(aplicacion, algoritmo);                    listaCabecerasFilasImplicantes.addMouseListener(listenerImplicantesEsenciales);                }                else                {                    final QMCControladorListaImplicantesReducida listenerImplicantesReducida = new QMCControladorListaImplicantesReducida(aplicacion, algoritmo);                    listaCabecerasFilasImplicantes.addMouseListener(listenerImplicantesReducida);                }             }	    }	    return listaCabecerasFilasImplicantes;	}	/**	 * Motodo que inicializa el componente tablaImplicantesEsenciales	 *	 * @return javax.swing.JTable	 */	@SuppressWarnings("unchecked")  public JTable getTablaImplicantesEsenciales() {	    if (tablaImplicantesEsenciales == null) {            Object [] cabecera;            Object [][] datos;            if(minimizacionAuto)            {                // Paso 4                cabecera = algoritmo.getListaTerminosImplicantes().toArray();                datos = algoritmo.getMatrizImplicantesEsenciales();                if(paso == 5)                {                    cabecera = algoritmo.getListaTerminosNoCubiertos().toArray();                    datos = algoritmo.getMatrizImplicantesReducida();                }            }            else            {                // Paso 4                cabecera = algoritmo.getListaTerminosInteractivos().toArray();                datos = algoritmo.getMatrizImplicantesEsenciales();                if(paso == 5)                {                    datos = algoritmo.getMatrizImplicantesReducida();                }            }            tablaImplicantesEsenciales = new JTable(datos,cabecera);	        tablaImplicantesEsenciales.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);            final Enumeration enumera = tablaImplicantesEsenciales.getColumnModel().getColumns();            final DefaultTableCellRenderer rendererCentrado = new DefaultTableCellRenderer();            rendererCentrado.setHorizontalAlignment(SwingConstants.CENTER);            int i=0;            while (enumera.hasMoreElements())            {              final QMCBinarioBean termino = (QMCBinarioBean)cabecera[i];              final TableColumn columna = (TableColumn)enumera.nextElement();              columna.setHeaderRenderer(new QMCRendererCabeceraColumnaImplicantes());              columna.setCellRenderer(rendererCentrado);              columna.setHeaderValue(termino);              columna.setMaxWidth(35);              i++;            }            tablaImplicantesEsenciales.addMouseListener(new java.awt.event.MouseAdapter() {                public void mouseClicked(final java.awt.event.MouseEvent e)                {                    if(e.getButton() == MouseEvent.BUTTON3)                    {                    	tablaImplicantesEsenciales = (JTable)e.getComponent();                        setTablaCopia(tablaImplicantesEsenciales);                        // Marca ayuda contextual/*                        if(paso==4)                        {                        	 getHelpBroker().setCurrentID("ImplicantesEsenciales");                        }                        else                        {                        	getHelpBroker().setCurrentID("ImplicantesReducida");                        }*/                        getMenuEmergenteTabla().show(tablaImplicantesEsenciales, e.getX(),e.getY());                    }                }         });	    }	    return tablaImplicantesEsenciales;	}    /**     * Devuelve la tabla Anterior     *     * @return javax.swing.JTable     */    public JTable getTablaAnterior()    {        return tablaAnterior;    }    /**     * Devuelve la tabla actual     *     * @return javax.swing.JTable     */    public JTable getTablaActual()    {        return tablaActual;    }    /**     * Devuelve la tabla a copiar     *     * @return javax.swing.JTable     */    public JTable getTablaCopia()    {        return tablaCopia;    }    /**     * Establece la tabla a copiar     *     */    public void setTablaCopia(final JTable tablaCopia)    {        this.tablaCopia = tablaCopia;    }    /**     *     *//*    public HelpBroker getHelpBroker()    {    	return helpBroker;    }*/    /**     * Devuelve la columna de checks guardada     * @return     */    public TableColumn getColumnaChecks ()    {        return columnaChecks;    }	/**	 * Motodo que inicializa el componente panelTablaImplicantesEsenciales	 *	 * @return javax.swing.JScrollPane	 */	public JScrollPane getPanelTablaImplicantesEsenciales() {	    if (panelTablaImplicantesEsenciales == null) {            String texto;            if(paso==4)            {                texto = "Paso 2: Tabla de Implicantes Esenciales";                anchoTabla = (algoritmo.getListaTerminosImplicantes().size()*35)+50;            }            else            {                texto = "Paso 3: Tabla de Implicantes Reducida";                //anchoTabla = (algoritmo.getListaTerminosNoCubiertos().size()*30)+90;                anchoTabla = (algoritmo.getListaTerminosNoCubiertos().size()*35)+50;            }            // Establece el ancho maximo            if(anchoTabla>580)            {            	anchoTabla = 580;            }	        panelTablaImplicantesEsenciales = new JScrollPane();            panelTablaImplicantesEsenciales.setViewportView(getTablaImplicantesEsenciales());            panelTablaImplicantesEsenciales.setRowHeaderView(getListaCabecerasFilasImplicantes());            panelTablaImplicantesEsenciales.setBorder(javax.swing.BorderFactory.createTitledBorder(null, texto, javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", java.awt.Font.BOLD, 10), new java.awt.Color(51,51,51)));            panelTablaImplicantesEsenciales.setPreferredSize(new Dimension(anchoTabla,alturaTabla));	    }	    return panelTablaImplicantesEsenciales;	}	/**	 * Motodo que inicializa el componente panelSolucionImplicantes	 *	 * @return javax.swing.JPanel	 */	public JPanel getPanelSolucionImplicantes() {	    if (panelSolucionImplicantes == null) {	        panelSolucionImplicantes = new JPanel();            panelSolucionImplicantes.setPreferredSize(new Dimension(10,48));            panelSolucionImplicantes.setLayout(new FlowLayout(FlowLayout.CENTER,5,0));            panelSolucionImplicantes.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Expresion implicantes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", java.awt.Font.BOLD, 10), new java.awt.Color(51,51,51)));            etiquetaImplicantesEsenciales = new JLabel();            etiquetaImplicantesEsenciales.setToolTipText("Implicantes esenciales");            panelSolucionImplicantes.add(etiquetaImplicantesEsenciales, null);            panelSolucionImplicantes.setVisible(true);            }	    return panelSolucionImplicantes;	}	/**	 * Motodo que inicializa el componente panelSolucionTerminos	 *	 * @return javax.swing.JPanel	 */	public JPanel getPanelSolucionAlgebraica() {	    if (panelSolucionAlgebraica == null) {	        panelSolucionAlgebraica = new JPanel();            panelSolucionAlgebraica.setPreferredSize(new Dimension(10,48));	        panelSolucionAlgebraica.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Expresion algebraica", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", java.awt.Font.BOLD, 10), new java.awt.Color(51,51,51)));            panelSolucionAlgebraica.setLayout(new BorderLayout());            panelSolucionAlgebraica.add(getCajaFuncionMinimizada(), java.awt.BorderLayout.CENTER);            panelSolucionAlgebraica.setVisible(true);	    }	    return panelSolucionAlgebraica;	}    /**     * Motodo que inicializa el componente etiquetaFuncionMinimizada     */    public JTextField getCajaFuncionMinimizada(){        if (cajaFuncionMinimizada == null){            cajaFuncionMinimizada = new JTextField();            cajaFuncionMinimizada.setFont(new java.awt.Font("Georgia", java.awt.Font.BOLD | java.awt.Font.ITALIC, 13));            cajaFuncionMinimizada.setText(QMCUtilFormateo.generaExpresionBooleana(funcion.getVariables(),algoritmo.getListaImplicantesSolucion(),funcion.getForma()));            cajaFuncionMinimizada.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);            cajaFuncionMinimizada.addMouseListener(new java.awt.event.MouseAdapter() {            	public void mouseClicked(final java.awt.event.MouseEvent e)            	{            		 if(e.getButton() == MouseEvent.BUTTON3)                     {            			 getMenuEmergenteExpresion().show(cajaFuncionMinimizada, e.getX(),e.getY());            			 cajaFuncionMinimizada.selectAll();            			 cajaFuncionMinimizada.copy();                     }            	}            });        }        return cajaFuncionMinimizada;    }	/**	 * Motodo que inicializa el componente comboImplicantesNoEsenciales	 *	 * @return javax.swing.JComboBox	 */	public JComboBox getComboImplicantesNoEsenciales() {	    if (comboImplicantesNoEsenciales == null) {	        comboImplicantesNoEsenciales = new JComboBox(QMCUtilFormateo.generaArrayImplicantesNoEsenciales(algoritmo.getListaSolucionesMinimas(), funcion.getForma()));	        comboImplicantesNoEsenciales.setToolTipText("Implicantes no esenciales");	        comboImplicantesNoEsenciales	                .addActionListener(new java.awt.event.ActionListener() {	                    public void actionPerformed(final java.awt.event.ActionEvent e) {                            algoritmo.setListaImplicantesSolucion(String.valueOf(comboImplicantesNoEsenciales.getSelectedItem()));                            getCajaFuncionMinimizada().setText(QMCUtilFormateo.generaExpresionBooleana(funcion.getVariables(),algoritmo.getListaImplicantesSolucion(),funcion.getForma()));                            getPanelTablaImplicantesEsenciales().repaint();                        }	                });	    }	    return comboImplicantesNoEsenciales;	}	/**	 * Motodo que inicializa el componente listaCabecerasTablaVerdad	 *	 * @return javax.swing.JList	 */	public JList getListaCabecerasTablaVerdad() {	    if (listaCabecerasTablaVerdad == null) {            Object [] cabecera;            if(!minimizacionAuto || inicio)            {                cabecera = funcion.getListaBinariosInteractivos().toArray();            }            else            {                cabecera = funcion.getListaBinarios().toArray();            }            listaCabecerasTablaVerdad = new JList(cabecera);            listaCabecerasTablaVerdad.setFixedCellWidth(40);            listaCabecerasTablaVerdad.setFixedCellHeight(getTablaVerdad().getRowHeight());            listaCabecerasTablaVerdad.setCellRenderer(new QMCRendererListaTablaVerdad(getTablaVerdad()));            if(!minimizacionAuto && !inicio)            {                final QMCControladorListaTablaVerdad listenerCabeceras = new QMCControladorListaTablaVerdad(aplicacion,funcion);                listaCabecerasTablaVerdad.addMouseListener(listenerCabeceras);            }	    }	    return listaCabecerasTablaVerdad;	}	/**	 * Motodo que inicializa el componente botonMinAuto	 *	 * @return javax.swing.JToggleButton	 */	public JToggleButton getBotonMinAuto() {	    if (botonMinAuto == null) {	        botonMinAuto = new JToggleButton();            botonMinAuto.setBounds(new java.awt.Rectangle(174,1,32,28));	        botonMinAuto.setPreferredSize(new java.awt.Dimension(28,28));	        botonMinAuto.setActionCommand("M");	        botonMinAuto.setIcon(new ImageIcon(getClass().getResource("/Iconos/lightning16.gif")));	        botonMinAuto.setToolTipText("Modo automatico");	        botonMinAuto.addActionListener(new java.awt.event.ActionListener() {	            public void actionPerformed(final java.awt.event.ActionEvent e) {                    getBotonMinInter().setSelected(false);                    getItemMinAuto().setSelected(true);                    minimizacionAuto = true;	                }	        });	    }	    return botonMinAuto;	}	/**	 * Motodo que inicializa el componente botonMinInter	 *	 * @return javax.swing.JToggleButton	 */	public JToggleButton getBotonMinInter() {	    if (botonMinInter == null) {	        botonMinInter = new JToggleButton();            botonMinInter.setBounds(new java.awt.Rectangle(205,1,32,28));            botonMinInter.setActionCommand("");            botonMinInter.setToolTipText("Modo interactivo");            botonMinInter.setSelected(true);            botonMinInter.setIcon(new ImageIcon(getClass().getResource("/Iconos/Preferences24.gif")));            botonMinInter.addActionListener(new java.awt.event.ActionListener() {                public void actionPerformed(final java.awt.event.ActionEvent e) {                    getBotonMinAuto().setSelected(false);                    getItemMinInteract().setSelected(true);                    minimizacionAuto = false;                }            });	    }	    return botonMinInter;	}	/**	 * Motodo que inicializa el componente itemCopiarTabla	 *	 * @return javax.swing.JMenuItem	 */	public JMenuItem getItemCopiarTabla()  {	    if (itemCopiarTabla == null) {	        itemCopiarTabla = new JMenuItem(new DefaultEditorKit.CopyAction());            itemCopiarTabla.setText("Copiar tabla");            itemCopiarTabla.setMnemonic(KeyEvent.VK_C);            itemCopiarTabla.addActionListener(new java.awt.event.ActionListener() {                public void actionPerformed(final java.awt.event.ActionEvent e)                {                	accionCopiarTabla();                }            });	    }	    return itemCopiarTabla;	}	/**	 * Motodo que inicializa el componente jMenuItem	 *	 * @return javax.swing.JMenuItem	 */	public JMenuItem getItemAyudaOnline() {	    if (itemAyudaOnline == null) {	        itemAyudaOnline = new JMenuItem();	        itemAyudaOnline.setText("Ayuda...");//	        itemAyudaOnline.addActionListener(new CSH.DisplayHelpFromSource(helpBroker));	    }	    return itemAyudaOnline;	}	/**	 * Motodo que inicializa el componente jButton	 *	 * @return javax.swing.JButton	 */	public JButton getBotonAyuda() {	    if (botonAyuda == null) {	        botonAyuda = new JButton();            botonAyuda.setIcon(new ImageIcon(getClass().getResource("/Iconos/Information16.gif")));            botonAyuda.setToolTipText("Ayuda online");            botonAyuda.setFocusPainted(false);            botonAyuda.setMnemonic(java.awt.event.KeyEvent.VK_H);            botonAyuda.setBounds(new java.awt.Rectangle(380,1,28,28));//            botonAyuda.addActionListener(new CSH.DisplayHelpFromSource(helpBroker));	    }	    return botonAyuda;	}	/**	 * This method initializes itemAyudaContextual	 *	 * @return javax.swing.JMenuItem	 */	private JMenuItem getItemAyudaContextual() {		if (itemAyudaContextual == null) {			itemAyudaContextual = new JMenuItem();			itemAyudaContextual.setText("Ayuda contextual...");//			itemAyudaContextual.addActionListener(new CSH.DisplayHelpFromSource(helpBroker));		}		return itemAyudaContextual;	}	/**	 * This method initializes menuEmergenteExpresion	 *	 * @return javax.swing.JPopupMenu	 */	private JPopupMenu getMenuEmergenteExpresion() {		if (menuEmergenteExpresion == null) {			menuEmergenteExpresion = new JPopupMenu();			menuEmergenteExpresion.add(getItemCopiarExpresion());		}		return menuEmergenteExpresion;	}	/**	 * This method initializes itemCopiarExpresion	 *	 * @return javax.swing.JMenuItem	 */	private JMenuItem getItemCopiarExpresion() {		if (itemCopiarExpresion == null) {			itemCopiarExpresion = new JMenuItem();			itemCopiarExpresion.setText("Copiar expresion");		}		return itemCopiarExpresion;	}	/**	 * Inicia la aplicacion	 */	public static void main(final String[] args) {        aplicacion = new QMCInicio();        aplicacion.setVisible(true);	}    ////////////////////////////////////    // METODOS ACCIONADOS POR EVENTOS //	////////////////////////////////////    /**     * Motodo que crea un objeto de la clase QMCDialogoNuevaTabla para la creacion de una nueva tabla de verdad     */    private void accionNuevaTabla ()    {        final QMCDialogoNuevaTabla dialogoNuevaTabla = new QMCDialogoNuevaTabla();        dialogoNuevaTabla.setVisible(true);         if (dialogoNuevaTabla.getFuncion()!=null)         {            // Recojo un objeto funcion con los datos introducidos            funcion = dialogoNuevaTabla.getFuncion();            inicioFuncion();            // Visualizo el panel de botones de la tabla            getPanelBotonesTabla().setVisible(true);        }    }    /**     * Motodo que crea un objeto de la clase QMCDialogoNuevaFuncion para la creacion de una nueva tabla de verdad     */    private void accionNuevaFuncion ()    {        final QMCDialogoNuevaExpresion dialogoNuevaFuncion = new QMCDialogoNuevaExpresion();        dialogoNuevaFuncion.setVisible(true);        if (dialogoNuevaFuncion.getFuncion()!=null)        {            // Recojo un objeto funcion con los datos introducidos            funcion = dialogoNuevaFuncion.getFuncion();            inicioFuncion();        }    }    /**     * Motodo que crea un objeto de la clase JFileChooser y muestra un dialogo de importar archivo     */    private void accionImportar ()    {        final JFileChooser dialogoImportar = new JFileChooser();        final QMCFiltradorExtensionesArchivos filtro = new QMCFiltradorExtensionesArchivos();        filtro.addExtension("qmc");        filtro.setDescription("Archivos de QMCMinimizer");        dialogoImportar.setFileFilter(filtro);        String fichero;        funcion = new QMCFuncion();        try        {            //Abre una ventana de seleccionar fichero y guarda su nombre            final int opcion = dialogoImportar.showDialog(null,"Importar");            if (opcion== JFileChooser.APPROVE_OPTION)            {                fichero = dialogoImportar.getSelectedFile().getAbsolutePath();                final BufferedReader entrada = new BufferedReader(new FileReader(fichero));                final String linea = entrada.readLine();                final StringTokenizer lineaSt = new StringTokenizer(linea);                final int numDatos = lineaSt.countTokens();                funcion.setVariables(lineaSt.nextToken());                funcion.setTerminos(lineaSt.nextToken());                funcion.setForma(lineaSt.nextToken().charAt(0));                // Hay indiferencias                if(numDatos == 4)                {                    funcion.setIndiferencias(lineaSt.nextToken());                }                inicioFuncion();            }        }        catch(final IOException e)        {            System.out.print(e.getMessage());        }    }    /**     * Motodo que crea un objeto de la clase JFileChooser y muestra un dialogo de exportar archivo     */    private void accionExportar ()    {        final JFileChooser dialogoExportar = new JFileChooser();        final QMCFiltradorExtensionesArchivos filtro = new QMCFiltradorExtensionesArchivos();        filtro.addExtension("qmc");        filtro.setDescription("Archivos de QMCMinimizer");        dialogoExportar.setFileFilter(filtro);        PrintWriter escritor;        String fichero;        final int opcion = dialogoExportar.showDialog(null, "Exportar");        if (opcion == JFileChooser.APPROVE_OPTION)        {            try            {                fichero = dialogoExportar.getSelectedFile().getAbsolutePath();                escritor = new PrintWriter((new FileWriter(fichero+".qmc", false)));                escritor.print(QMCUtilFormateo.array2String(funcion.getVariables(),','));                escritor.print(" ");                escritor.print(QMCUtilFormateo.array2String(funcion.getTerminos(),','));                escritor.print(" ");                escritor.print(funcion.getForma());                if(funcion.getIndiferencias()!=null)                {                    escritor.print(" ");                    escritor.print(QMCUtilFormateo.array2String(funcion.getIndiferencias(),','));                }                escritor.close();            }            catch(final IOException e)            {                System.out.println(e.getMessage());            }        }    }    /**     * Motodo que crea un objeto de la clase QMCDialogoAcerca y muestra una ventana de informacion     */    private void accionAcerca ()    {        final QMCDialogoAcerca dialogoAcerca = new QMCDialogoAcerca ();        dialogoAcerca.setVisible(true);    }    /**     * Metodo que inicializa la funcion establecida     */    private void inicioFuncion()    {        inicio = true;        funcion.setListaBinariosInteractivos(funcion.getNumVariables());        // Reseteo las posibles instancias de tabla        tablaVerdad = null;        modeloTablaVerdad = null;        listaCabecerasTablaVerdad = null;         // Visualiza el panel de la tabla de verdad        panelIzquierdo.setVisible(true);        // Aoado la tabla de verdad al panel con scroll        getPanelTablaVerdad().setViewportView(getTablaVerdad());        getPanelTablaVerdad().setRowHeaderView(getListaCabecerasTablaVerdad());        // Refresca el contenido del panel tabla        getPanelTablaVerdad().validate();        // Borra la funcion anterior        getPanelFuncion().setVisible(false);        // Habilito el inicio de la minimizacion        getBotonIniciarMin().setEnabled(true);        getBotonExportar().setEnabled(true);        getItemIniciar().setEnabled(true);        getItemExportar().setEnabled(true);    }    /**     * Motodo que inicia la accion de minimizacion     */    private void accionIniciar()    {        boolean incompleta = false;        inicio = false;        for(int i=0; (i<getTablaVerdad().getRowCount()) && (!incompleta); i++)        {            Object datoCelda;            datoCelda = getTablaVerdad().getValueAt(i,(getTablaVerdad().getColumnCount()-1));            if(datoCelda == null)            {                incompleta  = true;            }        }        if(!incompleta)        {            // Desahabilita la accion de iniciar            getBotonIniciarMin().setEnabled(false);            getItemIniciar().setEnabled(false);            getItemImportar().setEnabled(false);            getBotonNuevaTabla().setEnabled(false);            getBotonNuevaExpresion().setEnabled(false);            getBotonImportar().setEnabled(false);            getMenuNuevaFuncion().setEnabled(false);            getBotonDetenerMin().setEnabled(true);            getItemMinAuto().setEnabled(false);            getItemMinInteract().setEnabled(false);            // Modo interactivo            if(minimizacionAuto == false)            {                getBotonMinAuto().setEnabled(false);                getBotonPasoSiguiente().setEnabled(true);                //funcion.setListaBinariosInteractivos();            }            else            {                getBotonMinInter().setEnabled(false);            }            // Deshabilita la tabla de verdad y sus controles (evita el cambio de datos de la tabla)            getTablaVerdad().setEnabled(false);            getPanelBotonesTabla().setVisible(false);            // Establece los datos para el proceso de minimizacion            funcion.setListaBinarios(getModeloTablaVerdad().getDataVector());            listaCabecerasTablaVerdad = null;            getPanelTablaVerdad().setRowHeaderView(getListaCabecerasTablaVerdad());            getPanelMinimizacionGeneral().setVisible(true);            getPanelFuncion().setVisible(true);            final String temp = QMCUtilFormateo.generaExpresionBooleana(funcion.getVariables(),funcion.getListaTerminos(),funcion.getForma());            getCajaFuncion().setText(temp);            if(funcion.isTieneTerminos())            {                getPanelMinimizacionGeneral().setVisible(true);                algoritmo = new QMCAlgoritmo();                algoritmo.setArrayListasAdyacencias(funcion.getListaTerminos());                paso = 0;                contador = 0;                cambioPaso();            }            else            {                JOptionPane.showMessageDialog(null,"La funcion de conmutacion establecida es nula, introduzca algon tormino","Error",JOptionPane.ERROR_MESSAGE);                getTablaVerdad().setEnabled(true);                getPanelBotonesTabla().setVisible(true);                getBotonIniciarMin().setEnabled(true);                getBotonDetenerMin().setEnabled(false);                getBotonPasoSiguiente().setEnabled(false);            }        }        else        {            JOptionPane.showMessageDialog(null,"La tabla de verdad no esto completa","Error",JOptionPane.ERROR_MESSAGE);        }    }    /**     *  Motodo que detiene la accion de minimizacion y resetea los valores del algoritmo     */    private void accionDetener ()    {        inicio = true;        listaCabecerasTablaVerdad = null;        getPanelTablaVerdad().setRowHeaderView(getListaCabecerasTablaVerdad());        // Establece el estado de los componentes        getBotonNuevaTabla().setEnabled(true);        getBotonNuevaExpresion().setEnabled(true);        getBotonImportar().setEnabled(true);        getItemImportar().setEnabled(true);        getMenuNuevaFuncion().setEnabled(true);        getTablaVerdad().setEnabled(true);        getBotonIniciarMin().setEnabled(true);        getBotonDetenerMin().setEnabled(false);        getBotonPasoSiguiente().setEnabled(false);        getBotonMinAuto().setEnabled(true);        getBotonMinInter().setEnabled(true);        getPanelFasesMinimizacion().setEnabledAt(1,false);        getPanelFasesMinimizacion().setSelectedIndex(0);        getItemMinAuto().setEnabled(true);        getItemMinInteract().setEnabled(true);        // Borra las tablas anteriores        getPanelFase1().removeAll();        getPanelFase2().removeAll();        if(panelSolucion.isVisible())        {            getPanelSolucionImplicantes().removeAll();            getPanelSolucionAlgebraica().removeAll();            getPanelSolucionImplicantes().setVisible(false);            getPanelSolucionAlgebraica().setVisible(false);            getPanelSolucion().setVisible(false);        }        // Esconde los paneles globales        getPanelMinimizacionGeneral().setVisible(false);        // Resetea las instancias de las tablas y paneles        //tablaVerdad = null;        tablaTerminos = null;        tablaTerminosAgrupados = null;        modeloTablaTerminos = null;        modeloTablaTerminosAgrupados = null;        tablaAdyacencias = null;        tablaImplicantes = null;        panelTablaTerminos = null;        panelTablaTerminosAgrupados = null;        tablaImplicantesEsenciales = null;        panelTablaImplicantes = null;        panelTablaImplicantesEsenciales = null;        comboImplicantesNoEsenciales = null;        cajaFuncionMinimizada = null;        listaCabecerasFilasImplicantes = null;        panelSolucionImplicantes = null;        panelSolucionAlgebraica = null;        // Resetea los objetos de datos        // funcion = null;        algoritmo = null;        listaCabecerasTablaVerdad = new JList(funcion.getListaBinariosInteractivos().toArray());        getListaCabecerasTablaVerdad().repaint();    }    /**     * Motodo que inicializa el sistema de ayuda basado en JavaHelp 2.0     *     */    private void iniciaSistemaAyuda ()    {    	// Inicializa el sistema de ayuda/*		try		{			URL hsURL = this.getClass().getResource("/Ayuda/QMCHelp.hs");			helpSet = new HelpSet(null, hsURL); 	    }		catch (Exception ex)		{		      System.out.println( "HelpSet " + ex.getMessage());		      System.out.println("HelpSet "+ helpSet +" no encontrado");		      return;		}		HelpSet.Presentation hsp = helpSet.getPresentation("Introduccion");		helpBroker = helpSet.createHelpBroker();*/		//helpBroker.setHelpSetPresentation(hsp);    }    /**     * Motodo que copia la tabla seleccionada al portapapeles     *     */    private void accionCopiarTabla()    {    	getTablaCopia().selectAll();        String cabecera = "";        for(int i=0;i<getTablaCopia().getColumnCount();i++)        {        	if(i<getTablaCopia().getColumnCount()-1)        	{        		cabecera += getTablaCopia().getColumnName(i)+"\t";        	}        	else            {        		cabecera += getTablaCopia().getColumnName(i);                cabecera += "\n";            }        }        final TransferHandler th = getTablaCopia().getTransferHandler();        Transferable objetoTrans;        String tablaSerializada;            if (th != null)            {                try                {                    final Clipboard cb = Toolkit.getDefaultToolkit().getSystemClipboard();                    th.exportToClipboard(getTablaCopia(), cb, TransferHandler.COPY);                    objetoTrans = cb.getContents(this);                    tablaSerializada = (String)objetoTrans.getTransferData(DataFlavor.stringFlavor);                    tablaSerializada = cabecera+tablaSerializada;                    objetoTrans = new StringSelection(tablaSerializada);                    cb.setContents(objetoTrans,aplicacion);                }                catch(final Exception ex)                {                    System.out.print(ex.getMessage());                }            getTablaCopia().clearSelection();        }    }    /**     *  Motodo que controla el cambio de un paso a otro de la minimizacion,     *  en el modo interactivo este motodo es llamado cada vez que se cambia de paso     *  en el modo automatico este motodo es llamado una sola vez al inicio del proceso     *  y se realiza por completo sin pausas.     */    private void cambioPaso()    {        switch(paso)        {        // FASE 1: Adyacencias        case 0:            // Paso 1: Tabla de terminos            getPanelFase1().add(getPanelTablaTerminos());            if(!minimizacionAuto)            {                tablaActual = getTablaTerminos();                // Guardo y elimino columna de checks de la tabla actual                columnaChecks = getTablaActual().getColumnModel().getColumn(3);                getTablaActual().removeColumn(columnaChecks);                break;            }            else            {                paso++;            }        case 1:            // Paso 2: Tabla de minterms ordenados por indice            algoritmo.setListaAdyacenciasAnterior(algoritmo.getListaAdyacenciasActual());            algoritmo.setListaAdyacenciasActual(contador);            getPanelFase1().add(getPanelTablaTerminosAgrupados());            if(!algoritmo.isMinimizable())            {                JOptionPane.showMessageDialog(null,"No existen adyacencias para esta funcion de conmutacion, no se puede minimizar","Aviso",JOptionPane.INFORMATION_MESSAGE);                getBotonPasoSiguiente().setEnabled(false);            }            if(!minimizacionAuto)            {                tablaAnterior = getTablaActual();                // Establezco la columna de checks de la tabla anterior                getTablaAnterior().addColumn(getColumnaChecks());                tablaActual = getTablaTerminosAgrupados();                // Guardo y elimino columna de checks de la tabla actual                columnaChecks = getTablaActual().getColumnModel().getColumn(2);                getTablaActual().removeColumn(columnaChecks);                break;            }            else            {                paso++;                contador++;            }        case 2:            // Paso n: Tabla adyacencias Orden n (paso iterativo)            if(minimizacionAuto)            {                // Presenta todas las tablas adyacencia de forma automatica                while(contador<algoritmo.getArrayListasAdyacencias().size())                {                    tablaAdyacencias = null;                    panelTablaAdyacencias = null;                    modeloTablaAdyacencias = null;                    algoritmo.setListaAdyacenciasActual(contador);                    getPanelFase1().add(getPanelTablaAdyacencias());                    contador++;                }                paso++;            }            // Presenta cada tabla adyacencia de forma interactiva (paso a paso)            else            {                tablaAdyacencias = null;                panelTablaAdyacencias = null;                modeloTablaAdyacencias = null;                algoritmo.setListaAdyacenciasAnterior(algoritmo.getListaAdyacenciasActual());                algoritmo.setListaAdyacenciasActual(contador);                getPanelFase1().add(getPanelTablaAdyacencias());                tablaAnterior = getTablaActual();                // Establezco la columna de checks de la tabla anterior                getTablaAnterior().addColumn(getColumnaChecks());                tablaActual = getTablaAdyacencias();                // Guardo y elimino columna de checks de la tabla actual                columnaChecks = getTablaActual().getColumnModel().getColumn(3);                getTablaActual().removeColumn(columnaChecks);                break;            }        // FASE 2: Implicantes        case 3:            // Paso 1: Tabla de Implicantes primos            algoritmo.setListaTerminosImplicantes(funcion.getListaTerminos());            algoritmo.setListaImplicantesPrimos(funcion.getTerminos());            if(!minimizacionAuto)            {                QMCDialogoImplicante dialogoImplicante;                QMCImplicanteBean implicante;                char nombreImplicante;                String cadenaNombres = "";                for(int i=0;i<algoritmo.getListaImplicantesPrimos().size();i++)                {                    implicante = (QMCImplicanteBean)algoritmo.getListaImplicantesPrimos().get(i);                    dialogoImplicante = new QMCDialogoImplicante(implicante);                    dialogoImplicante.setVisible(true);                    nombreImplicante = dialogoImplicante.getNombreImplicante();                    while(cadenaNombres.indexOf(nombreImplicante)!=-1)                    {                        JOptionPane.showMessageDialog(null,"Existe un implicante con el mismo nombre, introduzca otro diferente","Error",JOptionPane.ERROR_MESSAGE);                        dialogoImplicante = new QMCDialogoImplicante(implicante);                        dialogoImplicante.setVisible(true);                        nombreImplicante = dialogoImplicante.getNombreImplicante();                    }                    cadenaNombres += nombreImplicante;                    implicante.setNombre(nombreImplicante);                }                getPanelFase2().add(getPanelTablaImplicantes());                algoritmo.setListaImplicantesInteractivos(algoritmo.getListaImplicantesPrimos());                algoritmo.setListaTerminosInteractivos(algoritmo.getListaTerminosImplicantes());                getPanelFasesMinimizacion().setSelectedIndex(1);                break;            }            else            {                getPanelFase2().add(getPanelTablaImplicantes());                getPanelFasesMinimizacion().setEnabledAt(1,true);                getPanelFasesMinimizacion().setSelectedIndex(1);                paso++;            }        case 4:            // Paso 2: Tabla de Implicantes primos esenciales            getPanelFase2().add(getPanelTablaImplicantesEsenciales());            if(!minimizacionAuto)            {                break;            }            else            {                paso++;            }        case 5:            // Paso 3: Tabla de Implicantes primos reducida (opcional)            if(!algoritmo.isTerminosTodosCubiertos())            {                panelTablaImplicantesEsenciales = null;                listaCabecerasFilasImplicantes = null;                tablaImplicantesEsenciales = null;                algoritmo.setListaTerminosNoCubiertos();                algoritmo.setListaImplicantesReducida();                if(!minimizacionAuto)                {                    algoritmo.setListaImplicantesInteractivos(algoritmo.getListaImplicantesReducida());                    algoritmo.setListaTerminosInteractivos(algoritmo.getListaTerminosNoCubiertos());                }                // Toma los nuevos valores internamente                getPanelFase2().add(getPanelTablaImplicantesEsenciales());                if(!minimizacionAuto)                {                     break;                }                else                {                    paso++;                }            }        case 6:            // Solucion            String cadenaImplicantesEsenciales;            cadenaImplicantesEsenciales = QMCUtilFormateo.generaCadenaImplicantesEsenciales(algoritmo.getListaImplicantesPrimos(), funcion.getForma());            if(!algoritmo.isTerminosTodosCubiertos())            {                algoritmo.setListaImplicantesSolucion(String.valueOf(getComboImplicantesNoEsenciales().getSelectedItem()));                getPanelSolucionImplicantes().add(getComboImplicantesNoEsenciales());            }            else            {                cadenaImplicantesEsenciales = cadenaImplicantesEsenciales.substring(0,cadenaImplicantesEsenciales.length()-2);            }            getBotonPasoSiguiente().setEnabled(false);            getPanelSolucion().setVisible(true);            getPanelSolucion().add(getPanelSolucionImplicantes(), java.awt.BorderLayout.NORTH);            getPanelSolucion().add(getPanelSolucionAlgebraica(), java.awt.BorderLayout.SOUTH);            etiquetaImplicantesEsenciales.setText(cadenaImplicantesEsenciales);        }        getPanelMinimizacionGeneral().validate();    }    public void lostOwnership(final Clipboard clipboard, final Transferable contents)    {    }}  //  @jve:decl-index=0:visual-constraint="10,10"
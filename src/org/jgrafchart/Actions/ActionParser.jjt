options {
LOOKAHEAD=1;
STATIC = true;
MULTI = true;
NODE_PREFIX = "ACT";
}

PARSER_BEGIN(ActionParser)

package org.jgrafchart.Actions;

import java.io.*;

public class ActionParser {

    public static void main(String args[]) {
    System.out.println("Reading from string...");
    StringReader sr = new StringReader(args[0]);
    ActionParser  parser = new ActionParser(sr);
   try {
      SimpleNode n = parser.ProcCall();
      n.dump("");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(ActionParser)

SKIP :
{
	" "
|	"\n"
|	"\t"
}

TOKEN [IGNORE_CASE]: /* ACTION_TYPES */
{
	< N: "N" >
|	< S: "S">
|       < A: "A">
|       < X:  "X">
|       < V: "V">
|       < R: "R">
}


TOKEN : /* Variable names */
{
	< VAR: ( <LETTER> )+ ( <DIGIT> | <LETTER> )* >
  |	< #LETTER: ["a"-"z", "A"-"Z", ".", "_"] >
  |	< #DIGIT: ["0"-"9"] >
}



TOKEN :
{
        < INTEGER: <DIGIT> (<DIGIT>)* >
}

TOKEN : 
{
  < STRING:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}
ACTProcParam ProcParam() :
{}
{
(
  ";"
|
  procparamstatement()
)*
<EOF> {return jjtThis;}
}

void procparamstatement() #void :
{}
{
  ParameterAssignment() ";"
}

void ParameterAssignment() #void :
{}
{ <V> Variable() "=" expression() #CallByValueNode(2)
| <R> Variable() "=" Variable() #CallByReferenceNode(2)
}


ACTProcCall ProcCall() :
{}
{ 
  proccallstatement() <EOF> 
  {return jjtThis;}
}

void proccallstatement() #void :
{}
{ 
  String()
|
  Variable()
}



ACTStatement Statement()  :
{}
{
(
  ";"
|
  StatementExpression()
)*
<EOF> {return jjtThis;}
}

void StatementExpression() #void :
{}
{
  Action() ";"
}

void Action() #void :
{}
{ <N> Variable() #NormalNode(1)
| <A> Variable() "=" expression() #PeriodicNode(2)
| <S> Variable() "=" expression() #StoredNode(2)
| <X>  Variable() "=" expression() #ExitNode(2)
}

void expression() #void :
{ }
{
    logicalor() ( "&"  logicalor() #AndNode(2) )*
}

void logicalor() #void :
{}
{
     equalityexpression() ( "|" equalityexpression() #OrNode(2) )*
}

void equalityexpression() #void :
{}
{
relationalexpression()
(
  "==" relationalexpression() #EQNode(2)
|
 "!=" relationalexpression() #NEQNode(2)
)*
}

void relationalexpression() #void :
{}
{
additiveexpression()
(
"<" additiveexpression() #LTNode(2)
|
  ">" additiveexpression() #GTNode(2)
| 
  "<="additiveexpression() #LENode(2)
|
  ">=" additiveexpression() #GENode(2)
)*
}

void additiveexpression() #void :
{}
{
multiplicativeexpression() 
(
"+" multiplicativeexpression() #PlusNode(2)
|
"-" multiplicativeexpression()  #MinusNode(2)
)*
}

void multiplicativeexpression() #void :
{}
{
unaryexpression()
(
"*" unaryexpression()  #MultNode(2)
|
  "/" unaryexpression() #DivNode(2)
)*
}

void unaryexpression() #void :
{}
{
 "!" unaryexpression()  #NotNode(1)
|
primaryexpression()
}

void primaryexpression() #void :
{
  String name;
}
{
String()
|
Integer()
|
Variable()
|
 "(" expression() ")"
}



void Integer() :
{
  Token t;
}
{
  t=<INTEGER>
  {
   jjtThis.setName(t.image);
  }
}

void Variable() :
{
  Token t;
}
{
  t=<VAR>
  {
   jjtThis.setName(t.image);
  }
}




void String() : 
{
  Token t;
}
{
  t=<STRING>
  {
  jjtThis.setName(t.image);
  }
}

/* Generated By:JJTree&JavaCC: Do not edit this line. ActionParser.java */
package org.jgrafchart.Actions;



import java.io.*;


public class ActionParser		/* @bgen(jjtree) */
	implements ActionParserTreeConstants, ActionParserConstants
{								/* @bgen(jjtree) */

	protected static JJTActionParserState jjtree = new JJTActionParserState();

	public static void main(String args[])
	{

		System.out.println("Reading from string...");

		StringReader sr = new StringReader(args[0]);
		ActionParser parser = new ActionParser(sr);

		try
		{
			SimpleNode n = parser.ProcCall();

			n.dump("");
			System.out.println("Thank you.");
		}
		catch (Exception e)
		{
			System.out.println("Oops.");
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
	}

	static final public ACTProcParam ProcParam()
		throws ParseException
	{

		/* @bgen(jjtree) ProcParam */
		ACTProcParam jjtn000 = new ACTProcParam(JJTPROCPARAM);
		boolean jjtc000 = true;

		jjtree.openNodeScope(jjtn000);

		try
		{
			label_1:
			while (true)
			{
				switch ((jj_ntk == -1)
						? jj_ntk()
						: jj_ntk)
				{

				case V :
				case R :
				case 15 :
					;
					break;

				default :
					jj_la1[0] = jj_gen;
					break label_1;
				}

				switch ((jj_ntk == -1)
						? jj_ntk()
						: jj_ntk)
				{

				case 15 :
					jj_consume_token(15);
					break;

				case V :
				case R :
					procparamstatement();
					break;

				default :
					jj_la1[1] = jj_gen;

					jj_consume_token(-1);

					throw new ParseException();
				}
			}

			jj_consume_token(0);
			jjtree.closeNodeScope(jjtn000, true);

			jjtc000 = false;

			{
				if (true)
				{
					return jjtn000;
				}
			}
		}
		catch (Throwable jjte000)
		{
			if (jjtc000)
			{
				jjtree.clearNodeScope(jjtn000);

				jjtc000 = false;
			}
			else
			{
				jjtree.popNode();
			}

			if (jjte000 instanceof RuntimeException)
			{
				{
					if (true)
					{
						throw (RuntimeException) jjte000;
					}
				}
			}

			if (jjte000 instanceof ParseException)
			{
				{
					if (true)
					{
						throw (ParseException) jjte000;
					}
				}
			}

			{
				if (true)
				{
					throw (Error) jjte000;
				}
			}
		}
		finally
		{
			if (jjtc000)
			{
				jjtree.closeNodeScope(jjtn000, true);
			}
		}

		throw new Error("Missing return statement in function");
	}

	static final public void procparamstatement()
		throws ParseException
	{
		ParameterAssignment();
		jj_consume_token(15);
	}

	static final public void ParameterAssignment()
		throws ParseException
	{

		switch ((jj_ntk == -1)
				? jj_ntk()
				: jj_ntk)
		{

		case V :
			jj_consume_token(V);
			Variable();
			jj_consume_token(16);

			ACTCallByValueNode jjtn001 = new ACTCallByValueNode(JJTCALLBYVALUENODE);
			boolean jjtc001 = true;

			jjtree.openNodeScope(jjtn001);

			try
			{
				expression();
			}
			catch (Throwable jjte001)
			{
				if (jjtc001)
				{
					jjtree.clearNodeScope(jjtn001);

					jjtc001 = false;
				}
				else
				{
					jjtree.popNode();
				}

				if (jjte001 instanceof RuntimeException)
				{
					{
						if (true)
						{
							throw (RuntimeException) jjte001;
						}
					}
				}

				if (jjte001 instanceof ParseException)
				{
					{
						if (true)
						{
							throw (ParseException) jjte001;
						}
					}
				}

				{
					if (true)
					{
						throw (Error) jjte001;
					}
				}
			}
			finally
			{
				if (jjtc001)
				{
					jjtree.closeNodeScope(jjtn001, 2);
				}
			}
			break;

		case R :
			jj_consume_token(R);
			Variable();
			jj_consume_token(16);

			ACTCallByReferenceNode jjtn002 = new ACTCallByReferenceNode(JJTCALLBYREFERENCENODE);
			boolean jjtc002 = true;

			jjtree.openNodeScope(jjtn002);

			try
			{
				Variable();
			}
			catch (Throwable jjte002)
			{
				if (jjtc002)
				{
					jjtree.clearNodeScope(jjtn002);

					jjtc002 = false;
				}
				else
				{
					jjtree.popNode();
				}

				if (jjte002 instanceof RuntimeException)
				{
					{
						if (true)
						{
							throw (RuntimeException) jjte002;
						}
					}
				}

				if (jjte002 instanceof ParseException)
				{
					{
						if (true)
						{
							throw (ParseException) jjte002;
						}
					}
				}

				{
					if (true)
					{
						throw (Error) jjte002;
					}
				}
			}
			finally
			{
				if (jjtc002)
				{
					jjtree.closeNodeScope(jjtn002, 2);
				}
			}
			break;

		default :
			jj_la1[2] = jj_gen;

			jj_consume_token(-1);

			throw new ParseException();
		}
	}

	static final public ACTProcCall ProcCall()
		throws ParseException
	{

		/* @bgen(jjtree) ProcCall */
		ACTProcCall jjtn000 = new ACTProcCall(JJTPROCCALL);
		boolean jjtc000 = true;

		jjtree.openNodeScope(jjtn000);

		try
		{
			proccallstatement();
			jj_consume_token(0);
			jjtree.closeNodeScope(jjtn000, true);

			jjtc000 = false;

			{
				if (true)
				{
					return jjtn000;
				}
			}
		}
		catch (Throwable jjte000)
		{
			if (jjtc000)
			{
				jjtree.clearNodeScope(jjtn000);

				jjtc000 = false;
			}
			else
			{
				jjtree.popNode();
			}

			if (jjte000 instanceof RuntimeException)
			{
				{
					if (true)
					{
						throw (RuntimeException) jjte000;
					}
				}
			}

			if (jjte000 instanceof ParseException)
			{
				{
					if (true)
					{
						throw (ParseException) jjte000;
					}
				}
			}

			{
				if (true)
				{
					throw (Error) jjte000;
				}
			}
		}
		finally
		{
			if (jjtc000)
			{
				jjtree.closeNodeScope(jjtn000, true);
			}
		}

		throw new Error("Missing return statement in function");
	}

	static final public void proccallstatement()
		throws ParseException
	{

		switch ((jj_ntk == -1)
				? jj_ntk()
				: jj_ntk)
		{

		case STRING :
			String();
			break;

		case VAR :
			Variable();
			break;

		default :
			jj_la1[3] = jj_gen;

			jj_consume_token(-1);

			throw new ParseException();
		}
	}

	static final public ACTStatement Statement()
		throws ParseException
	{

		/* @bgen(jjtree) Statement */
		ACTStatement jjtn000 = new ACTStatement(JJTSTATEMENT);
		boolean jjtc000 = true;

		jjtree.openNodeScope(jjtn000);

		try
		{
			label_2:
			while (true)
			{
				switch ((jj_ntk == -1)
						? jj_ntk()
						: jj_ntk)
				{

				case N :
				case S :
				case A :
				case X :
				case 15 :
					;
					break;

				default :
					jj_la1[4] = jj_gen;
					break label_2;
				}

				switch ((jj_ntk == -1)
						? jj_ntk()
						: jj_ntk)
				{

				case 15 :
					jj_consume_token(15);
					break;

				case N :
				case S :
				case A :
				case X :
					StatementExpression();
					break;

				default :
					jj_la1[5] = jj_gen;

					jj_consume_token(-1);

					throw new ParseException();
				}
			}

			jj_consume_token(0);
			jjtree.closeNodeScope(jjtn000, true);

			jjtc000 = false;

			{
				if (true)
				{
					return jjtn000;
				}
			}
		}
		catch (Throwable jjte000)
		{
			if (jjtc000)
			{
				jjtree.clearNodeScope(jjtn000);

				jjtc000 = false;
			}
			else
			{
				jjtree.popNode();
			}

			if (jjte000 instanceof RuntimeException)
			{
				{
					if (true)
					{
						throw (RuntimeException) jjte000;
					}
				}
			}

			if (jjte000 instanceof ParseException)
			{
				{
					if (true)
					{
						throw (ParseException) jjte000;
					}
				}
			}

			{
				if (true)
				{
					throw (Error) jjte000;
				}
			}
		}
		finally
		{
			if (jjtc000)
			{
				jjtree.closeNodeScope(jjtn000, true);
			}
		}

		throw new Error("Missing return statement in function");
	}

	static final public void StatementExpression()
		throws ParseException
	{
		Action();
		jj_consume_token(15);
	}

	static final public void Action()
		throws ParseException
	{

		switch ((jj_ntk == -1)
				? jj_ntk()
				: jj_ntk)
		{

		case N :
			jj_consume_token(N);

			ACTNormalNode jjtn001 = new ACTNormalNode(JJTNORMALNODE);
			boolean jjtc001 = true;

			jjtree.openNodeScope(jjtn001);

			try
			{
				Variable();
			}
			catch (Throwable jjte001)
			{
				if (jjtc001)
				{
					jjtree.clearNodeScope(jjtn001);

					jjtc001 = false;
				}
				else
				{
					jjtree.popNode();
				}

				if (jjte001 instanceof RuntimeException)
				{
					{
						if (true)
						{
							throw (RuntimeException) jjte001;
						}
					}
				}

				if (jjte001 instanceof ParseException)
				{
					{
						if (true)
						{
							throw (ParseException) jjte001;
						}
					}
				}

				{
					if (true)
					{
						throw (Error) jjte001;
					}
				}
			}
			finally
			{
				if (jjtc001)
				{
					jjtree.closeNodeScope(jjtn001, 1);
				}
			}
			break;

		case A :
			jj_consume_token(A);
			Variable();
			jj_consume_token(16);

			ACTPeriodicNode jjtn002 = new ACTPeriodicNode(JJTPERIODICNODE);
			boolean jjtc002 = true;

			jjtree.openNodeScope(jjtn002);

			try
			{
				expression();
			}
			catch (Throwable jjte002)
			{
				if (jjtc002)
				{
					jjtree.clearNodeScope(jjtn002);

					jjtc002 = false;
				}
				else
				{
					jjtree.popNode();
				}

				if (jjte002 instanceof RuntimeException)
				{
					{
						if (true)
						{
							throw (RuntimeException) jjte002;
						}
					}
				}

				if (jjte002 instanceof ParseException)
				{
					{
						if (true)
						{
							throw (ParseException) jjte002;
						}
					}
				}

				{
					if (true)
					{
						throw (Error) jjte002;
					}
				}
			}
			finally
			{
				if (jjtc002)
				{
					jjtree.closeNodeScope(jjtn002, 2);
				}
			}
			break;

		case S :
			jj_consume_token(S);
			Variable();
			jj_consume_token(16);

			ACTStoredNode jjtn003 = new ACTStoredNode(JJTSTOREDNODE);
			boolean jjtc003 = true;

			jjtree.openNodeScope(jjtn003);

			try
			{
				expression();
			}
			catch (Throwable jjte003)
			{
				if (jjtc003)
				{
					jjtree.clearNodeScope(jjtn003);

					jjtc003 = false;
				}
				else
				{
					jjtree.popNode();
				}

				if (jjte003 instanceof RuntimeException)
				{
					{
						if (true)
						{
							throw (RuntimeException) jjte003;
						}
					}
				}

				if (jjte003 instanceof ParseException)
				{
					{
						if (true)
						{
							throw (ParseException) jjte003;
						}
					}
				}

				{
					if (true)
					{
						throw (Error) jjte003;
					}
				}
			}
			finally
			{
				if (jjtc003)
				{
					jjtree.closeNodeScope(jjtn003, 2);
				}
			}
			break;

		case X :
			jj_consume_token(X);
			Variable();
			jj_consume_token(16);

			ACTExitNode jjtn004 = new ACTExitNode(JJTEXITNODE);
			boolean jjtc004 = true;

			jjtree.openNodeScope(jjtn004);

			try
			{
				expression();
			}
			catch (Throwable jjte004)
			{
				if (jjtc004)
				{
					jjtree.clearNodeScope(jjtn004);

					jjtc004 = false;
				}
				else
				{
					jjtree.popNode();
				}

				if (jjte004 instanceof RuntimeException)
				{
					{
						if (true)
						{
							throw (RuntimeException) jjte004;
						}
					}
				}

				if (jjte004 instanceof ParseException)
				{
					{
						if (true)
						{
							throw (ParseException) jjte004;
						}
					}
				}

				{
					if (true)
					{
						throw (Error) jjte004;
					}
				}
			}
			finally
			{
				if (jjtc004)
				{
					jjtree.closeNodeScope(jjtn004, 2);
				}
			}
			break;

		default :
			jj_la1[6] = jj_gen;

			jj_consume_token(-1);

			throw new ParseException();
		}
	}

	static final public void expression()
		throws ParseException
	{

		logicalor();

		label_3:
		while (true)
		{
			switch ((jj_ntk == -1)
					? jj_ntk()
					: jj_ntk)
			{

			case 17 :
				;
				break;

			default :
				jj_la1[7] = jj_gen;
				break label_3;
			}

			jj_consume_token(17);

			ACTAndNode jjtn001 = new ACTAndNode(JJTANDNODE);
			boolean jjtc001 = true;

			jjtree.openNodeScope(jjtn001);

			try
			{
				logicalor();
			}
			catch (Throwable jjte001)
			{
				if (jjtc001)
				{
					jjtree.clearNodeScope(jjtn001);

					jjtc001 = false;
				}
				else
				{
					jjtree.popNode();
				}

				if (jjte001 instanceof RuntimeException)
				{
					{
						if (true)
						{
							throw (RuntimeException) jjte001;
						}
					}
				}

				if (jjte001 instanceof ParseException)
				{
					{
						if (true)
						{
							throw (ParseException) jjte001;
						}
					}
				}

				{
					if (true)
					{
						throw (Error) jjte001;
					}
				}
			}
			finally
			{
				if (jjtc001)
				{
					jjtree.closeNodeScope(jjtn001, 2);
				}
			}
		}
	}

	static final public void logicalor()
		throws ParseException
	{

		equalityexpression();

		label_4:
		while (true)
		{
			switch ((jj_ntk == -1)
					? jj_ntk()
					: jj_ntk)
			{

			case 18 :
				;
				break;

			default :
				jj_la1[8] = jj_gen;
				break label_4;
			}

			jj_consume_token(18);

			ACTOrNode jjtn001 = new ACTOrNode(JJTORNODE);
			boolean jjtc001 = true;

			jjtree.openNodeScope(jjtn001);

			try
			{
				equalityexpression();
			}
			catch (Throwable jjte001)
			{
				if (jjtc001)
				{
					jjtree.clearNodeScope(jjtn001);

					jjtc001 = false;
				}
				else
				{
					jjtree.popNode();
				}

				if (jjte001 instanceof RuntimeException)
				{
					{
						if (true)
						{
							throw (RuntimeException) jjte001;
						}
					}
				}

				if (jjte001 instanceof ParseException)
				{
					{
						if (true)
						{
							throw (ParseException) jjte001;
						}
					}
				}

				{
					if (true)
					{
						throw (Error) jjte001;
					}
				}
			}
			finally
			{
				if (jjtc001)
				{
					jjtree.closeNodeScope(jjtn001, 2);
				}
			}
		}
	}

	static final public void equalityexpression()
		throws ParseException
	{

		relationalexpression();

		label_5:
		while (true)
		{
			switch ((jj_ntk == -1)
					? jj_ntk()
					: jj_ntk)
			{

			case 19 :
			case 20 :
				;
				break;

			default :
				jj_la1[9] = jj_gen;
				break label_5;
			}

			switch ((jj_ntk == -1)
					? jj_ntk()
					: jj_ntk)
			{

			case 19 :
				jj_consume_token(19);

				ACTEQNode jjtn001 = new ACTEQNode(JJTEQNODE);
				boolean jjtc001 = true;

				jjtree.openNodeScope(jjtn001);

				try
				{
					relationalexpression();
				}
				catch (Throwable jjte001)
				{
					if (jjtc001)
					{
						jjtree.clearNodeScope(jjtn001);

						jjtc001 = false;
					}
					else
					{
						jjtree.popNode();
					}

					if (jjte001 instanceof RuntimeException)
					{
						{
							if (true)
							{
								throw (RuntimeException) jjte001;
							}
						}
					}

					if (jjte001 instanceof ParseException)
					{
						{
							if (true)
							{
								throw (ParseException) jjte001;
							}
						}
					}

					{
						if (true)
						{
							throw (Error) jjte001;
						}
					}
				}
				finally
				{
					if (jjtc001)
					{
						jjtree.closeNodeScope(jjtn001, 2);
					}
				}
				break;

			case 20 :
				jj_consume_token(20);

				ACTNEQNode jjtn002 = new ACTNEQNode(JJTNEQNODE);
				boolean jjtc002 = true;

				jjtree.openNodeScope(jjtn002);

				try
				{
					relationalexpression();
				}
				catch (Throwable jjte002)
				{
					if (jjtc002)
					{
						jjtree.clearNodeScope(jjtn002);

						jjtc002 = false;
					}
					else
					{
						jjtree.popNode();
					}

					if (jjte002 instanceof RuntimeException)
					{
						{
							if (true)
							{
								throw (RuntimeException) jjte002;
							}
						}
					}

					if (jjte002 instanceof ParseException)
					{
						{
							if (true)
							{
								throw (ParseException) jjte002;
							}
						}
					}

					{
						if (true)
						{
							throw (Error) jjte002;
						}
					}
				}
				finally
				{
					if (jjtc002)
					{
						jjtree.closeNodeScope(jjtn002, 2);
					}
				}
				break;

			default :
				jj_la1[10] = jj_gen;

				jj_consume_token(-1);

				throw new ParseException();
			}
		}
	}

	static final public void relationalexpression()
		throws ParseException
	{

		additiveexpression();

		label_6:
		while (true)
		{
			switch ((jj_ntk == -1)
					? jj_ntk()
					: jj_ntk)
			{

			case 21 :
			case 22 :
			case 23 :
			case 24 :
				;
				break;

			default :
				jj_la1[11] = jj_gen;
				break label_6;
			}

			switch ((jj_ntk == -1)
					? jj_ntk()
					: jj_ntk)
			{

			case 21 :
				jj_consume_token(21);

				ACTLTNode jjtn001 = new ACTLTNode(JJTLTNODE);
				boolean jjtc001 = true;

				jjtree.openNodeScope(jjtn001);

				try
				{
					additiveexpression();
				}
				catch (Throwable jjte001)
				{
					if (jjtc001)
					{
						jjtree.clearNodeScope(jjtn001);

						jjtc001 = false;
					}
					else
					{
						jjtree.popNode();
					}

					if (jjte001 instanceof RuntimeException)
					{
						{
							if (true)
							{
								throw (RuntimeException) jjte001;
							}
						}
					}

					if (jjte001 instanceof ParseException)
					{
						{
							if (true)
							{
								throw (ParseException) jjte001;
							}
						}
					}

					{
						if (true)
						{
							throw (Error) jjte001;
						}
					}
				}
				finally
				{
					if (jjtc001)
					{
						jjtree.closeNodeScope(jjtn001, 2);
					}
				}
				break;

			case 22 :
				jj_consume_token(22);

				ACTGTNode jjtn002 = new ACTGTNode(JJTGTNODE);
				boolean jjtc002 = true;

				jjtree.openNodeScope(jjtn002);

				try
				{
					additiveexpression();
				}
				catch (Throwable jjte002)
				{
					if (jjtc002)
					{
						jjtree.clearNodeScope(jjtn002);

						jjtc002 = false;
					}
					else
					{
						jjtree.popNode();
					}

					if (jjte002 instanceof RuntimeException)
					{
						{
							if (true)
							{
								throw (RuntimeException) jjte002;
							}
						}
					}

					if (jjte002 instanceof ParseException)
					{
						{
							if (true)
							{
								throw (ParseException) jjte002;
							}
						}
					}

					{
						if (true)
						{
							throw (Error) jjte002;
						}
					}
				}
				finally
				{
					if (jjtc002)
					{
						jjtree.closeNodeScope(jjtn002, 2);
					}
				}
				break;

			case 23 :
				jj_consume_token(23);

				ACTLENode jjtn003 = new ACTLENode(JJTLENODE);
				boolean jjtc003 = true;

				jjtree.openNodeScope(jjtn003);

				try
				{
					additiveexpression();
				}
				catch (Throwable jjte003)
				{
					if (jjtc003)
					{
						jjtree.clearNodeScope(jjtn003);

						jjtc003 = false;
					}
					else
					{
						jjtree.popNode();
					}

					if (jjte003 instanceof RuntimeException)
					{
						{
							if (true)
							{
								throw (RuntimeException) jjte003;
							}
						}
					}

					if (jjte003 instanceof ParseException)
					{
						{
							if (true)
							{
								throw (ParseException) jjte003;
							}
						}
					}

					{
						if (true)
						{
							throw (Error) jjte003;
						}
					}
				}
				finally
				{
					if (jjtc003)
					{
						jjtree.closeNodeScope(jjtn003, 2);
					}
				}
				break;

			case 24 :
				jj_consume_token(24);

				ACTGENode jjtn004 = new ACTGENode(JJTGENODE);
				boolean jjtc004 = true;

				jjtree.openNodeScope(jjtn004);

				try
				{
					additiveexpression();
				}
				catch (Throwable jjte004)
				{
					if (jjtc004)
					{
						jjtree.clearNodeScope(jjtn004);

						jjtc004 = false;
					}
					else
					{
						jjtree.popNode();
					}

					if (jjte004 instanceof RuntimeException)
					{
						{
							if (true)
							{
								throw (RuntimeException) jjte004;
							}
						}
					}

					if (jjte004 instanceof ParseException)
					{
						{
							if (true)
							{
								throw (ParseException) jjte004;
							}
						}
					}

					{
						if (true)
						{
							throw (Error) jjte004;
						}
					}
				}
				finally
				{
					if (jjtc004)
					{
						jjtree.closeNodeScope(jjtn004, 2);
					}
				}
				break;

			default :
				jj_la1[12] = jj_gen;

				jj_consume_token(-1);

				throw new ParseException();
			}
		}
	}

	static final public void additiveexpression()
		throws ParseException
	{

		multiplicativeexpression();

		label_7:
		while (true)
		{
			switch ((jj_ntk == -1)
					? jj_ntk()
					: jj_ntk)
			{

			case 25 :
			case 26 :
				;
				break;

			default :
				jj_la1[13] = jj_gen;
				break label_7;
			}

			switch ((jj_ntk == -1)
					? jj_ntk()
					: jj_ntk)
			{

			case 25 :
				jj_consume_token(25);

				ACTPlusNode jjtn001 = new ACTPlusNode(JJTPLUSNODE);
				boolean jjtc001 = true;

				jjtree.openNodeScope(jjtn001);

				try
				{
					multiplicativeexpression();
				}
				catch (Throwable jjte001)
				{
					if (jjtc001)
					{
						jjtree.clearNodeScope(jjtn001);

						jjtc001 = false;
					}
					else
					{
						jjtree.popNode();
					}

					if (jjte001 instanceof RuntimeException)
					{
						{
							if (true)
							{
								throw (RuntimeException) jjte001;
							}
						}
					}

					if (jjte001 instanceof ParseException)
					{
						{
							if (true)
							{
								throw (ParseException) jjte001;
							}
						}
					}

					{
						if (true)
						{
							throw (Error) jjte001;
						}
					}
				}
				finally
				{
					if (jjtc001)
					{
						jjtree.closeNodeScope(jjtn001, 2);
					}
				}
				break;

			case 26 :
				jj_consume_token(26);

				ACTMinusNode jjtn002 = new ACTMinusNode(JJTMINUSNODE);
				boolean jjtc002 = true;

				jjtree.openNodeScope(jjtn002);

				try
				{
					multiplicativeexpression();
				}
				catch (Throwable jjte002)
				{
					if (jjtc002)
					{
						jjtree.clearNodeScope(jjtn002);

						jjtc002 = false;
					}
					else
					{
						jjtree.popNode();
					}

					if (jjte002 instanceof RuntimeException)
					{
						{
							if (true)
							{
								throw (RuntimeException) jjte002;
							}
						}
					}

					if (jjte002 instanceof ParseException)
					{
						{
							if (true)
							{
								throw (ParseException) jjte002;
							}
						}
					}

					{
						if (true)
						{
							throw (Error) jjte002;
						}
					}
				}
				finally
				{
					if (jjtc002)
					{
						jjtree.closeNodeScope(jjtn002, 2);
					}
				}
				break;

			default :
				jj_la1[14] = jj_gen;

				jj_consume_token(-1);

				throw new ParseException();
			}
		}
	}

	static final public void multiplicativeexpression()
		throws ParseException
	{

		unaryexpression();

		label_8:
		while (true)
		{
			switch ((jj_ntk == -1)
					? jj_ntk()
					: jj_ntk)
			{

			case 27 :
			case 28 :
				;
				break;

			default :
				jj_la1[15] = jj_gen;
				break label_8;
			}

			switch ((jj_ntk == -1)
					? jj_ntk()
					: jj_ntk)
			{

			case 27 :
				jj_consume_token(27);

				ACTMultNode jjtn001 = new ACTMultNode(JJTMULTNODE);
				boolean jjtc001 = true;

				jjtree.openNodeScope(jjtn001);

				try
				{
					unaryexpression();
				}
				catch (Throwable jjte001)
				{
					if (jjtc001)
					{
						jjtree.clearNodeScope(jjtn001);

						jjtc001 = false;
					}
					else
					{
						jjtree.popNode();
					}

					if (jjte001 instanceof RuntimeException)
					{
						{
							if (true)
							{
								throw (RuntimeException) jjte001;
							}
						}
					}

					if (jjte001 instanceof ParseException)
					{
						{
							if (true)
							{
								throw (ParseException) jjte001;
							}
						}
					}

					{
						if (true)
						{
							throw (Error) jjte001;
						}
					}
				}
				finally
				{
					if (jjtc001)
					{
						jjtree.closeNodeScope(jjtn001, 2);
					}
				}
				break;

			case 28 :
				jj_consume_token(28);

				ACTDivNode jjtn002 = new ACTDivNode(JJTDIVNODE);
				boolean jjtc002 = true;

				jjtree.openNodeScope(jjtn002);

				try
				{
					unaryexpression();
				}
				catch (Throwable jjte002)
				{
					if (jjtc002)
					{
						jjtree.clearNodeScope(jjtn002);

						jjtc002 = false;
					}
					else
					{
						jjtree.popNode();
					}

					if (jjte002 instanceof RuntimeException)
					{
						{
							if (true)
							{
								throw (RuntimeException) jjte002;
							}
						}
					}

					if (jjte002 instanceof ParseException)
					{
						{
							if (true)
							{
								throw (ParseException) jjte002;
							}
						}
					}

					{
						if (true)
						{
							throw (Error) jjte002;
						}
					}
				}
				finally
				{
					if (jjtc002)
					{
						jjtree.closeNodeScope(jjtn002, 2);
					}
				}
				break;

			default :
				jj_la1[16] = jj_gen;

				jj_consume_token(-1);

				throw new ParseException();
			}
		}
	}

	static final public void unaryexpression()
		throws ParseException
	{

		switch ((jj_ntk == -1)
				? jj_ntk()
				: jj_ntk)
		{

		case 29 :
			jj_consume_token(29);

			ACTNotNode jjtn001 = new ACTNotNode(JJTNOTNODE);
			boolean jjtc001 = true;

			jjtree.openNodeScope(jjtn001);

			try
			{
				unaryexpression();
			}
			catch (Throwable jjte001)
			{
				if (jjtc001)
				{
					jjtree.clearNodeScope(jjtn001);

					jjtc001 = false;
				}
				else
				{
					jjtree.popNode();
				}

				if (jjte001 instanceof RuntimeException)
				{
					{
						if (true)
						{
							throw (RuntimeException) jjte001;
						}
					}
				}

				if (jjte001 instanceof ParseException)
				{
					{
						if (true)
						{
							throw (ParseException) jjte001;
						}
					}
				}

				{
					if (true)
					{
						throw (Error) jjte001;
					}
				}
			}
			finally
			{
				if (jjtc001)
				{
					jjtree.closeNodeScope(jjtn001, 1);
				}
			}
			break;

		case VAR :
		case INTEGER :
		case STRING :
		case 30 :
			primaryexpression();
			break;

		default :
			jj_la1[17] = jj_gen;

			jj_consume_token(-1);

			throw new ParseException();
		}
	}

	static final public void primaryexpression()
		throws ParseException
	{

		String name;

		switch ((jj_ntk == -1)
				? jj_ntk()
				: jj_ntk)
		{

		case STRING :
			String();
			break;

		case INTEGER :
			Integer();
			break;

		case VAR :
			Variable();
			break;

		case 30 :
			jj_consume_token(30);
			expression();
			jj_consume_token(31);
			break;

		default :
			jj_la1[18] = jj_gen;

			jj_consume_token(-1);

			throw new ParseException();
		}
	}

	static final public void Integer()
		throws ParseException
	{

		/* @bgen(jjtree) Integer */
		ACTInteger jjtn000 = new ACTInteger(JJTINTEGER);
		boolean jjtc000 = true;

		jjtree.openNodeScope(jjtn000);

		Token t;

		try
		{
			t = jj_consume_token(INTEGER);

			jjtree.closeNodeScope(jjtn000, true);

			jjtc000 = false;

			jjtn000.setName(t.image);
		}
		finally
		{
			if (jjtc000)
			{
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void Variable()
		throws ParseException
	{

		/* @bgen(jjtree) Variable */
		ACTVariable jjtn000 = new ACTVariable(JJTVARIABLE);
		boolean jjtc000 = true;

		jjtree.openNodeScope(jjtn000);

		Token t;

		try
		{
			t = jj_consume_token(VAR);

			jjtree.closeNodeScope(jjtn000, true);

			jjtc000 = false;

			jjtn000.setName(t.image);
		}
		finally
		{
			if (jjtc000)
			{
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void String()
		throws ParseException
	{

		/* @bgen(jjtree) String */
		ACTString jjtn000 = new ACTString(JJTSTRING);
		boolean jjtc000 = true;

		jjtree.openNodeScope(jjtn000);

		Token t;

		try
		{
			t = jj_consume_token(STRING);

			jjtree.closeNodeScope(jjtn000, true);

			jjtc000 = false;

			jjtn000.setName(t.image);
		}
		finally
		{
			if (jjtc000)
			{
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static private boolean jj_initialized_once = false;
	static public ActionParserTokenManager token_source;
	static ASCII_CharStream jj_input_stream;
	static public Token token, jj_nt;
	static private int jj_ntk;
	static private int jj_gen;
	static final private int[] jj_la1 = new int[19];
	static final private int[] jj_la1_0 = { 0x8300, 0x8300, 0x300, 0x4400,
											0x80f0, 0x80f0, 0xf0, 0x20000,
											0x40000, 0x180000, 0x180000,
											0x1e00000, 0x1e00000, 0x6000000,
											0x6000000, 0x18000000, 0x18000000,
											0x60006400, 0x40006400, };

	public ActionParser(java.io.InputStream stream)
	{

		if (jj_initialized_once)
		{
			System.out.println("ERROR: Second call to constructor of static parser.  You must");
			System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");

			throw new Error();
		}

		jj_initialized_once = true;
		jj_input_stream = new ASCII_CharStream(stream, 1, 1);
		token_source = new ActionParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;

		for (int i = 0; i < 19; i++)
		{
			jj_la1[i] = -1;
		}
	}

	static public void ReInit(java.io.InputStream stream)
	{

		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);

		token = new Token();
		jj_ntk = -1;

		jjtree.reset();

		jj_gen = 0;

		for (int i = 0; i < 19; i++)
		{
			jj_la1[i] = -1;
		}
	}

	public ActionParser(java.io.Reader stream)
	{

		if (jj_initialized_once)
		{
			System.out.println("ERROR: Second call to constructor of static parser.  You must");
			System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");

			throw new Error();
		}

		jj_initialized_once = true;
		jj_input_stream = new ASCII_CharStream(stream, 1, 1);
		token_source = new ActionParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;

		for (int i = 0; i < 19; i++)
		{
			jj_la1[i] = -1;
		}
	}

	static public void ReInit(java.io.Reader stream)
	{

		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);

		token = new Token();
		jj_ntk = -1;

		jjtree.reset();

		jj_gen = 0;

		for (int i = 0; i < 19; i++)
		{
			jj_la1[i] = -1;
		}
	}

	public ActionParser(ActionParserTokenManager tm)
	{

		if (jj_initialized_once)
		{
			System.out.println("ERROR: Second call to constructor of static parser.  You must");
			System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");

			throw new Error();
		}

		jj_initialized_once = true;
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;

		for (int i = 0; i < 19; i++)
		{
			jj_la1[i] = -1;
		}
	}

	public void ReInit(ActionParserTokenManager tm)
	{

		token_source = tm;
		token = new Token();
		jj_ntk = -1;

		jjtree.reset();

		jj_gen = 0;

		for (int i = 0; i < 19; i++)
		{
			jj_la1[i] = -1;
		}
	}

	static final private Token jj_consume_token(int kind)
		throws ParseException
	{

		Token oldToken;

		if ((oldToken = token).next != null)
		{
			token = token.next;
		}
		else
		{
			token = token.next = token_source.getNextToken();
		}

		jj_ntk = -1;

		if (token.kind == kind)
		{
			jj_gen++;

			return token;
		}

		token = oldToken;
		jj_kind = kind;

		throw generateParseException();
	}

	static final public Token getNextToken()
	{

		if (token.next != null)
		{
			token = token.next;
		}
		else
		{
			token = token.next = token_source.getNextToken();
		}

		jj_ntk = -1;

		jj_gen++;

		return token;
	}

	static final public Token getToken(int index)
	{

		Token t = token;

		for (int i = 0; i < index; i++)
		{
			if (t.next != null)
			{
				t = t.next;
			}
			else
			{
				t = t.next = token_source.getNextToken();
			}
		}

		return t;
	}

	static final private int jj_ntk()
	{

		if ((jj_nt = token.next) == null)
		{
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		}
		else
		{
			return (jj_ntk = jj_nt.kind);
		}
	}

	static private java.util.Vector jj_expentries = new java.util.Vector();
	static private int[] jj_expentry;
	static private int jj_kind = -1;

	static final public ParseException generateParseException()
	{

		jj_expentries.removeAllElements();

		boolean[] la1tokens = new boolean[32];

		for (int i = 0; i < 32; i++)
		{
			la1tokens[i] = false;
		}

		if (jj_kind >= 0)
		{
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}

		for (int i = 0; i < 19; i++)
		{
			if (jj_la1[i] == jj_gen)
			{
				for (int j = 0; j < 32; j++)
				{
					if ((jj_la1_0[i] & (1 << j)) != 0)
					{
						la1tokens[j] = true;
					}
				}
			}
		}

		for (int i = 0; i < 32; i++)
		{
			if (la1tokens[i])
			{
				jj_expentry = new int[1];
				jj_expentry[0] = i;

				jj_expentries.addElement(jj_expentry);
			}
		}

		int[][] exptokseq = new int[jj_expentries.size()][];

		for (int i = 0; i < jj_expentries.size(); i++)
		{
			exptokseq[i] = (int[]) jj_expentries.elementAt(i);
		}

		return new ParseException(token, exptokseq, tokenImage);
	}

	static final public void enable_tracing() {}

	static final public void disable_tracing() {}
}

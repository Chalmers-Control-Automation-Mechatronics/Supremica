/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ActionParser.jj */
/*@egen*/options {
LOOKAHEAD=1;
STATIC = true;                                   
}

PARSER_BEGIN(ActionParser)

package org.jgrafchart.Actions;

import java.io.*;

public class ActionParser/*@bgen(jjtree)*/implements ActionParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTActionParserState jjtree = new JJTActionParserState();

/*@egen*/

    public static void main(String args[]) {
    System.out.println("Reading from string...");
    StringReader sr = new StringReader(args[0]);
    ActionParser  parser = new ActionParser(sr);
   try {
      SimpleNode n = parser.ProcCall();
      n.dump("");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(ActionParser)

SKIP :
{
	" "
|	"\n"
|	"\t"
}

TOKEN [IGNORE_CASE]: /* ACTION_TYPES */
{
	< N: "N" >
|	< S: "S">
|       < A: "A">
|       < X:  "X">
|       < V: "V">
|       < R: "R">
}


TOKEN : /* Variable names */
{
	< VAR: ( <LETTER> )+ ( <DIGIT> | <LETTER> )* >
  |	< #LETTER: ["a"-"z", "A"-"Z", ".", "_"] >
  |	< #DIGIT: ["0"-"9"] >
}



TOKEN :
{
        < INTEGER: <DIGIT> (<DIGIT>)* >
}

TOKEN : 
{
  < STRING:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}
ACTProcParam ProcParam() :
{/*@bgen(jjtree) ProcParam */
  ACTProcParam jjtn000 = new ACTProcParam(JJTPROCPARAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ProcParam */
try {
/*@egen*/
(
  ";"
|
  procparamstatement()
)*
<EOF>/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void procparamstatement()       :
{}
{
  ParameterAssignment() ";"
}

void ParameterAssignment()       :
{}
{ <V> Variable() "="/*@bgen(jjtree) #CallByValueNode( 2) */
                     {
                       ACTCallByValueNode jjtn001 = new ACTCallByValueNode(JJTCALLBYVALUENODE);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                     }
                     try {
/*@egen*/ expression()/*@bgen(jjtree)*/
                     } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         throw (RuntimeException)jjte001;
                       }
                       if (jjte001 instanceof ParseException) {
                         throw (ParseException)jjte001;
                       }
                       throw (Error)jjte001;
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                       }
                     }
/*@egen*/
| <R> Variable() "="/*@bgen(jjtree) #CallByReferenceNode( 2) */
                     {
                       ACTCallByReferenceNode jjtn002 = new ACTCallByReferenceNode(JJTCALLBYREFERENCENODE);
                       boolean jjtc002 = true;
                       jjtree.openNodeScope(jjtn002);
                     }
                     try {
/*@egen*/ Variable()/*@bgen(jjtree)*/
                     } catch (Throwable jjte002) {
                       if (jjtc002) {
                         jjtree.clearNodeScope(jjtn002);
                         jjtc002 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte002 instanceof RuntimeException) {
                         throw (RuntimeException)jjte002;
                       }
                       if (jjte002 instanceof ParseException) {
                         throw (ParseException)jjte002;
                       }
                       throw (Error)jjte002;
                     } finally {
                       if (jjtc002) {
                         jjtree.closeNodeScope(jjtn002,  2);
                       }
                     }
/*@egen*/
}


ACTProcCall ProcCall() :
{/*@bgen(jjtree) ProcCall */
  ACTProcCall jjtn000 = new ACTProcCall(JJTPROCCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ProcCall */
  try {
/*@egen*/ 
  proccallstatement() <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void proccallstatement()       :
{}
{ 
  String()
|
  Variable()
}



ACTStatement Statement()  :
{/*@bgen(jjtree) Statement */
  ACTStatement jjtn000 = new ACTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statement */
try {
/*@egen*/
(
  ";"
|
  StatementExpression()
)*
<EOF>/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void StatementExpression()       :
{}
{
  Action() ";"
}

void Action()       :
{}
{ <N>/*@bgen(jjtree) #NormalNode( 1) */
      {
        ACTNormalNode jjtn001 = new ACTNormalNode(JJTNORMALNODE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/ Variable()/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  1);
        }
      }
/*@egen*/
| <A> Variable() "="/*@bgen(jjtree) #PeriodicNode( 2) */
                     {
                       ACTPeriodicNode jjtn002 = new ACTPeriodicNode(JJTPERIODICNODE);
                       boolean jjtc002 = true;
                       jjtree.openNodeScope(jjtn002);
                     }
                     try {
/*@egen*/ expression()/*@bgen(jjtree)*/
                     } catch (Throwable jjte002) {
                       if (jjtc002) {
                         jjtree.clearNodeScope(jjtn002);
                         jjtc002 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte002 instanceof RuntimeException) {
                         throw (RuntimeException)jjte002;
                       }
                       if (jjte002 instanceof ParseException) {
                         throw (ParseException)jjte002;
                       }
                       throw (Error)jjte002;
                     } finally {
                       if (jjtc002) {
                         jjtree.closeNodeScope(jjtn002,  2);
                       }
                     }
/*@egen*/
| <S> Variable() "="/*@bgen(jjtree) #StoredNode( 2) */
                     {
                       ACTStoredNode jjtn003 = new ACTStoredNode(JJTSTOREDNODE);
                       boolean jjtc003 = true;
                       jjtree.openNodeScope(jjtn003);
                     }
                     try {
/*@egen*/ expression()/*@bgen(jjtree)*/
                     } catch (Throwable jjte003) {
                       if (jjtc003) {
                         jjtree.clearNodeScope(jjtn003);
                         jjtc003 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte003 instanceof RuntimeException) {
                         throw (RuntimeException)jjte003;
                       }
                       if (jjte003 instanceof ParseException) {
                         throw (ParseException)jjte003;
                       }
                       throw (Error)jjte003;
                     } finally {
                       if (jjtc003) {
                         jjtree.closeNodeScope(jjtn003,  2);
                       }
                     }
/*@egen*/
| <X>  Variable() "="/*@bgen(jjtree) #ExitNode( 2) */
                      {
                        ACTExitNode jjtn004 = new ACTExitNode(JJTEXITNODE);
                        boolean jjtc004 = true;
                        jjtree.openNodeScope(jjtn004);
                      }
                      try {
/*@egen*/ expression()/*@bgen(jjtree)*/
                      } catch (Throwable jjte004) {
                        if (jjtc004) {
                          jjtree.clearNodeScope(jjtn004);
                          jjtc004 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte004 instanceof RuntimeException) {
                          throw (RuntimeException)jjte004;
                        }
                        if (jjte004 instanceof ParseException) {
                          throw (ParseException)jjte004;
                        }
                        throw (Error)jjte004;
                      } finally {
                        if (jjtc004) {
                          jjtree.closeNodeScope(jjtn004,  2);
                        }
                      }
/*@egen*/
}

void expression()       :
{ }
{
    logicalor() ( "&"/*@bgen(jjtree) #AndNode( 2) */
                       {
                         ACTAndNode jjtn001 = new ACTAndNode(JJTANDNODE);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*/  logicalor()/*@bgen(jjtree)*/
                       } catch (Throwable jjte001) {
                         if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           throw (RuntimeException)jjte001;
                         }
                         if (jjte001 instanceof ParseException) {
                           throw (ParseException)jjte001;
                         }
                         throw (Error)jjte001;
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                         }
                       }
/*@egen*/ )*
}

void logicalor()       :
{}
{
     equalityexpression() ( "|"/*@bgen(jjtree) #OrNode( 2) */
                                {
                                  ACTOrNode jjtn001 = new ACTOrNode(JJTORNODE);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                }
                                try {
/*@egen*/ equalityexpression()/*@bgen(jjtree)*/
                                } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte001;
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    throw (ParseException)jjte001;
                                  }
                                  throw (Error)jjte001;
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                  }
                                }
/*@egen*/ )*
}

void equalityexpression()       :
{}
{
relationalexpression()
(
  "=="/*@bgen(jjtree) #EQNode( 2) */
       {
         ACTEQNode jjtn001 = new ACTEQNode(JJTEQNODE);
         boolean jjtc001 = true;
         jjtree.openNodeScope(jjtn001);
       }
       try {
/*@egen*/ relationalexpression()/*@bgen(jjtree)*/
       } catch (Throwable jjte001) {
         if (jjtc001) {
           jjtree.clearNodeScope(jjtn001);
           jjtc001 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte001 instanceof RuntimeException) {
           throw (RuntimeException)jjte001;
         }
         if (jjte001 instanceof ParseException) {
           throw (ParseException)jjte001;
         }
         throw (Error)jjte001;
       } finally {
         if (jjtc001) {
           jjtree.closeNodeScope(jjtn001,  2);
         }
       }
/*@egen*/
|
 "!="/*@bgen(jjtree) #NEQNode( 2) */
      {
        ACTNEQNode jjtn002 = new ACTNEQNode(JJTNEQNODE);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ relationalexpression()/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  2);
        }
      }
/*@egen*/
)*
}

void relationalexpression()       :
{}
{
additiveexpression()
(
"<"/*@bgen(jjtree) #LTNode( 2) */
    {
      ACTLTNode jjtn001 = new ACTLTNode(JJTLTNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/ additiveexpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/
|
  ">"/*@bgen(jjtree) #GTNode( 2) */
      {
        ACTGTNode jjtn002 = new ACTGTNode(JJTGTNODE);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ additiveexpression()/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  2);
        }
      }
/*@egen*/
| 
  "<="/*@bgen(jjtree) #LENode( 2) */
      {
        ACTLENode jjtn003 = new ACTLENode(JJTLENODE);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      }
      try {
/*@egen*/additiveexpression()/*@bgen(jjtree)*/
      } catch (Throwable jjte003) {
        if (jjtc003) {
          jjtree.clearNodeScope(jjtn003);
          jjtc003 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte003 instanceof RuntimeException) {
          throw (RuntimeException)jjte003;
        }
        if (jjte003 instanceof ParseException) {
          throw (ParseException)jjte003;
        }
        throw (Error)jjte003;
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003,  2);
        }
      }
/*@egen*/
|
  ">="/*@bgen(jjtree) #GENode( 2) */
       {
         ACTGENode jjtn004 = new ACTGENode(JJTGENODE);
         boolean jjtc004 = true;
         jjtree.openNodeScope(jjtn004);
       }
       try {
/*@egen*/ additiveexpression()/*@bgen(jjtree)*/
       } catch (Throwable jjte004) {
         if (jjtc004) {
           jjtree.clearNodeScope(jjtn004);
           jjtc004 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte004 instanceof RuntimeException) {
           throw (RuntimeException)jjte004;
         }
         if (jjte004 instanceof ParseException) {
           throw (ParseException)jjte004;
         }
         throw (Error)jjte004;
       } finally {
         if (jjtc004) {
           jjtree.closeNodeScope(jjtn004,  2);
         }
       }
/*@egen*/
)*
}

void additiveexpression()       :
{}
{
multiplicativeexpression() 
(
"+"/*@bgen(jjtree) #PlusNode( 2) */
    {
      ACTPlusNode jjtn001 = new ACTPlusNode(JJTPLUSNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/ multiplicativeexpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/
|
"-"/*@bgen(jjtree) #MinusNode( 2) */
    {
      ACTMinusNode jjtn002 = new ACTMinusNode(JJTMINUSNODE);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ multiplicativeexpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  2);
      }
    }
/*@egen*/
)*
}

void multiplicativeexpression()       :
{}
{
unaryexpression()
(
"*"/*@bgen(jjtree) #MultNode( 2) */
    {
      ACTMultNode jjtn001 = new ACTMultNode(JJTMULTNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/ unaryexpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/
|
  "/"/*@bgen(jjtree) #DivNode( 2) */
      {
        ACTDivNode jjtn002 = new ACTDivNode(JJTDIVNODE);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ unaryexpression()/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  2);
        }
      }
/*@egen*/
)*
}

void unaryexpression()       :
{}
{
 "!"/*@bgen(jjtree) #NotNode( 1) */
     {
       ACTNotNode jjtn001 = new ACTNotNode(JJTNOTNODE);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
     }
     try {
/*@egen*/ unaryexpression()/*@bgen(jjtree)*/
     } catch (Throwable jjte001) {
       if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
         throw (RuntimeException)jjte001;
       }
       if (jjte001 instanceof ParseException) {
         throw (ParseException)jjte001;
       }
       throw (Error)jjte001;
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001,  1);
       }
     }
/*@egen*/
|
primaryexpression()
}

void primaryexpression()       :
{
  String name;
}
{
String()
|
Integer()
|
Variable()
|
 "(" expression() ")"
}



void Integer() :
{/*@bgen(jjtree) Integer */
  ACTInteger jjtn000 = new ACTInteger(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Integer */
  try {
/*@egen*/
  t=<INTEGER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
   jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Variable() :
{/*@bgen(jjtree) Variable */
  ACTVariable jjtn000 = new ACTVariable(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Variable */
  try {
/*@egen*/
  t=<VAR>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
   jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}




void String() : 
{/*@bgen(jjtree) String */
  ACTString jjtn000 = new ACTString(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) String */
  try {
/*@egen*/
  t=<STRING>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
  jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
/* Generated By:JJTree: Do not edit this line. ACTVariable.java */
package org.jgrafchart.Actions;

import com.nwoods.jgo.*;
import org.jgrafchart.*;
import java.util.*;

public class ACTVariable
	extends SimpleNode
{
	protected String name;
	public Referencable out;

	public ACTVariable(int id)
	{
		super(id);
	}

	public ACTVariable(ActionParser p, int id)
	{
		super(p, id);
	}

	public void setName(String n)
	{
		name = n;
	}

	public String toString()
	{
		return "Variable: " + name;
	}

	public boolean compile(ArrayList doc)
	{
		boolean found;
		boolean result = true;
		Object obj;
		ArrayList table = doc;
		String reference = name;
		int dotIndex = reference.indexOf('.');

		while (dotIndex != -1)
		{
			String firstName = reference.substring(0, dotIndex);

			reference = reference.substring(dotIndex + 1);
			found = false;

			for (Iterator i = table.iterator(); !found && i.hasNext(); )
			{
				obj = (Object) i.next();

				if (obj instanceof Referencable)
				{
					Referencable ref = (Referencable) obj;

					if (ref.getName().compareTo(firstName) == 0)
					{
						found = true;

						if (ref instanceof GCDocument)
						{
							table = ((GCDocument) ref).getSymbolTable();
						}
					}
				}
			}

			result = result && found;
			dotIndex = reference.indexOf('.');
		}

		found = false;

		for (Iterator i = table.iterator(); !found && i.hasNext(); )
		{
			obj = (Object) i.next();

			if (obj instanceof Referencable)
			{
				Referencable ref = (Referencable) obj;

				if (ref.getName().compareTo(reference) == 0)
				{
					found = true;
					out = ref;
				}
			}
		}

		result = result && found;

		return result;
	}

	public String evaluateString()
	{
		Readable ref = (Readable) out;

		return ref.getStringVal();
	}

	public boolean evaluateBoolean()
	{
		Readable ref = (Readable) out;

		return ref.getBoolVal();
	}

	public int evaluateInt()
	{
		Readable ref = (Readable) out;

		// System.out.println("Out "+ out);
		// System.out.println("Ref "+ ref);
		return ref.getIntVal();
	}

	public void executeNormalActions(boolean b) {}

	public void executeStoredActions() {}
}


/* Generated By:JJTree&JavaCC: Do not edit this line. TransitionParser.java */
package org.jgrafchart.Transitions;



import java.io.*;


public class TransitionParser		/* @bgen(jjtree) */
	implements TransitionParserTreeConstants, TransitionParserConstants
{									/* @bgen(jjtree) */

	protected static JJTTransitionParserState jjtree = new JJTTransitionParserState();

	public static void main(String args[])
	{

		System.out.println("Reading from string...");

		StringReader sr = new StringReader(args[0]);
		TransitionParser parser = new TransitionParser(sr);

		try
		{
			SimpleNode n = parser.Start();

			n.dump("");

			// System.out.println("Interpretation");
			// System.out.println(n.evaluate());
			System.out.println("Thank you.");
		}
		catch (Exception e)
		{
			System.out.println("Oops.");
			System.out.println(e.getMessage());
			e.printStackTrace();
		}

		sr = new StringReader(args[0]);

		parser.ReInit(sr);

		try
		{
			SimpleNode n = parser.Start();

			n.dump("");

			// System.out.println("Interpretation");
			// System.out.println(n.evaluate());
			System.out.println("Thank you.");
		}
		catch (Exception e)
		{
			System.out.println("Oops.");
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
	}

	static final public TRStart Start()
		throws ParseException
	{

		/* @bgen(jjtree) Start */
		TRStart jjtn000 = new TRStart(JJTSTART);
		boolean jjtc000 = true;

		jjtree.openNodeScope(jjtn000);

		try
		{
			logicaland();
			jj_consume_token(0);
			jjtree.closeNodeScope(jjtn000, true);

			jjtc000 = false;

			{
				if (true)
				{
					return jjtn000;
				}
			}
		}
		catch (Throwable jjte000)
		{
			if (jjtc000)
			{
				jjtree.clearNodeScope(jjtn000);

				jjtc000 = false;
			}
			else
			{
				jjtree.popNode();
			}

			if (jjte000 instanceof RuntimeException)
			{
				{
					if (true)
					{
						throw (RuntimeException) jjte000;
					}
				}
			}

			if (jjte000 instanceof ParseException)
			{
				{
					if (true)
					{
						throw (ParseException) jjte000;
					}
				}
			}

			{
				if (true)
				{
					throw (Error) jjte000;
				}
			}
		}
		finally
		{
			if (jjtc000)
			{
				jjtree.closeNodeScope(jjtn000, true);
			}
		}

		throw new Error("Missing return statement in function");
	}

	static final public void logicaland()
		throws ParseException
	{

		logicalor();

		label_1:
		while (true)
		{
			if (jj_2_1(2))
			{
				;
			}
			else
			{
				break label_1;
			}

			jj_consume_token(10);

			TRAndNode jjtn001 = new TRAndNode(JJTANDNODE);
			boolean jjtc001 = true;

			jjtree.openNodeScope(jjtn001);

			try
			{
				logicalor();
			}
			catch (Throwable jjte001)
			{
				if (jjtc001)
				{
					jjtree.clearNodeScope(jjtn001);

					jjtc001 = false;
				}
				else
				{
					jjtree.popNode();
				}

				if (jjte001 instanceof RuntimeException)
				{
					{
						if (true)
						{
							throw (RuntimeException) jjte001;
						}
					}
				}

				if (jjte001 instanceof ParseException)
				{
					{
						if (true)
						{
							throw (ParseException) jjte001;
						}
					}
				}

				{
					if (true)
					{
						throw (Error) jjte001;
					}
				}
			}
			finally
			{
				if (jjtc001)
				{
					jjtree.closeNodeScope(jjtn001, 2);
				}
			}
		}
	}

	static final public void logicalor()
		throws ParseException
	{

		equalityexpression();

		label_2:
		while (true)
		{
			if (jj_2_2(2))
			{
				;
			}
			else
			{
				break label_2;
			}

			jj_consume_token(11);

			TROrNode jjtn001 = new TROrNode(JJTORNODE);
			boolean jjtc001 = true;

			jjtree.openNodeScope(jjtn001);

			try
			{
				equalityexpression();
			}
			catch (Throwable jjte001)
			{
				if (jjtc001)
				{
					jjtree.clearNodeScope(jjtn001);

					jjtc001 = false;
				}
				else
				{
					jjtree.popNode();
				}

				if (jjte001 instanceof RuntimeException)
				{
					{
						if (true)
						{
							throw (RuntimeException) jjte001;
						}
					}
				}

				if (jjte001 instanceof ParseException)
				{
					{
						if (true)
						{
							throw (ParseException) jjte001;
						}
					}
				}

				{
					if (true)
					{
						throw (Error) jjte001;
					}
				}
			}
			finally
			{
				if (jjtc001)
				{
					jjtree.closeNodeScope(jjtn001, 2);
				}
			}
		}
	}

	static final public void equalityexpression()
		throws ParseException
	{

		relationalexpression();

		label_3:
		while (true)
		{
			if (jj_2_3(2))
			{
				;
			}
			else
			{
				break label_3;
			}

			if (jj_2_4(2))
			{
				jj_consume_token(12);

				TREQNode jjtn001 = new TREQNode(JJTEQNODE);
				boolean jjtc001 = true;

				jjtree.openNodeScope(jjtn001);

				try
				{
					relationalexpression();
				}
				catch (Throwable jjte001)
				{
					if (jjtc001)
					{
						jjtree.clearNodeScope(jjtn001);

						jjtc001 = false;
					}
					else
					{
						jjtree.popNode();
					}

					if (jjte001 instanceof RuntimeException)
					{
						{
							if (true)
							{
								throw (RuntimeException) jjte001;
							}
						}
					}

					if (jjte001 instanceof ParseException)
					{
						{
							if (true)
							{
								throw (ParseException) jjte001;
							}
						}
					}

					{
						if (true)
						{
							throw (Error) jjte001;
						}
					}
				}
				finally
				{
					if (jjtc001)
					{
						jjtree.closeNodeScope(jjtn001, 2);
					}
				}
			}
			else if (jj_2_5(2))
			{
				jj_consume_token(13);

				TRNEQNode jjtn002 = new TRNEQNode(JJTNEQNODE);
				boolean jjtc002 = true;

				jjtree.openNodeScope(jjtn002);

				try
				{
					relationalexpression();
				}
				catch (Throwable jjte002)
				{
					if (jjtc002)
					{
						jjtree.clearNodeScope(jjtn002);

						jjtc002 = false;
					}
					else
					{
						jjtree.popNode();
					}

					if (jjte002 instanceof RuntimeException)
					{
						{
							if (true)
							{
								throw (RuntimeException) jjte002;
							}
						}
					}

					if (jjte002 instanceof ParseException)
					{
						{
							if (true)
							{
								throw (ParseException) jjte002;
							}
						}
					}

					{
						if (true)
						{
							throw (Error) jjte002;
						}
					}
				}
				finally
				{
					if (jjtc002)
					{
						jjtree.closeNodeScope(jjtn002, 2);
					}
				}
			}
			else
			{
				jj_consume_token(-1);

				throw new ParseException();
			}
		}
	}

	static final public void relationalexpression()
		throws ParseException
	{

		unaryexpression();

		label_4:
		while (true)
		{
			if (jj_2_6(2))
			{
				;
			}
			else
			{
				break label_4;
			}

			if (jj_2_7(2))
			{
				jj_consume_token(14);

				TRLTNode jjtn001 = new TRLTNode(JJTLTNODE);
				boolean jjtc001 = true;

				jjtree.openNodeScope(jjtn001);

				try
				{
					unaryexpression();
				}
				catch (Throwable jjte001)
				{
					if (jjtc001)
					{
						jjtree.clearNodeScope(jjtn001);

						jjtc001 = false;
					}
					else
					{
						jjtree.popNode();
					}

					if (jjte001 instanceof RuntimeException)
					{
						{
							if (true)
							{
								throw (RuntimeException) jjte001;
							}
						}
					}

					if (jjte001 instanceof ParseException)
					{
						{
							if (true)
							{
								throw (ParseException) jjte001;
							}
						}
					}

					{
						if (true)
						{
							throw (Error) jjte001;
						}
					}
				}
				finally
				{
					if (jjtc001)
					{
						jjtree.closeNodeScope(jjtn001, 2);
					}
				}
			}
			else if (jj_2_8(2))
			{
				jj_consume_token(15);

				TRGTNode jjtn002 = new TRGTNode(JJTGTNODE);
				boolean jjtc002 = true;

				jjtree.openNodeScope(jjtn002);

				try
				{
					unaryexpression();
				}
				catch (Throwable jjte002)
				{
					if (jjtc002)
					{
						jjtree.clearNodeScope(jjtn002);

						jjtc002 = false;
					}
					else
					{
						jjtree.popNode();
					}

					if (jjte002 instanceof RuntimeException)
					{
						{
							if (true)
							{
								throw (RuntimeException) jjte002;
							}
						}
					}

					if (jjte002 instanceof ParseException)
					{
						{
							if (true)
							{
								throw (ParseException) jjte002;
							}
						}
					}

					{
						if (true)
						{
							throw (Error) jjte002;
						}
					}
				}
				finally
				{
					if (jjtc002)
					{
						jjtree.closeNodeScope(jjtn002, 2);
					}
				}
			}
			else if (jj_2_9(2))
			{
				jj_consume_token(16);

				TRLENode jjtn003 = new TRLENode(JJTLENODE);
				boolean jjtc003 = true;

				jjtree.openNodeScope(jjtn003);

				try
				{
					unaryexpression();
				}
				catch (Throwable jjte003)
				{
					if (jjtc003)
					{
						jjtree.clearNodeScope(jjtn003);

						jjtc003 = false;
					}
					else
					{
						jjtree.popNode();
					}

					if (jjte003 instanceof RuntimeException)
					{
						{
							if (true)
							{
								throw (RuntimeException) jjte003;
							}
						}
					}

					if (jjte003 instanceof ParseException)
					{
						{
							if (true)
							{
								throw (ParseException) jjte003;
							}
						}
					}

					{
						if (true)
						{
							throw (Error) jjte003;
						}
					}
				}
				finally
				{
					if (jjtc003)
					{
						jjtree.closeNodeScope(jjtn003, 2);
					}
				}
			}
			else if (jj_2_10(2))
			{
				jj_consume_token(17);

				TRGENode jjtn004 = new TRGENode(JJTGENODE);
				boolean jjtc004 = true;

				jjtree.openNodeScope(jjtn004);

				try
				{
					unaryexpression();
				}
				catch (Throwable jjte004)
				{
					if (jjtc004)
					{
						jjtree.clearNodeScope(jjtn004);

						jjtc004 = false;
					}
					else
					{
						jjtree.popNode();
					}

					if (jjte004 instanceof RuntimeException)
					{
						{
							if (true)
							{
								throw (RuntimeException) jjte004;
							}
						}
					}

					if (jjte004 instanceof ParseException)
					{
						{
							if (true)
							{
								throw (ParseException) jjte004;
							}
						}
					}

					{
						if (true)
						{
							throw (Error) jjte004;
						}
					}
				}
				finally
				{
					if (jjtc004)
					{
						jjtree.closeNodeScope(jjtn004, 2);
					}
				}
			}
			else
			{
				jj_consume_token(-1);

				throw new ParseException();
			}
		}
	}

	static final public void unaryexpression()
		throws ParseException
	{

		if (jj_2_11(2))
		{
			jj_consume_token(18);

			TRNotNode jjtn001 = new TRNotNode(JJTNOTNODE);
			boolean jjtc001 = true;

			jjtree.openNodeScope(jjtn001);

			try
			{
				unaryexpression();
			}
			catch (Throwable jjte001)
			{
				if (jjtc001)
				{
					jjtree.clearNodeScope(jjtn001);

					jjtc001 = false;
				}
				else
				{
					jjtree.popNode();
				}

				if (jjte001 instanceof RuntimeException)
				{
					{
						if (true)
						{
							throw (RuntimeException) jjte001;
						}
					}
				}

				if (jjte001 instanceof ParseException)
				{
					{
						if (true)
						{
							throw (ParseException) jjte001;
						}
					}
				}

				{
					if (true)
					{
						throw (Error) jjte001;
					}
				}
			}
			finally
			{
				if (jjtc001)
				{
					jjtree.closeNodeScope(jjtn001, 1);
				}
			}
		}
		else if (jj_2_12(2))
		{
			primaryexpression();
		}
		else
		{
			jj_consume_token(-1);

			throw new ParseException();
		}
	}

	static final public void primaryexpression()
		throws ParseException
	{

		String name;

		if (jj_2_13(2))
		{
			Integer();
		}
		else if (jj_2_14(2))
		{
			Var();
		}
		else if (jj_2_15(2))
		{
			Evuvar();
		}
		else if (jj_2_16(2))
		{
			Evdvar();
		}
		else if (jj_2_17(2))
		{
			jj_consume_token(19);
			logicaland();
			jj_consume_token(20);
		}
		else
		{
			jj_consume_token(-1);

			throw new ParseException();
		}
	}

	static final public void Integer()
		throws ParseException
	{

		/* @bgen(jjtree) Integer */
		TRInteger jjtn000 = new TRInteger(JJTINTEGER);
		boolean jjtc000 = true;

		jjtree.openNodeScope(jjtn000);

		Token t;

		try
		{
			t = jj_consume_token(INTEGER);

			jjtree.closeNodeScope(jjtn000, true);

			jjtc000 = false;

			jjtn000.setName(t.image);
		}
		finally
		{
			if (jjtc000)
			{
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void Var()
		throws ParseException
	{

		/* @bgen(jjtree) Var */
		TRVar jjtn000 = new TRVar(JJTVAR);
		boolean jjtc000 = true;

		jjtree.openNodeScope(jjtn000);

		Token t;

		try
		{
			t = jj_consume_token(VAR);

			jjtree.closeNodeScope(jjtn000, true);

			jjtc000 = false;

			jjtn000.setName(t.image);
		}
		finally
		{
			if (jjtc000)
			{
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void Evuvar()
		throws ParseException
	{

		/* @bgen(jjtree) Evuvar */
		TREvuvar jjtn000 = new TREvuvar(JJTEVUVAR);
		boolean jjtc000 = true;

		jjtree.openNodeScope(jjtn000);

		Token t;

		try
		{
			t = jj_consume_token(EVUVAR);

			jjtree.closeNodeScope(jjtn000, true);

			jjtc000 = false;

			jjtn000.setName(t.image);
		}
		finally
		{
			if (jjtc000)
			{
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void Evdvar()
		throws ParseException
	{

		/* @bgen(jjtree) Evdvar */
		TREvdvar jjtn000 = new TREvdvar(JJTEVDVAR);
		boolean jjtc000 = true;

		jjtree.openNodeScope(jjtn000);

		Token t;

		try
		{
			t = jj_consume_token(EVDVAR);

			jjtree.closeNodeScope(jjtn000, true);

			jjtc000 = false;

			jjtn000.setName(t.image);
		}
		finally
		{
			if (jjtc000)
			{
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final private boolean jj_2_1(int xla)
	{

		jj_la = xla;
		jj_lastpos = jj_scanpos = token;

		boolean retval = !jj_3_1();

		jj_save(0, xla);

		return retval;
	}

	static final private boolean jj_2_2(int xla)
	{

		jj_la = xla;
		jj_lastpos = jj_scanpos = token;

		boolean retval = !jj_3_2();

		jj_save(1, xla);

		return retval;
	}

	static final private boolean jj_2_3(int xla)
	{

		jj_la = xla;
		jj_lastpos = jj_scanpos = token;

		boolean retval = !jj_3_3();

		jj_save(2, xla);

		return retval;
	}

	static final private boolean jj_2_4(int xla)
	{

		jj_la = xla;
		jj_lastpos = jj_scanpos = token;

		boolean retval = !jj_3_4();

		jj_save(3, xla);

		return retval;
	}

	static final private boolean jj_2_5(int xla)
	{

		jj_la = xla;
		jj_lastpos = jj_scanpos = token;

		boolean retval = !jj_3_5();

		jj_save(4, xla);

		return retval;
	}

	static final private boolean jj_2_6(int xla)
	{

		jj_la = xla;
		jj_lastpos = jj_scanpos = token;

		boolean retval = !jj_3_6();

		jj_save(5, xla);

		return retval;
	}

	static final private boolean jj_2_7(int xla)
	{

		jj_la = xla;
		jj_lastpos = jj_scanpos = token;

		boolean retval = !jj_3_7();

		jj_save(6, xla);

		return retval;
	}

	static final private boolean jj_2_8(int xla)
	{

		jj_la = xla;
		jj_lastpos = jj_scanpos = token;

		boolean retval = !jj_3_8();

		jj_save(7, xla);

		return retval;
	}

	static final private boolean jj_2_9(int xla)
	{

		jj_la = xla;
		jj_lastpos = jj_scanpos = token;

		boolean retval = !jj_3_9();

		jj_save(8, xla);

		return retval;
	}

	static final private boolean jj_2_10(int xla)
	{

		jj_la = xla;
		jj_lastpos = jj_scanpos = token;

		boolean retval = !jj_3_10();

		jj_save(9, xla);

		return retval;
	}

	static final private boolean jj_2_11(int xla)
	{

		jj_la = xla;
		jj_lastpos = jj_scanpos = token;

		boolean retval = !jj_3_11();

		jj_save(10, xla);

		return retval;
	}

	static final private boolean jj_2_12(int xla)
	{

		jj_la = xla;
		jj_lastpos = jj_scanpos = token;

		boolean retval = !jj_3_12();

		jj_save(11, xla);

		return retval;
	}

	static final private boolean jj_2_13(int xla)
	{

		jj_la = xla;
		jj_lastpos = jj_scanpos = token;

		boolean retval = !jj_3_13();

		jj_save(12, xla);

		return retval;
	}

	static final private boolean jj_2_14(int xla)
	{

		jj_la = xla;
		jj_lastpos = jj_scanpos = token;

		boolean retval = !jj_3_14();

		jj_save(13, xla);

		return retval;
	}

	static final private boolean jj_2_15(int xla)
	{

		jj_la = xla;
		jj_lastpos = jj_scanpos = token;

		boolean retval = !jj_3_15();

		jj_save(14, xla);

		return retval;
	}

	static final private boolean jj_2_16(int xla)
	{

		jj_la = xla;
		jj_lastpos = jj_scanpos = token;

		boolean retval = !jj_3_16();

		jj_save(15, xla);

		return retval;
	}

	static final private boolean jj_2_17(int xla)
	{

		jj_la = xla;
		jj_lastpos = jj_scanpos = token;

		boolean retval = !jj_3_17();

		jj_save(16, xla);

		return retval;
	}

	static final private boolean jj_3R_8()
	{

		Token xsp;

		xsp = jj_scanpos;

		if (jj_3_11())
		{
			jj_scanpos = xsp;

			if (jj_3_12())
			{
				return true;
			}

			if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
			{
				return false;
			}
		}
		else if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3_11()
	{

		if (jj_scan_token(18))
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		if (jj_3R_8())
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3R_11()
	{

		if (jj_scan_token(VAR))
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3_2()
	{

		if (jj_scan_token(11))
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		if (jj_3R_6())
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3_10()
	{

		if (jj_scan_token(17))
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		if (jj_3R_8())
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3_9()
	{

		if (jj_scan_token(16))
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		if (jj_3R_8())
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3_8()
	{

		if (jj_scan_token(15))
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		if (jj_3R_8())
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3_7()
	{

		if (jj_scan_token(14))
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		if (jj_3R_8())
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3_6()
	{

		Token xsp;

		xsp = jj_scanpos;

		if (jj_3_7())
		{
			jj_scanpos = xsp;

			if (jj_3_8())
			{
				jj_scanpos = xsp;

				if (jj_3_9())
				{
					jj_scanpos = xsp;

					if (jj_3_10())
					{
						return true;
					}

					if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
					{
						return false;
					}
				}
				else if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
				{
					return false;
				}
			}
			else if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
			{
				return false;
			}
		}
		else if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3R_10()
	{

		if (jj_scan_token(INTEGER))
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3R_7()
	{

		if (jj_3R_8())
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3_1()
	{

		if (jj_scan_token(10))
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		if (jj_3R_5())
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3_5()
	{

		if (jj_scan_token(13))
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		if (jj_3R_7())
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3_4()
	{

		if (jj_scan_token(12))
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		if (jj_3R_7())
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3_3()
	{

		Token xsp;

		xsp = jj_scanpos;

		if (jj_3_4())
		{
			jj_scanpos = xsp;

			if (jj_3_5())
			{
				return true;
			}

			if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
			{
				return false;
			}
		}
		else if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3R_6()
	{

		if (jj_3R_7())
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3R_5()
	{

		if (jj_3R_6())
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3_17()
	{

		if (jj_scan_token(19))
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		if (jj_3R_14())
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3R_13()
	{

		if (jj_scan_token(EVDVAR))
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3_16()
	{

		if (jj_3R_13())
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3_15()
	{

		if (jj_3R_12())
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3R_14()
	{

		if (jj_3R_5())
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3_14()
	{

		if (jj_3R_11())
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3R_9()
	{

		Token xsp;

		xsp = jj_scanpos;

		if (jj_3_13())
		{
			jj_scanpos = xsp;

			if (jj_3_14())
			{
				jj_scanpos = xsp;

				if (jj_3_15())
				{
					jj_scanpos = xsp;

					if (jj_3_16())
					{
						jj_scanpos = xsp;

						if (jj_3_17())
						{
							return true;
						}

						if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
						{
							return false;
						}
					}
					else if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
					{
						return false;
					}
				}
				else if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
				{
					return false;
				}
			}
			else if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
			{
				return false;
			}
		}
		else if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3_13()
	{

		if (jj_3R_10())
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3R_12()
	{

		if (jj_scan_token(EVUVAR))
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static final private boolean jj_3_12()
	{

		if (jj_3R_9())
		{
			return true;
		}

		if ((jj_la == 0) && (jj_scanpos == jj_lastpos))
		{
			return false;
		}

		return false;
	}

	static private boolean jj_initialized_once = false;
	static public TransitionParserTokenManager token_source;
	static ASCII_CharStream jj_input_stream;
	static public Token token, jj_nt;
	static private int jj_ntk;
	static private Token jj_scanpos, jj_lastpos;
	static private int jj_la;
	static public boolean lookingAhead = false;
	static private boolean jj_semLA;
	static private int jj_gen;
	static final private int[] jj_la1 = new int[0];
	static final private int[] jj_la1_0 = {};
	static final private JJCalls[] jj_2_rtns = new JJCalls[17];
	static private boolean jj_rescan = false;
	static private int jj_gc = 0;

	public TransitionParser(java.io.InputStream stream)
	{

		if (jj_initialized_once)
		{
			System.out.println("ERROR: Second call to constructor of static parser.  You must");
			System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");

			throw new Error();
		}

		jj_initialized_once = true;
		jj_input_stream = new ASCII_CharStream(stream, 1, 1);
		token_source = new TransitionParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;

		for (int i = 0; i < 0; i++)
		{
			jj_la1[i] = -1;
		}

		for (int i = 0; i < jj_2_rtns.length; i++)
		{
			jj_2_rtns[i] = new JJCalls();
		}
	}

	static public void ReInit(java.io.InputStream stream)
	{

		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);

		token = new Token();
		jj_ntk = -1;

		jjtree.reset();

		jj_gen = 0;

		for (int i = 0; i < 0; i++)
		{
			jj_la1[i] = -1;
		}

		for (int i = 0; i < jj_2_rtns.length; i++)
		{
			jj_2_rtns[i] = new JJCalls();
		}
	}

	public TransitionParser(java.io.Reader stream)
	{

		if (jj_initialized_once)
		{
			System.out.println("ERROR: Second call to constructor of static parser.  You must");
			System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");

			throw new Error();
		}

		jj_initialized_once = true;
		jj_input_stream = new ASCII_CharStream(stream, 1, 1);
		token_source = new TransitionParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;

		for (int i = 0; i < 0; i++)
		{
			jj_la1[i] = -1;
		}

		for (int i = 0; i < jj_2_rtns.length; i++)
		{
			jj_2_rtns[i] = new JJCalls();
		}
	}

	static public void ReInit(java.io.Reader stream)
	{

		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);

		token = new Token();
		jj_ntk = -1;

		jjtree.reset();

		jj_gen = 0;

		for (int i = 0; i < 0; i++)
		{
			jj_la1[i] = -1;
		}

		for (int i = 0; i < jj_2_rtns.length; i++)
		{
			jj_2_rtns[i] = new JJCalls();
		}
	}

	public TransitionParser(TransitionParserTokenManager tm)
	{

		if (jj_initialized_once)
		{
			System.out.println("ERROR: Second call to constructor of static parser.  You must");
			System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");

			throw new Error();
		}

		jj_initialized_once = true;
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;

		for (int i = 0; i < 0; i++)
		{
			jj_la1[i] = -1;
		}

		for (int i = 0; i < jj_2_rtns.length; i++)
		{
			jj_2_rtns[i] = new JJCalls();
		}
	}

	public void ReInit(TransitionParserTokenManager tm)
	{

		token_source = tm;
		token = new Token();
		jj_ntk = -1;

		jjtree.reset();

		jj_gen = 0;

		for (int i = 0; i < 0; i++)
		{
			jj_la1[i] = -1;
		}

		for (int i = 0; i < jj_2_rtns.length; i++)
		{
			jj_2_rtns[i] = new JJCalls();
		}
	}

	static final private Token jj_consume_token(int kind)
		throws ParseException
	{

		Token oldToken;

		if ((oldToken = token).next != null)
		{
			token = token.next;
		}
		else
		{
			token = token.next = token_source.getNextToken();
		}

		jj_ntk = -1;

		if (token.kind == kind)
		{
			jj_gen++;

			if (++jj_gc > 100)
			{
				jj_gc = 0;

				for (int i = 0; i < jj_2_rtns.length; i++)
				{
					JJCalls c = jj_2_rtns[i];

					while (c != null)
					{
						if (c.gen < jj_gen)
						{
							c.first = null;
						}

						c = c.next;
					}
				}
			}

			return token;
		}

		token = oldToken;
		jj_kind = kind;

		throw generateParseException();
	}

	static final private boolean jj_scan_token(int kind)
	{

		if (jj_scanpos == jj_lastpos)
		{
			jj_la--;

			if (jj_scanpos.next == null)
			{
				jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
			}
			else
			{
				jj_lastpos = jj_scanpos = jj_scanpos.next;
			}
		}
		else
		{
			jj_scanpos = jj_scanpos.next;
		}

		if (jj_rescan)
		{
			int i = 0;
			Token tok = token;

			while ((tok != null) && (tok != jj_scanpos))
			{
				i++;

				tok = tok.next;
			}

			if (tok != null)
			{
				jj_add_error_token(kind, i);
			}
		}

		return (jj_scanpos.kind != kind);
	}

	static final public Token getNextToken()
	{

		if (token.next != null)
		{
			token = token.next;
		}
		else
		{
			token = token.next = token_source.getNextToken();
		}

		jj_ntk = -1;

		jj_gen++;

		return token;
	}

	static final public Token getToken(int index)
	{

		Token t = lookingAhead
				  ? jj_scanpos
				  : token;

		for (int i = 0; i < index; i++)
		{
			if (t.next != null)
			{
				t = t.next;
			}
			else
			{
				t = t.next = token_source.getNextToken();
			}
		}

		return t;
	}

	static final private int jj_ntk()
	{

		if ((jj_nt = token.next) == null)
		{
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		}
		else
		{
			return (jj_ntk = jj_nt.kind);
		}
	}

	static private java.util.Vector jj_expentries = new java.util.Vector();
	static private int[] jj_expentry;
	static private int jj_kind = -1;
	static private int[] jj_lasttokens = new int[100];
	static private int jj_endpos;

	static private void jj_add_error_token(int kind, int pos)
	{

		if (pos >= 100)
		{
			return;
		}

		if (pos == jj_endpos + 1)
		{
			jj_lasttokens[jj_endpos++] = kind;
		}
		else if (jj_endpos != 0)
		{
			jj_expentry = new int[jj_endpos];

			for (int i = 0; i < jj_endpos; i++)
			{
				jj_expentry[i] = jj_lasttokens[i];
			}

			boolean exists = false;

			for (java.util.Enumeration enum = jj_expentries.elements(); enum.hasMoreElements(); )
			{
				int[] oldentry = (int[]) (enum.nextElement());

				if (oldentry.length == jj_expentry.length)
				{
					exists = true;

					for (int i = 0; i < jj_expentry.length; i++)
					{
						if (oldentry[i] != jj_expentry[i])
						{
							exists = false;

							break;
						}
					}

					if (exists)
					{
						break;
					}
				}
			}

			if (!exists)
			{
				jj_expentries.addElement(jj_expentry);
			}

			if (pos != 0)
			{
				jj_lasttokens[(jj_endpos = pos) - 1] = kind;
			}
		}
	}

	static final public ParseException generateParseException()
	{

		jj_expentries.removeAllElements();

		boolean[] la1tokens = new boolean[21];

		for (int i = 0; i < 21; i++)
		{
			la1tokens[i] = false;
		}

		if (jj_kind >= 0)
		{
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}

		for (int i = 0; i < 0; i++)
		{
			if (jj_la1[i] == jj_gen)
			{
				for (int j = 0; j < 32; j++)
				{
					if ((jj_la1_0[i] & (1 << j)) != 0)
					{
						la1tokens[j] = true;
					}
				}
			}
		}

		for (int i = 0; i < 21; i++)
		{
			if (la1tokens[i])
			{
				jj_expentry = new int[1];
				jj_expentry[0] = i;

				jj_expentries.addElement(jj_expentry);
			}
		}

		jj_endpos = 0;

		jj_rescan_token();
		jj_add_error_token(0, 0);

		int[][] exptokseq = new int[jj_expentries.size()][];

		for (int i = 0; i < jj_expentries.size(); i++)
		{
			exptokseq[i] = (int[]) jj_expentries.elementAt(i);
		}

		return new ParseException(token, exptokseq, tokenImage);
	}

	static final public void enable_tracing() {}

	static final public void disable_tracing() {}

	static final private void jj_rescan_token()
	{

		jj_rescan = true;

		for (int i = 0; i < 17; i++)
		{
			JJCalls p = jj_2_rtns[i];

			do
			{
				if (p.gen > jj_gen)
				{
					jj_la = p.arg;
					jj_lastpos = jj_scanpos = p.first;

					switch (i)
					{

					case 0 :
						jj_3_1();
						break;

					case 1 :
						jj_3_2();
						break;

					case 2 :
						jj_3_3();
						break;

					case 3 :
						jj_3_4();
						break;

					case 4 :
						jj_3_5();
						break;

					case 5 :
						jj_3_6();
						break;

					case 6 :
						jj_3_7();
						break;

					case 7 :
						jj_3_8();
						break;

					case 8 :
						jj_3_9();
						break;

					case 9 :
						jj_3_10();
						break;

					case 10 :
						jj_3_11();
						break;

					case 11 :
						jj_3_12();
						break;

					case 12 :
						jj_3_13();
						break;

					case 13 :
						jj_3_14();
						break;

					case 14 :
						jj_3_15();
						break;

					case 15 :
						jj_3_16();
						break;

					case 16 :
						jj_3_17();
						break;
					}
				}

				p = p.next;
			}
			while (p != null);
		}

		jj_rescan = false;
	}

	static final private void jj_save(int index, int xla)
	{

		JJCalls p = jj_2_rtns[index];

		while (p.gen > jj_gen)
		{
			if (p.next == null)
			{
				p = p.next = new JJCalls();

				break;
			}

			p = p.next;
		}

		p.gen = jj_gen + xla - jj_la;
		p.first = token;
		p.arg = xla;
	}

	static final class JJCalls
	{

		int gen;
		Token first;
		int arg;
		JJCalls next;
	}
}

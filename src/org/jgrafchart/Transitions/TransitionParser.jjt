options {
LOOKAHEAD=2;
STATIC = true;
MULTI = true;
NODE_PREFIX = "TR";
FORCE_LA_CHECK = true;
}


PARSER_BEGIN(TransitionParser)

package org.jgrafchart.Transitions;

import java.io.*;


public class TransitionParser {

    public static void main(String args[]) {
    System.out.println("Reading from string...");
    StringReader sr = new StringReader(args[0]);
    TransitionParser  parser = new  TransitionParser(sr);
   try {
      SimpleNode n = parser.Start();
      n.dump("");
//    System.out.println("Interpretation");
//    System.out.println(n.evaluate());
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
sr = new StringReader(args[0]);
   parser.ReInit(sr);
   try {
      SimpleNode n = parser.Start();
      n.dump("");
//    System.out.println("Interpretation");
//    System.out.println(n.evaluate());
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(TransitionParser)

SKIP :
{
	" "
|	"\t"
}

TOKEN :
{
        < EOL: "\n" >
}




TOKEN : /* Variable names */
{
	< VAR: ( <LETTER> )+ ( <DIGIT> | <LETTER> )* >
  |	< #LETTER: ["a"-"z", "A"-"Z", ".", "_"] >
  |	< #DIGIT: ["0"-"9"] >
}


TOKEN :
{
	< INTEGER: <DIGIT> (<DIGIT>)* >
}



TOKEN :
{
	< EVUVAR: "/" <VAR>>
|	< EVDVAR: "\\" <VAR>>
}

TRStart Start() : {}
{
  logicaland() <EOF>
  {return jjtThis; }
}


void logicaland() #void :
{ }
{
    logicalor() ( "&"  logicalor() #AndNode(2) )*
}

void logicalor() #void :
{}
{
     equalityexpression() ( "|"   equalityexpression() #OrNode(2) )*
}

void equalityexpression() #void :
{}
{
relationalexpression()
(
  "==" relationalexpression() #EQNode(2)
|
 "!=" relationalexpression() #NEQNode(2)
)*
}

void relationalexpression() #void :
{}
{
unaryexpression()
(
"<" unaryexpression() #LTNode(2)
|
  ">" unaryexpression() #GTNode(2)
| 
  "<=" unaryexpression() #LENode(2)
|
  ">=" unaryexpression() #GENode(2)
)*
}



void unaryexpression() #void :
{}
{
    "!" unaryexpression() #NotNode(1)
  | primaryexpression()
}

void primaryexpression() #void :
{
  String name;
}
{
Integer()
|
Var()
|
Evuvar() 
| 
Evdvar() 
| 
 "(" logicaland() ")"
}




void Integer() :
{
  Token t;
}
{
  t=<INTEGER>
  {
   jjtThis.setName(t.image);
  }
}


void Var() : 
{
  Token t;
}
{
  t=<VAR>
  {
  jjtThis.setName(t.image);
  }
}

void Evuvar() : 
{
  Token t;
}
{
  t=<EVUVAR>
  {
  jjtThis.setName(t.image);
  }
}

void Evdvar() : 
{
  Token t;
}
{
  t=<EVDVAR>
  {
  jjtThis.setName(t.image);
  }
}


 

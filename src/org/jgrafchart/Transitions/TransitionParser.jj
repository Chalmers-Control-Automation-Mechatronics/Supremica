/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. TransitionParser.jj */
/*@egen*/options {
LOOKAHEAD=2;
STATIC = true;                                  
FORCE_LA_CHECK = true;
}


PARSER_BEGIN(TransitionParser)

package org.jgrafchart.Transitions;

import java.io.*;


public class TransitionParser/*@bgen(jjtree)*/implements TransitionParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTTransitionParserState jjtree = new JJTTransitionParserState();

/*@egen*/

    public static void main(String args[]) {
    System.out.println("Reading from string...");
    StringReader sr = new StringReader(args[0]);
    TransitionParser  parser = new  TransitionParser(sr);
   try {
      SimpleNode n = parser.Start();
      n.dump("");
//    System.out.println("Interpretation");
//    System.out.println(n.evaluate());
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
sr = new StringReader(args[0]);
   parser.ReInit(sr);
   try {
      SimpleNode n = parser.Start();
      n.dump("");
//    System.out.println("Interpretation");
//    System.out.println(n.evaluate());
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(TransitionParser)

SKIP :
{
	" "
|	"\t"
}

TOKEN :
{
        < EOL: "\n" >
}




TOKEN : /* Variable names */
{
	< VAR: ( <LETTER> )+ ( <DIGIT> | <LETTER> )* >
  |	< #LETTER: ["a"-"z", "A"-"Z", ".", "_"] >
  |	< #DIGIT: ["0"-"9"] >
}


TOKEN :
{
	< INTEGER: <DIGIT> (<DIGIT>)* >
}



TOKEN :
{
	< EVUVAR: "/" <VAR>>
|	< EVDVAR: "\\" <VAR>>
}

TRStart Start() : {/*@bgen(jjtree) Start */
  TRStart jjtn000 = new TRStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  logicaland() <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void logicaland()       :
{ }
{
    logicalor() ( "&"/*@bgen(jjtree) #AndNode( 2) */
                       {
                         TRAndNode jjtn001 = new TRAndNode(JJTANDNODE);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*/  logicalor()/*@bgen(jjtree)*/
                       } catch (Throwable jjte001) {
                         if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           throw (RuntimeException)jjte001;
                         }
                         if (jjte001 instanceof ParseException) {
                           throw (ParseException)jjte001;
                         }
                         throw (Error)jjte001;
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                         }
                       }
/*@egen*/ )*
}

void logicalor()       :
{}
{
     equalityexpression() ( "|"/*@bgen(jjtree) #OrNode( 2) */
                                  {
                                    TROrNode jjtn001 = new TROrNode(JJTORNODE);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*/   equalityexpression()/*@bgen(jjtree)*/
                                  } catch (Throwable jjte001) {
                                    if (jjtc001) {
                                      jjtree.clearNodeScope(jjtn001);
                                      jjtc001 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte001 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte001;
                                    }
                                    if (jjte001 instanceof ParseException) {
                                      throw (ParseException)jjte001;
                                    }
                                    throw (Error)jjte001;
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  2);
                                    }
                                  }
/*@egen*/ )*
}

void equalityexpression()       :
{}
{
relationalexpression()
(
  "=="/*@bgen(jjtree) #EQNode( 2) */
       {
         TREQNode jjtn001 = new TREQNode(JJTEQNODE);
         boolean jjtc001 = true;
         jjtree.openNodeScope(jjtn001);
       }
       try {
/*@egen*/ relationalexpression()/*@bgen(jjtree)*/
       } catch (Throwable jjte001) {
         if (jjtc001) {
           jjtree.clearNodeScope(jjtn001);
           jjtc001 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte001 instanceof RuntimeException) {
           throw (RuntimeException)jjte001;
         }
         if (jjte001 instanceof ParseException) {
           throw (ParseException)jjte001;
         }
         throw (Error)jjte001;
       } finally {
         if (jjtc001) {
           jjtree.closeNodeScope(jjtn001,  2);
         }
       }
/*@egen*/
|
 "!="/*@bgen(jjtree) #NEQNode( 2) */
      {
        TRNEQNode jjtn002 = new TRNEQNode(JJTNEQNODE);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ relationalexpression()/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  2);
        }
      }
/*@egen*/
)*
}

void relationalexpression()       :
{}
{
unaryexpression()
(
"<"/*@bgen(jjtree) #LTNode( 2) */
    {
      TRLTNode jjtn001 = new TRLTNode(JJTLTNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/ unaryexpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/
|
  ">"/*@bgen(jjtree) #GTNode( 2) */
      {
        TRGTNode jjtn002 = new TRGTNode(JJTGTNODE);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ unaryexpression()/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  2);
        }
      }
/*@egen*/
| 
  "<="/*@bgen(jjtree) #LENode( 2) */
       {
         TRLENode jjtn003 = new TRLENode(JJTLENODE);
         boolean jjtc003 = true;
         jjtree.openNodeScope(jjtn003);
       }
       try {
/*@egen*/ unaryexpression()/*@bgen(jjtree)*/
       } catch (Throwable jjte003) {
         if (jjtc003) {
           jjtree.clearNodeScope(jjtn003);
           jjtc003 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte003 instanceof RuntimeException) {
           throw (RuntimeException)jjte003;
         }
         if (jjte003 instanceof ParseException) {
           throw (ParseException)jjte003;
         }
         throw (Error)jjte003;
       } finally {
         if (jjtc003) {
           jjtree.closeNodeScope(jjtn003,  2);
         }
       }
/*@egen*/
|
  ">="/*@bgen(jjtree) #GENode( 2) */
       {
         TRGENode jjtn004 = new TRGENode(JJTGENODE);
         boolean jjtc004 = true;
         jjtree.openNodeScope(jjtn004);
       }
       try {
/*@egen*/ unaryexpression()/*@bgen(jjtree)*/
       } catch (Throwable jjte004) {
         if (jjtc004) {
           jjtree.clearNodeScope(jjtn004);
           jjtc004 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte004 instanceof RuntimeException) {
           throw (RuntimeException)jjte004;
         }
         if (jjte004 instanceof ParseException) {
           throw (ParseException)jjte004;
         }
         throw (Error)jjte004;
       } finally {
         if (jjtc004) {
           jjtree.closeNodeScope(jjtn004,  2);
         }
       }
/*@egen*/
)*
}



void unaryexpression()       :
{}
{
    "!"/*@bgen(jjtree) #NotNode( 1) */
        {
          TRNotNode jjtn001 = new TRNotNode(JJTNOTNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/ unaryexpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  1);
          }
        }
/*@egen*/
  | primaryexpression()
}

void primaryexpression()       :
{
  String name;
}
{
Integer()
|
Var()
|
Evuvar() 
| 
Evdvar() 
| 
 "(" logicaland() ")"
}




void Integer() :
{/*@bgen(jjtree) Integer */
  TRInteger jjtn000 = new TRInteger(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Integer */
  try {
/*@egen*/
  t=<INTEGER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
   jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void Var() : 
{/*@bgen(jjtree) Var */
  TRVar jjtn000 = new TRVar(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Var */
  try {
/*@egen*/
  t=<VAR>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
  jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Evuvar() : 
{/*@bgen(jjtree) Evuvar */
  TREvuvar jjtn000 = new TREvuvar(JJTEVUVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Evuvar */
  try {
/*@egen*/
  t=<EVUVAR>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
  jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Evdvar() : 
{/*@bgen(jjtree) Evdvar */
  TREvdvar jjtn000 = new TREvdvar(JJTEVDVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Evdvar */
  try {
/*@egen*/
  t=<EVDVAR>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
  jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


 

<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (C) 2004-2023 Robi Malik

  This file is part of Waters.
  Waters is free software: you can redistribute it and/or modify it under
  the terms of the GNU General Public License as published by the Free 
  Software Foundation, either version 2 of the License, or(at your option)
  any later version.
  Waters is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
  details.
  You should have received a copy of the GNU General Public License along
  with Waters. If not, see <http://www.gnu.org/licenses/>.

  Linking Waters statically or dynamically with other modules is making a
  combined work based on Waters. Thus, the terms and conditions of the GNU
  General Public License cover the whole combination.
  In addition, as a special exception, the copyright holders of Waters give
  you permission to combine Waters with code included in the standard
  release of Supremica under the Supremica Software License Agreement (or
  modified versions of such code, with unchanged license). You may copy and
  distribute such a system following the terms of the GNU GPL for Waters and
  the licenses of the other code concerned.
  Note that people who make modified versions of Waters are not obligated to
  grant this special exception for their modified versions; it is their
  choice whether to do so. The GNU General Public License gives permission
  to release a modified version without this exception; this exception also
  makes it possible to release a modified version which carries forward this
  exception.
-->

<xs:schema
  targetNamespace="http://waters.sourceforge.net/xsd/des"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:B="http://waters.sourceforge.net/xsd/base"
  xmlns:D="http://waters.sourceforge.net/xsd/des"
  elementFormDefault="qualified"
  attributeFormDefault="unqualified"
  version="1.0">

<xs:import 
  namespace="http://waters.sourceforge.net/xsd/base"
  schemaLocation="waters-base.xsd"/>


<!-- ==================================================================== -->
<!-- Product DES                                                          -->
<!-- ==================================================================== -->

<xs:element name="ProductDES">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:DocumentType">
        <xs:sequence>
          <xs:element ref="D:EventList" minOccurs="0"/>
          <xs:element ref="D:AutomataList" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>


<!-- ==================================================================== -->
<!-- Events                                                               -->
<!-- ==================================================================== -->

<xs:element name="EventList">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:element ref="D:Event" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="Event">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:NamedType">
        <xs:sequence>
          <xs:element ref="B:AttributeMap" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="Kind" type="B:EventKind" use="required"/>
        <xs:attribute name="Observable" type="xs:boolean" default="true"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="EventRefList">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:element ref="D:EventRef" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="EventRef">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:NamedType"/>
    </xs:complexContent>
  </xs:complexType>
</xs:element>


<!-- ==================================================================== -->
<!-- Automata                                                             -->
<!-- ==================================================================== -->

<xs:element name="AutomataList">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:element ref="D:Automaton" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="Automaton">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:NamedType">
        <xs:sequence>
          <xs:element ref="D:EventRefList" minOccurs="0"/>
          <xs:element ref="D:StateList" minOccurs="0"/>
          <xs:element ref="D:TransitionList" minOccurs="0"/>
          <xs:element ref="B:AttributeMap" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="Kind" type="B:ComponentKind" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="StateList">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:element ref="D:State" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="State">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:NamedType">
        <xs:sequence>
          <xs:element ref="D:EventRefList" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="Initial" type="xs:boolean" default="false"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="TransitionList">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:element ref="D:Transition" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="Transition">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:attribute name="Source" type="xs:string" use="required"/>
        <xs:attribute name="Event" type="xs:string" use="required"/>
        <xs:attribute name="Target" type="xs:string" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>


<!-- ==================================================================== -->
<!-- CounterExample                                                       -->
<!-- ==================================================================== -->

<xs:complexType name="CounterExampleType">
  <xs:complexContent>
    <xs:extension base="B:DocumentType">
      <xs:sequence>
        <xs:element ref="D:AutomatonRefList" minOccurs="0"/>
        <xs:element ref="D:TraceList" minOccurs="1"/>
      </xs:sequence>
      <xs:attribute name="ProductDES" type="xs:string" use="required"/>
    </xs:extension>
  </xs:complexContent>
</xs:complexType>

<xs:element name="SafetyCounterExample">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="D:CounterExampleType"/>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="ConflictCounterExample">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="D:CounterExampleType">
        <xs:attribute name="Kind" type="D:ConflictKind" default="CONFLICT"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="CoobservabilityCounterExample">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="D:CounterExampleType"/>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="LoopCounterExample">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="D:CounterExampleType"/>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="DualCounterExample">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="D:CounterExampleType"/>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="TraceList">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:element ref="D:Trace" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>


<xs:element name="Trace">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:element ref="D:TraceStepList" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="Name" type="xs:string" default=""/>
        <xs:attribute name="LoopIndex" type="xs:int" default="-1"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="AutomatonRefList">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:element ref="D:AutomatonRef" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="TraceStepList">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:element ref="D:FirstTraceStateTuple" minOccurs="0"/>
          <xs:sequence maxOccurs="unbounded">
            <xs:element ref="D:EventRef"/>
            <xs:element ref="D:NextTraceStateTuple" minOccurs="0"/>
          </xs:sequence>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>


<xs:element name="AutomatonRef">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:NamedType"/>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:complexType name="TraceStateTupleType">
  <xs:complexContent>
    <xs:extension base="B:ElementType">
      <xs:sequence>
        <xs:element ref="D:TraceState" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:extension>
  </xs:complexContent>
</xs:complexType>

<xs:element name="FirstTraceStateTuple">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="D:TraceStateTupleType"/>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="NextTraceStateTuple">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="D:TraceStateTupleType"/>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="TraceState">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:attribute name="Automaton" type="xs:string" use="required"/>
        <xs:attribute name="State" type="xs:string" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:simpleType name="ConflictKind">
  <xs:restriction base="xs:string">
    <xs:enumeration value="CONFLICT"/>
    <xs:enumeration value="DEADLOCK"/>
    <xs:enumeration value="LIVELOCK"/>
  </xs:restriction>
</xs:simpleType>


</xs:schema>

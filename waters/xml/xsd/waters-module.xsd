<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (C) 2004-2020 Robi Malik

  This file is part of Waters.
  Waters is free software: you can redistribute it and/or modify it under
  the terms of the GNU General Public License as published by the Free 
  Software Foundation, either version 2 of the License, or(at your option)
  any later version.
  Waters is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
  details.
  You should have received a copy of the GNU General Public License along
  with Waters. If not, see <http://www.gnu.org/licenses/>.

  Linking Waters statically or dynamically with other modules is making a
  combined work based on Waters. Thus, the terms and conditions of the GNU
  General Public License cover the whole combination.
  In addition, as a special exception, the copyright holders of Waters give
  you permission to combine Waters with code included in the standard
  release of Supremica under the Supremica Software License Agreement (or
  modified versions of such code, with unchanged license). You may copy and
  distribute such a system following the terms of the GNU GPL for Waters and
  the licenses of the other code concerned.
  Note that people who make modified versions of Waters are not obligated to
  grant this special exception for their modified versions; it is their
  choice whether to do so. The GNU General Public License gives permission
  to release a modified version without this exception; this exception also
  makes it possible to release a modified version which carries forward this
  exception.
-->

<xs:schema
  targetNamespace="http://waters.sourceforge.net/xsd/module"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:B="http://waters.sourceforge.net/xsd/base"
  xmlns:M="http://waters.sourceforge.net/xsd/module"
  elementFormDefault="qualified"
  attributeFormDefault="unqualified"
  version="1.0">

<xs:import
  namespace="http://waters.sourceforge.net/xsd/base"
  schemaLocation="waters-base.xsd"/>



<!-- ==================================================================== -->
<!-- ModuleSequence                                                       -->
<!-- ==================================================================== -->

<xs:element name="ModuleSequence">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:DocumentType">
        <xs:sequence>
          <xs:element ref="M:Module" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>


<!-- ==================================================================== -->
<!-- Module                                                               -->
<!-- ==================================================================== -->

<xs:element name="Module">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:DocumentType">
        <xs:sequence>
          <xs:element ref="M:ConstantAliasList" minOccurs="0"/>
          <xs:element ref="M:EventDeclList" minOccurs="0"/>
          <xs:element ref="M:EventAliasList" minOccurs="0"/>
          <xs:element ref="M:ComponentList" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>


<!-- ==================================================================== -->
<!-- Parameters                                                           -->
<!-- ==================================================================== -->

<xs:simpleType name="ScopeKind">
  <xs:restriction base="xs:string">
    <xs:enumeration value="LOCAL"/>
    <xs:enumeration value="OPTIONAL_PARAMETER"/>
    <xs:enumeration value="REQUIRED_PARAMETER"/>
  </xs:restriction>
</xs:simpleType>


<!-- ==================================================================== -->
<!-- Aliases                                                              -->
<!-- ==================================================================== -->

<xs:element name="ConstantAliasList">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:element ref="M:ConstantAlias" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="ConstantAlias">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="M:IdentifiedType">
        <xs:sequence>
          <xs:element ref="M:ConstantAliasExpression"/>
        </xs:sequence>
        <xs:attribute name="Scope" type="M:ScopeKind" default="LOCAL"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="ConstantAliasExpression">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:group ref="M:ArithmeticOrRangeExpression"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="EventAliasList">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:group ref="M:EventAliasListEntry" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:group name="EventAliasListEntry">
  <xs:choice>
    <xs:element ref="M:EventAlias"/>
    <xs:element ref="M:ForeachEventAlias"/>
  </xs:choice>
</xs:group>

<xs:element name="EventAlias">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="M:IdentifiedType">
        <xs:sequence>
          <xs:element ref="M:EventListExpression"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="ForeachEventAlias">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="M:ForeachType">
        <xs:sequence>
          <xs:element ref="M:EventAliasList" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>


<!-- ==================================================================== -->
<!-- Event Declarations                                                   -->
<!-- ==================================================================== -->

<xs:element name="EventDeclList">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:element ref="M:EventDecl" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="EventDecl">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="M:IdentifiedType">
        <xs:sequence>
          <xs:element ref="M:RangeList" minOccurs="0"/>
          <xs:element name="Comment" type="xs:string" minOccurs="0"/>
          <xs:element ref="M:ColorGeometry" minOccurs="0"/>
          <xs:element ref="B:AttributeMap" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="Kind" type="B:EventKind" use="required"/>
        <xs:attribute name="Observable" type="xs:boolean" default="true"/>
        <xs:attribute name="Scope" type="M:ScopeKind" default="LOCAL"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="RangeList">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:group ref="M:RangeExpression" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>


<!-- ==================================================================== -->
<!-- Event Lists                                                          -->
<!-- ==================================================================== -->

<xs:complexType name="ExpressionType">
  <xs:complexContent>
    <xs:extension base="B:ElementType"/>
  </xs:complexContent>
</xs:complexType>

<xs:element name="EventListExpression">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="M:ExpressionType">
        <xs:sequence>
          <xs:element ref="M:EventList" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="Unpack" type="xs:boolean" default="false"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="EventList" type="M:EventListType"/>

<xs:complexType name="EventListType">
  <xs:complexContent>
    <xs:extension base="B:ElementType">
      <xs:sequence>
        <xs:group ref="M:EventListEntry" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:extension>
  </xs:complexContent>
</xs:complexType>

<xs:group name="EventListEntry">
  <xs:choice>
    <xs:group ref="M:Identifier"/>
    <xs:element ref="M:ForeachEvent"/>
  </xs:choice>
</xs:group>

<xs:element name="ForeachEvent">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="M:ForeachType">
        <xs:sequence>
          <xs:element ref="M:EventList" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:group name="Expression">
  <xs:choice>
    <xs:group ref="M:SimpleExpression"/>
    <xs:element ref="M:EventListExpression"/>
  </xs:choice>
</xs:group>


<!-- ==================================================================== -->
<!-- Components                                                           -->
<!-- ==================================================================== -->

<xs:element name="ComponentList">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:group ref="M:ComponentListEntry" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:group name="ComponentListEntry">
  <xs:choice>
    <xs:element ref="M:SimpleComponent"/>
    <xs:element ref="M:VariableComponent"/>
    <xs:element ref="M:Instance"/>
    <xs:element ref="M:ForeachComponent"/>
  </xs:choice>
</xs:group>

<xs:element name="SimpleComponent">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="M:IdentifiedType">
        <xs:sequence>
          <xs:element ref="M:Graph"/>
          <xs:element ref="B:AttributeMap" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="Kind" type="B:ComponentKind" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="VariableComponent">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="M:IdentifiedType">
        <xs:sequence>
          <xs:element ref="M:VariableRange"/>
          <xs:element ref="M:VariableInitial"/>
          <xs:element ref="M:VariableMarking"
		      minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="Deterministic" type="xs:boolean" default="true"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="VariableRange">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:group ref="M:RangeExpression"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="VariableInitial">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:group ref="M:ArithmeticExpression"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>
 
<xs:element name="VariableMarking">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:group ref="M:ArithmeticExpression" minOccurs="2" maxOccurs="2"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="Instance">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="M:IdentifiedType">
        <xs:sequence>
          <xs:element ref="M:ParameterBinding"
		      minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="ModuleName" type="xs:string" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="ParameterBinding">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:NamedType">
        <xs:sequence>
          <xs:group ref="M:Expression"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="ForeachComponent">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="M:ForeachType">
        <xs:sequence>
          <xs:element ref="M:ComponentList" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>


<!-- ==================================================================== -->
<!-- Graph                                                                -->
<!-- ==================================================================== -->

<xs:element name="Graph">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:element ref="M:LabelBlock" minOccurs="0"/>
          <xs:element ref="M:NodeList" minOccurs="0"/>
          <xs:element ref="M:EdgeList" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="Deterministic" type="xs:boolean" default="true"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="NodeList">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:group ref="M:NodeListEntry" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="EdgeList">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:element ref="M:Edge" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:group name="NodeListEntry">
  <xs:choice>
    <xs:element ref="M:SimpleNode"/>
    <xs:element ref="M:GroupNode"/>
  </xs:choice>
</xs:group>

<xs:complexType name="NodeType">
  <xs:complexContent>
    <xs:extension base="B:NamedType">
      <xs:sequence>
        <xs:element ref="M:EventList" minOccurs="0"/>
        <xs:element ref="B:AttributeMap" minOccurs="0"/>
      </xs:sequence>
    </xs:extension>
  </xs:complexContent>
</xs:complexType>

<xs:element name="SimpleNode">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="M:NodeType">
        <xs:sequence>
          <xs:element ref="M:PointGeometry" minOccurs="0"/>
          <xs:element ref="M:InitialArrowGeometry" minOccurs="0"/>
          <xs:element ref="M:LabelGeometry" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="Initial" type="xs:boolean" default="false"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="GroupNode">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="M:NodeType">
        <xs:sequence>
          <xs:element ref="M:NodeRef" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="M:BoxGeometry" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="NodeRef">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:NamedType"/>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="Edge">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:element ref="M:LabelBlock" minOccurs="0"/>
          <xs:element ref="M:StartPointGeometry" minOccurs="0"/>
          <xs:element ref="M:SplineGeometry" minOccurs="0"/>
          <xs:element ref="M:EndPointGeometry" minOccurs="0"/>
          <xs:element ref="M:GuardActionBlock" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="Source" type="xs:string" use="required"/>
        <xs:attribute name="Target" type="xs:string" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="LabelBlock">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="M:EventListType">
        <xs:sequence>
          <xs:element ref="M:LabelGeometry" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="GuardActionBlock">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:element ref="M:Guards" minOccurs="0"/>
          <xs:element ref="M:Actions" minOccurs="0"/>
          <xs:element ref="M:LabelGeometry" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="Guards">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
	  <xs:group ref="M:SimpleExpression" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="Actions">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:element ref="M:BinaryExpression" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>


<!-- ==================================================================== -->
<!-- Geometry                                                             -->
<!-- ==================================================================== -->

<xs:complexType name="PointGeometryType">
  <xs:complexContent>
    <xs:extension base="B:ElementType">
      <xs:sequence>
        <xs:element ref="M:Point"/>
      </xs:sequence>
    </xs:extension>
  </xs:complexContent>
</xs:complexType>

<xs:element name="PointGeometry" type="M:PointGeometryType"/>
<xs:element name="StartPointGeometry" type="M:PointGeometryType"/>
<xs:element name="InitialArrowGeometry" type="M:PointGeometryType"/>
<xs:element name="EndPointGeometry" type="M:PointGeometryType"/>

<xs:element name="BoxGeometry">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:element ref="M:Box"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="LabelGeometry">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:element ref="M:Point"/>
        </xs:sequence>
        <xs:attribute name="Anchor" type="M:AnchorPosition" default="SW"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="SplineGeometry">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:element ref="M:Point" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute
          name="Kind" type="M:SplineKind" default="INTERPOLATING"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="ColorGeometry">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:sequence>
          <xs:element ref="M:Color"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="Point">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
	<xs:attribute name="X" type="xs:int" use="required"/>
	<xs:attribute name="Y" type="xs:int" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="Box">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:attribute name="X" type="xs:int" use="required"/>
        <xs:attribute name="Y" type="xs:int" use="required"/>
        <xs:attribute name="Width" type="xs:int" use="required"/>
        <xs:attribute name="Height" type="xs:int" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:simpleType name="AnchorPosition">
  <xs:restriction base="xs:string">
    <xs:enumeration value="NW"/>
    <xs:enumeration value="N"/>
    <xs:enumeration value="NE"/>
    <xs:enumeration value="W"/>
    <xs:enumeration value="C"/>
    <xs:enumeration value="E"/>
    <xs:enumeration value="SW"/>
    <xs:enumeration value="S"/>
    <xs:enumeration value="SE"/>
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="SplineKind">
  <xs:restriction base="xs:string">
    <xs:enumeration value="INTERPOLATING"/>
    <xs:enumeration value="BEZIER"/>
  </xs:restriction>
</xs:simpleType>

<xs:element name="Color">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="B:ElementType">
        <xs:attribute name="Red" type="xs:int" use="required"/>
        <xs:attribute name="Green" type="xs:int" use="required"/>
        <xs:attribute name="Blue" type="xs:int" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>


<!-- ==================================================================== -->
<!-- Expressions                                                          -->
<!-- ==================================================================== -->

<xs:complexType name="SimpleExpressionType">
  <xs:complexContent>
    <xs:extension base="M:ExpressionType">
      <xs:attribute name="Text" type="xs:string"/>
    </xs:extension>
  </xs:complexContent>
</xs:complexType>

<xs:group name="SimpleExpression">
  <xs:choice>
    <xs:element ref="M:SimpleIdentifier"/>
    <xs:element ref="M:IndexedIdentifier"/>
    <xs:element ref="M:QualifiedIdentifier"/>
    <xs:element ref="M:IntConstant"/>
    <xs:element ref="M:UnaryExpression"/>
    <xs:element ref="M:BinaryExpression"/>
    <xs:element ref="M:FunctionCallExpression"/>
    <xs:element ref="M:EnumSetExpression"/>
  </xs:choice>
</xs:group>

<xs:group name="Identifier">
  <xs:choice>
    <xs:element ref="M:SimpleIdentifier"/>
    <xs:element ref="M:IndexedIdentifier"/>
    <xs:element ref="M:QualifiedIdentifier"/>
  </xs:choice>
</xs:group>

<xs:group name="RangeExpression">
  <xs:choice>
    <xs:element ref="M:SimpleIdentifier"/>
    <xs:element ref="M:BinaryExpression"/>
    <xs:element ref="M:EnumSetExpression"/>
  </xs:choice>
</xs:group>

<xs:group name="ArithmeticExpression">
  <xs:choice>
    <xs:element ref="M:IntConstant"/>
    <xs:element ref="M:SimpleIdentifier"/>
    <xs:element ref="M:IndexedIdentifier"/>
    <xs:element ref="M:QualifiedIdentifier"/>
    <xs:element ref="M:UnaryExpression"/>
    <xs:element ref="M:BinaryExpression"/>
    <xs:element ref="M:FunctionCallExpression"/>
  </xs:choice>
</xs:group>

<xs:group name="ArithmeticOrRangeExpression">
  <xs:choice>
    <xs:element ref="M:SimpleIdentifier"/>
    <xs:element ref="M:QualifiedIdentifier"/>
    <xs:element ref="M:IntConstant"/>
    <xs:element ref="M:UnaryExpression"/>
    <xs:element ref="M:BinaryExpression"/>
    <xs:element ref="M:FunctionCallExpression"/>
    <xs:element ref="M:EnumSetExpression"/>
  </xs:choice>
</xs:group>

<xs:complexType name="IdentifierType">
  <xs:complexContent>
    <xs:extension base="M:SimpleExpressionType"/>
  </xs:complexContent>
</xs:complexType>

<xs:element name="SimpleIdentifier">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="M:IdentifierType">
        <xs:attribute name="Name" type="xs:string" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="IndexedIdentifier">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="M:IdentifierType">
        <xs:sequence>
          <xs:group ref="M:ArithmeticExpression"
                    minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="Name" type="xs:string" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="QualifiedIdentifier">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="M:IdentifierType">
        <xs:sequence>
          <xs:group ref="M:Identifier" minOccurs="2" maxOccurs="2"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="IntConstant">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="M:SimpleExpressionType">
        <xs:attribute name="Value" type="xs:int" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="UnaryExpression">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="M:SimpleExpressionType">
        <xs:sequence>
          <xs:group ref="M:ArithmeticExpression"/>
        </xs:sequence>
        <xs:attribute name="Operator" type="M:UnaryOperator" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="BinaryExpression">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="M:SimpleExpressionType">
        <xs:sequence>
          <xs:group ref="M:ArithmeticExpression" minOccurs="2" maxOccurs="2"/>
        </xs:sequence>
        <xs:attribute name="Operator" type="M:BinaryOperator" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="FunctionCallExpression">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="M:SimpleExpressionType">
        <xs:sequence>
          <xs:group ref="M:ArithmeticExpression"
                    minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="FunctionName" type="xs:string" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:element name="EnumSetExpression">
  <xs:complexType>
    <xs:complexContent>
      <xs:extension base="M:SimpleExpressionType">
        <xs:sequence>
          <xs:element ref="M:SimpleIdentifier"
                      minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:element>

<xs:simpleType name="UnaryOperator">
  <xs:restriction base="xs:string">
    <xs:enumeration value="-"/>
    <xs:enumeration value="!"/>
    <xs:enumeration value="'"/>
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="BinaryOperator">
  <xs:restriction base="xs:string">
    <xs:enumeration value="+"/>
    <xs:enumeration value="-"/>
    <xs:enumeration value="*"/>
    <xs:enumeration value="/"/>
    <xs:enumeration value="%"/>
    <xs:enumeration value="=="/>
    <xs:enumeration value="&lt;"/>
    <xs:enumeration value="&lt;="/>
    <xs:enumeration value="&gt;"/>
    <xs:enumeration value="&gt;="/>
    <xs:enumeration value="!="/>
    <xs:enumeration value="&amp;"/>
    <xs:enumeration value="|"/>
    <xs:enumeration value="!"/>
    <xs:enumeration value=".."/>
    <xs:enumeration value="="/>
    <xs:enumeration value="+="/>
    <xs:enumeration value="-="/>
    <xs:enumeration value="&amp;="/>
    <xs:enumeration value="|="/>
  </xs:restriction>
</xs:simpleType>


<!-- ==================================================================== -->
<!-- Types                                                                -->
<!-- ==================================================================== -->

<xs:complexType name="ForeachType">
  <xs:complexContent>
    <xs:extension base="B:NamedType">
      <xs:sequence>
        <xs:group ref="M:ArithmeticOrRangeExpression" maxOccurs="2"/>
      </xs:sequence>
    </xs:extension>
  </xs:complexContent>
</xs:complexType>

<xs:complexType name="IdentifiedType">
  <xs:complexContent>
    <xs:extension base="B:ElementType">
      <xs:sequence>
        <xs:group ref="M:Identifier" minOccurs="0"/>
      </xs:sequence>
      <xs:attribute name="Name" type="xs:string"/>
    </xs:extension>
  </xs:complexContent>
</xs:complexType>


</xs:schema>

//# This may look like C code, but it really is -*- C++ -*-
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//# Source: $INPUTFILE$
//###########################################################################
//# Copyright (C) 2004-2017 Robi Malik
//###########################################################################
//# This file is part of Waters.
//# Waters is free software: you can redistribute it and/or modify it under
//# the terms of the GNU General Public License as published by the Free
//# Software Foundation, either version 2 of the License, or (at your option)
//# any later version.
//# Waters is distributed in the hope that it will be useful, but WITHOUT ANY
//# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
//# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
//# details.
//# You should have received a copy of the GNU General Public License along
//# with Waters. If not, see <http://www.gnu.org/licenses/>.
//#
//# Linking Waters statically or dynamically with other modules is making a
//# combined work based on Waters. Thus, the terms and conditions of the GNU
//# General Public License cover the whole combination.
//# In addition, as a special exception, the copyright holders of Waters give
//# you permission to combine Waters with code included in the standard
//# release of Supremica under the Supremica Software License Agreement (or
//# modified versions of such code, with unchanged license). You may copy and
//# distribute such a system following the terms of the GNU GPL for Waters and
//# the licenses of the other code concerned.
//# Note that people who make modified versions of Waters are not obligated to
//# grant this special exception for their modified versions; it is their
//# choice whether to do so. The GNU General Public License gives permission
//# to release a modified version without this exception; this exception also
//# makes it possible to release a modified version which carries forward this
//# exception.
//###########################################################################

#ifndef _$CPPCLASSNAME_h_
#define _$CPPCLASSNAME_h_

#ifdef __GNUG__
#pragma interface
#endif

#if _MSC_VER >= 1000
#pragma once
#endif

#include <jni.h>

$IF-HASBASECLASS
#include "jni/glue/$CPPBASECLASSNAME.h"
$ELSE
#include "jni/cache/ObjectBase.h"
$ENDIF
$FOREACH-INCLUDEDGLUE
$IF-ENUM
#include "jni/glue/$CPPCLASSNAME.h"
$ENDIF
$ENDFOR


namespace jni {

class ClassCache;
$FOREACH-INCLUDEDGLUE
$IF-ENUM$ELSE
class $CPPCLASSNAME;
$ENDIF
$ENDFOR


$IF-ENUM
//############################################################################
//# enum $CLASSNAME$
//############################################################################

enum $CLASSNAME$ {
  $CLASSNAME_null = -1,
$FOREACH-FIELD
  $CLASSNAME_$FIELDNAME$ = $INDEX$COMMA$
$ENDFOR
};


$ENDIF
//############################################################################
//# class $CPPCLASSNAME$
//############################################################################

class $CPPCLASSNAME$ : $=
  public $IF-HASBASECLASS $CPPBASECLASSNAME $ELSE ObjectBase$ENDIF$
{
public:
$IF-ENUM
  //##########################################################################
  //# Enumeration Type Conversion
  static $CLASSNAME$ toEnum(jobject javaobject, ClassCache* cache);
  static jobject toJavaObject($CLASSNAME$ item, ClassCache* cache);

$ENDIF
  //##########################################################################
  //# Constructors
  explicit $CPPCLASSNAME(jobject javaobject,
           $CSPC       $ ClassCache* cache,
           $CSPC       $ bool global = false);
  $CPPCLASSNAME(const $CPPCLASSNAME& partner);
$IF-ENUM
  explicit $CPPCLASSNAME($CLASSNAME$ item, ClassCache* cache);
$ENDIF
$FOREACH-CONSTRUCTOR
  explicit $CPPCLASSNAME($FOREACH-ARG$=
                         $IF-ENUM$=
                           $JAVATYPENAME$=
                         $ELSEIF-GLUE$=
                           const $GLUETYPENAME*$=
                         $ELSE$=
                           $CPPTYPENAME$=
                         $ENDIF$ $ARGNAME,
           $CSPC       $ $ENDFOR$=
                         ClassCache* cache);
$ENDFOR
$IF-HASVIRTUALMETHODS

  //##########################################################################
  //# Java Member Functions
$FOREACH-VIRTUALMETHOD
  $CPPTYPENAME$ $METHODNAME($FOREACH-ARG$=
                            $IF-GLUE const $ENDIF$=
                            $GLUETYPENAME$IF-GLUE*$ENDIF$ $ARGNAME $IF-HASNEXT,
  $TSPC       $ $MSPC     $ $ENDIF $ENDFOR) const;
$IF-GLUE
  $IF-ENUM $JAVATYPENAME $ELSE $GLUETYPENAME $ENDIF$ $=
  $METHODNAME Glue($FOREACH-ARG$=
                                  $IF-GLUE const $ENDIF$=
                                    $GLUETYPENAME $IF-GLUE*$ENDIF$ $ARGNAME,
  $^IF-ENUM $^JSPC $^ELSE $^GSPC $^ENDIF$=
               $ $MSPC      $     $ENDFOR$=
                                  ClassCache* cache) const;
$ENDIF
$ENDFOR
$ENDIF
$IF-HASSTATICMETHODS

  //##########################################################################
  //# Java Static Functions
$FOREACH-STATICMETHOD
  static $CPPTYPENAME$ $METHODNAME($FOREACH-ARG$=
				   $IF-GLUE const $ENDIF$=
				   $GLUETYPENAME$IF-GLUE*$ENDIF$ $ARGNAME,
         $TSPC       $ $MSPC     $ $ENDFOR$=
                                   ClassCache* cache);
$IF-GLUE
  static $IF-ENUM $JAVATYPENAME $ELSE $GLUETYPENAME $ENDIF$ $=
  $METHODNAME Glue($FOREACH-ARG$=
                                  $IF-GLUE const $ENDIF$=
                                    $GLUETYPENAME $IF-GLUE*$ENDIF$ $ARGNAME,
  $^IF-ENUM $^JSPC $^ELSE $^GSPC $^ENDIF$=
                      $ $MSPC      $     $ENDFOR$=
                                  ClassCache* cache);
$ENDIF
$ENDFOR
$ENDIF
$IF-HASSUBCLASSES

protected:
  //##########################################################################
  //# Protected Constructors
  explicit $CPPCLASSNAME(uint32_t classcode, ClassCache* cache);
  explicit $CPPCLASSNAME(jobject javaobject,
           $CSPC       $ uint32_t classcode,
           $CSPC       $ ClassCache* cache,
           $CSPC       $ bool global = false);
$ENDIF
};

}   /* namespace jni */

#endif  /* !_$CPPCLASSNAME_h_ */

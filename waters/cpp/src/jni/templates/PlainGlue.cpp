//# -*- indent-tabs-mode: nil -*-
//###########################################################################
//# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY A SCRIPT.
//# DO NOT EDIT.
//# Source: $INPUTFILE$
//###########################################################################
//# Copyright (C) 2004-2015 Robi Malik
//###########################################################################
//# This file is part of Waters.
//# Waters is free software: you can redistribute it and/or modify it under
//# the terms of the GNU General Public License as published by the Free
//# Software Foundation, either version 2 of the License, or (at your option)
//# any later version.
//# Waters is distributed in the hope that it will be useful, but WITHOUT ANY
//# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
//# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
//# details.
//# You should have received a copy of the GNU General Public License along
//# with Waters. If not, see <http://www.gnu.org/licenses/>.
//#
//# Linking Waters statically or dynamically with other modules is making a
//# combined work based on Waters. Thus, the terms and conditions of the GNU
//# General Public License cover the whole combination.
//# In addition, as a special exception, the copyright holders of Waters give
//# you permission to combine Waters with code included in the standard
//# release of Supremica under the Supremica Software License Agreement (or
//# modified versions of such code, with unchanged license). You may copy and
//# distribute such a system following the terms of the GNU GPL for Waters and
//# the licenses of the other code concerned.
//# Note that people who make modified versions of Waters are not obligated to
//# grant this special exception for their modified versions; it is their
//# choice whether to do so. The GNU General Public License gives permission
//# to release a modified version without this exception; this exception also
//# makes it possible to release a modified version which carries forward this
//# exception.
//###########################################################################

#ifdef __GNUG__
#pragma implementation
#endif

$IF-HASCONSTRUCTORS
#include "jni/cache/ClassCache.h"
$ELSEIF-HASGLUERESULTS
#include "jni/cache/ClassCache.h"
$ELSEIF-ENUM
#include "jni/cache/ClassCache.h"
$ENDIF
#include "jni/cache/ClassGlue.h"
#include "jni/glue/Glue.h"
#include "jni/glue/$CPPCLASSNAME.h"
$FOREACH-INCLUDEDGLUE
$IF-ENUM$ELSE
#include "jni/glue/$CPPCLASSNAME.h"
$ENDIF
$ENDFOR

namespace jni {


//###########################################################################
//# Class $CPPCLASSNAME$
//###########################################################################

$IF-ENUM
//############################################################################
//# $CPPCLASSNAME: Enumeration Type Conversion

$CLASSNAME$ $CPPCLASSNAME::
toEnum(jobject javaobject, ClassCache* cache)
{
  if (javaobject == NULL) {
    return $CLASSNAME_null;
  }
  ClassGlue* cls = cache->getClass(CLASS_$CLASSNAME);
  JNIEnv* env = cls->getEnvironment();
  jmethodID mid = cls->getMethodID(METHOD_Object_equals_0);
  for (uint32_t fieldcode = 0; fieldcode < $NUMFIELDS; fieldcode++) {
    jobject item = cls->getStaticFinalField(fieldcode);
    jboolean eq = env->CallBooleanMethod(javaobject, mid, item);
    if (eq != JNI_FALSE) {
      return ($CLASSNAME) fieldcode;
    }
  }
  cache->throwJavaException(CLASS_IllegalArgumentException,
                            "Unknown object for enumeration $CLASSNAME!");
  return ($CLASSNAME) -1;
}


jobject $CPPCLASSNAME::
toJavaObject($CLASSNAME$ item, ClassCache* cache)
{
  int32_t fieldcode = (int32_t) item;
  if (fieldcode < 0) {
    return NULL;
  } else {
    ClassGlue* cls = cache->getClass(CLASS_$CLASSNAME);
    return cls->getStaticFinalField(fieldcode);
  }
}


$ENDIF
//###########################################################################
//# $CPPCLASSNAME: Constructors

$IF-HASSUBCLASSES
$CPPCLASSNAME::
$CPPCLASSNAME(uint32_t classcode, ClassCache* cache)
  : $IF-HASBASECLASS $CPPBASECLASSNAME $ELSE ObjectBase$ENDIF$=
      (classcode, cache)
{
}


$CPPCLASSNAME::
$CPPCLASSNAME(jobject javaobject,
$CSPC       $ uint32_t classcode,
$CSPC       $ ClassCache* cache,
$CSPC       $ bool global)
  : $IF-HASBASECLASS $CPPBASECLASSNAME $ELSE ObjectBase$ENDIF$=
  (javaobject, classcode, cache, global)
{
}


$ENDIF
$CPPCLASSNAME::
$CPPCLASSNAME(jobject javaobject, ClassCache* cache, bool global)
  : $IF-HASBASECLASS $CPPBASECLASSNAME $ELSE ObjectBase$ENDIF$=
  (javaobject, CLASS_$CLASSNAME, cache, global)
{
}


$CPPCLASSNAME::
$CPPCLASSNAME(const $CPPCLASSNAME& partner)
  : $IF-HASBASECLASS $CPPBASECLASSNAME $ELSE ObjectBase$ENDIF(partner)
{
}


$IF-ENUM
$CPPCLASSNAME::
$CPPCLASSNAME($CLASSNAME$ item, ClassCache* cache)
  : $IF-HASBASECLASS $CPPBASECLASSNAME $ELSE ObjectBase$ENDIF$=
      (CLASS_$CLASSNAME, cache)
{
  uint32_t fieldcode = (uint32_t) item;
  ClassGlue* cls = getClass();
  jobject javaobject = cls->getStaticFinalField(fieldcode);
  initJavaObject(javaobject);
}


$ENDIF
$FOREACH-CONSTRUCTOR
$CPPCLASSNAME::
$CPPCLASSNAME($FOREACH-ARG$=
              $IF-ENUM$=
                $JAVATYPENAME$=
              $ELSEIF-GLUE$=
                const $GLUETYPENAME*$=
              $ELSE$=
		$CPPTYPENAME$=
              $ENDIF$ arg_$ARGNAME,
$CSPC       $ $ENDFOR$=
              ClassCache* cache)
  : $IF-HASBASECLASS $CPPBASECLASSNAME $ELSE ObjectBase$ENDIF$=
      (CLASS_$CLASSNAME, cache)
{
  ClassGlue* cls = getClass();
  JNIEnv* env = cls->getEnvironment();
  jmethodID mid = cls->getMethodID(METHOD_$CLASSNAME_$METHODCODENAME);
  jclass javaclass = cls->getJavaClass();
$FOREACH-ARG
$IF-GLUE
$IF-ENUM
  jobject obj_$ARGNAME$ = $GLUETYPENAME::toJavaObject(arg_$ARGNAME, cache);
$ELSE
  jobject obj_$ARGNAME$ = arg_$ARGNAME$ ? arg_$ARGNAME->getJavaObject() : 0;
$ENDIF
$ENDIF
$ENDFOR
  jobject javaobject = env->NewObject(javaclass, mid$=
    $FOREACH-ARG, $IF-GLUE obj$ELSE arg$ENDIF _$ARGNAME $ENDFOR);
  if (jthrowable exception = env->ExceptionOccurred()) {
    throw exception;
  }
  initJavaObject(javaobject);
}


$ENDFOR
$IF-HASVIRTUALMETHODS
//############################################################################
//# $CPPCLASSNAME: Java Member Functions

$FOREACH-VIRTUALMETHOD
$CPPTYPENAME$ $CPPCLASSNAME::
$METHODNAME($FOREACH-ARG$=
            $IF-GLUE const $ENDIF$=
              $GLUETYPENAME $IF-GLUE*$ENDIF$ arg_$ARGNAME $IF-HASNEXT,
$MSPC     $ $ENDIF $ENDFOR)
  const
{
  checkNonNull();
  ClassGlue* cls = getClass();
  JNIEnv* env = cls->getEnvironment();
  jmethodID mid = cls->getMethodID(METHOD_$CLASSNAME_$METHODCODENAME);
  jobject javaobject = getJavaObject();
$FOREACH-ARG
$IF-GLUE
  jobject obj_$ARGNAME$ = arg_$ARGNAME$ ? arg_$ARGNAME->getJavaObject() : 0;
$ENDIF
$ENDFOR
  $IF-NONVOID $JNITYPENAME$ result = $IF-STRING(jstring) $ENDIF $ENDIF $=
    env->$JNICALLNAME(javaobject, mid$=
      $FOREACH-ARG, $IF-GLUE obj$ELSE arg$ENDIF _$ARGNAME $ENDFOR);
  if (jthrowable exception = env->ExceptionOccurred()) {
    throw exception;
  }
$IF-NONVOID
  return result$IF-BOOLEAN$ != JNI_FALSE$ENDIF;
$ENDIF
}


$IF-GLUE
$IF-ENUM $JAVATYPENAME $ELSE $GLUETYPENAME $ENDIF$ $=
$CPPCLASSNAME::
$METHODNAME Glue($FOREACH-ARG$=
                 $IF-GLUE const $ENDIF$=
                   $GLUETYPENAME $IF-GLUE*$ENDIF$ arg_$ARGNAME,
$MSPC      $     $ENDFOR ClassCache* cache)
  const
{
  jobject result = $METHODNAME($FOREACH-ARG arg_$ARGNAME $COMMASP $ENDFOR);
$IF-ENUM
  return $GLUETYPENAME::toEnum(result, cache);
$ELSE
  return $GLUETYPENAME(result, cache);
$ENDIF
}  
  

$ENDIF
$ENDFOR
$ENDIF
$IF-HASSTATICMETHODS
//############################################################################
//# $CPPCLASSNAME: Java Static Functions

$FOREACH-STATICMETHOD
$CPPTYPENAME$ $CPPCLASSNAME::
$METHODNAME($FOREACH-ARG$=
            $IF-GLUE const $ENDIF$=
              $GLUETYPENAME $IF-GLUE*$ENDIF$ arg_$ARGNAME,
$MSPC     $ $ENDFOR ClassCache* cache)
{
  ClassGlue* cls = cache->getClass(CLASS_$CLASSNAME);
  JNIEnv* env = cls->getEnvironment();
  jmethodID mid = cls->getStaticMethodID(METHOD_$CLASSNAME_$METHODCODENAME);
  jclass javaclass = cls->getJavaClass();
$FOREACH-ARG
$IF-GLUE
  jobject obj_$ARGNAME = arg_$ARGNAME->getJavaObject();
$ENDIF
$ENDFOR
  $IF-NONVOID $JNITYPENAME$ result = $IF-STRING(jstring) $ENDIF $ENDIF $=
    env->$JNICALLNAME(javaclass, mid$=
      $FOREACH-ARG, $IF-GLUE obj$ELSE arg$ENDIF _$ARGNAME $ENDFOR);
  if (jthrowable exception = env->ExceptionOccurred()) {
    throw exception;
  }
$IF-NONVOID
  return result$IF-BOOLEAN$ != JNI_FALSE$ENDIF;
$ENDIF
}


$IF-GLUE
$IF-ENUM $JAVATYPENAME $ELSE $GLUETYPENAME $ENDIF$ $=
$CPPCLASSNAME::
$METHODNAME Glue($FOREACH-ARG$=
                 $IF-GLUE const $ENDIF$=
                   $GLUETYPENAME $IF-GLUE*$ENDIF$ arg_$ARGNAME,
$MSPC      $     $ENDFOR ClassCache* cache)
{
  jobject result = $METHODNAME($FOREACH-ARG arg_$ARGNAME, $ENDFOR cache);
$IF-ENUM
  return $GLUETYPENAME::toEnum(result, cache);
$ELSE
  return $GLUETYPENAME(result, cache);
$ENDIF
}  
  

$ENDIF
$ENDFOR
$ENDIF
}  /* namespace jni */

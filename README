README
======

To run Supremica you need a Java 1.4 compliant JVM.
All development is done with Sun's JDK 1.4. You also need
Ant - the Java build system. Secure shell (SSH) is needed 
for secure communication with the computers at the Department
of Signals and Systems. For fastest compiling you should install Jikes, 
the Java compiler from IBM.

From 2001-09-27 JGrafChart is included. JGrafChart is a Grafcet/SFC 
modeling tool. JGrafChart is developed by Karl-Erik Arzen, at Lund
Institute of Technology. Karl-Erik can be reached at karlerik@control.lth.se.

To report problems or ask questions
send email to knut@supremica.org

If you run benchmark problems in Supremica, please give me a chance to 
comment the results before publishing.

A short tutorial on how to compile and run
Supremica is following. 

1. Checkout
	Enter a directory where you want to store
	the Supremica files, e.g. "/home/ka/projects". To checkout the
	sources, write:
	
	If you are at one of S2's Unix computers:
	> cvs checkout Supremica
	
	If you are at an external computer you need to do the following. 
	First you need to tell CVS to use ssh. 
	To do this write:
	> export CVS_RSH=ssh  (for bash)
	> setenv CVS_RSH ssh  (for tcsh)
	After this you can checkout the sources, change ka to your username.
	> cvs -d ka@supremica.s2.chalmers.se:/home/cvs checkout Supremica
	
	If you have licensed version of JGo and/or JGo Layout then
	copy the licensed jar files to
	Supremica\lib\licensed
	The two files should be named JGo.jar and JGoLayout.jar, respectively.
	Note, if you do not have licensed versions of JGo then the trial version
	will be used. The trial JGo files are in the CVS, but not the licensed 
	files. This implies that you have to manually update the licensed files.
	

2. Compiling
	The first time you compile after a checkout you should write:
	> ant initialize
	followed by
	> ant rebuild
	
	You should also run the previous commands as soon
	as a there is a new or updated file in Supremica/lib.

	For compiling the sources there are three main
	alternatives.
	
	i. Compile all files changed since last compilation
	> ant compile
	
	ii. Compile all files changed since last compilation and
	build a jar file.
	> ant build
	
	iii. Compile all files and build a jar file.
	> ant rebuild
	First all existing class files are deleted, then
	a compilation of all java files are done.
	
	Alternative iii, is the preferred alternative, and is
	also the one executed if you run ant without arguments.
	Note that alternative i, can be fast if you only want
	to check that some change you done is going though the
	compiler.
	
	It is also possible to build only supremica or jgrafchart.
	The commands are:
		compile_supremica, build_supremica, rebuild_supremica,
		compile_jgrafchart, build_jgrafchart, rebuild_jgrafchart.
	
3. Run
	Two alternatives:
	
	i. Enter Supremica/dist, write:
	> Supremica    (for Windows)
	> ./Supremica  (for Unix)
	
	or 
	
	> JGrafChart    (for Windows)
	> ./JGrafChart  (for Unix)
			
	ii. Run Supremica through Ant. Enter Supremica and write
	> ant run
	
	For Windows: If you have everything set up correctly you should also
	be able to double-click on Supremica/dist/Supremica.jar
	in the Explorer.

4. Update
	Enter the Supremica directory, write:
	> cvs update -d -P

5. Commit changes
 	Enter the Supremica directory, write:
	> cvs commit

6. Add a new file into cvs
	Enter the directory where the file resides, write:
	cvs add filename.java

Warning: Never save anything in the following directories:
	build
	dist
	doc
Since these directories are occasionally deleted by Ant.

Note that the file src/org/supremica/Version.java is excluded from the CVS 
repository since it is automatically generated by Ant when running a rebuild.

Testing
-------
After a commit to the CVS directory a new copy of the CVS directory
should always be checkout to a different location from where the commit
originated. This should be done to make sure that the commit did not break
anything. The most common error is that the user forget to add a file to 
the CVS directory that is necessary for the build. If the build breaks
then the other users cannot do anything until the build is fixed again.
Hence, it is important that you do not only check that the build will work
for you but you MUST checkout a new version to a different location otherwise
you will not find for example the problem where you have a new source file
in your directory but it is not in the CVS directory.

To streamline this process there is a script that will take care of all this
for you - if you have access to one of the Signals and Systems Linux computers.
To run the script you should log in to one of these computers, for example
   linus.s2.chalmers.se
   linnea.s2.chalmers.se
   temporary.s2.chalmers.se
Make sure that you can checkout and compile manually with the commands above. The
script can be found at 
/users/s2/knut/bin/check_supremica
If you want access the script easily then you can do a soft link to you local directory.
If you do this then you will automatically get access to all updates of this script.
> ln -s /users/s2/knut/bin/check_supremica .
The script will then do a checkout, an initialize, a rebuild, a run_tests and finally
remove all the files. The files will be checkout to /tmp/your_user_name_random. 
The /tmp directory is on a local harddrive resulting in a fast compilation. If there
is an error then you should fix that as soon as possible.

Performance
-----------
If running Supremica on examples where much memory are needed performance might
suffer if the JVM is started with too little heap-memory.

In Sun's JVM it is possible to set the initial and
max size of the heap.

Example:
java -Xms128M -Xmx196M -jar Supremica
will set the initial heap size to 128M and the maximum heap size
to 196M. If you know that 196M is required to finish the example
then setting the heap size to this size from the start will give
better performance.

More information
----------------

Ant - the build system
http://jakarta.apache.org/ant/

Cvs - the Concurrent Version System
http://www.cvshome.org/

Sun Java JDK
http://java.sun.com/

IBM Java JDK
http://www.ibm.com/java

Jikes - A fast Java compiler
http://oss.software.ibm.com/developerworks/opensource/jikes/

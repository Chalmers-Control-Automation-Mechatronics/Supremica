JAVA_BLOCK OnDelayTimer
	VAR_IN_OUT
		tonIN : BOOL;
		tonPT : DINT;
		tonET : DINT;
		tonQ  : BOOL;
	END_VAR
END_JAVA_BLOCK
FUNCTION_BLOCK TON
	VAR_IN_OUT
		tonIN : BOOL;
		tonPT : DINT;
		tonET : DINT;
		tonQ  : BOOL;
	END_VAR
	VAR
		odt : OnDelayTimer;
	END_VAR
	LD  tonIN
	ST  odt.tonIN
	LD  tonPT
	ST  odt.tonPT
	CAL odt
	LD  odt.tonET
	ST  tonET
	LD  odt.tonQ
	ST  tonQ
END_FUNCTION_BLOCK
(* This file is automatically generated from Supremica *)
(* Supremica version: 200206032118 *)
(* This file was generated at: Jun 4, 2002 2:06:10 AM *)
PROGRAM AutomaticallyGeneratedProgram
	VAR (* Internal variables *)
		si_6 AT %IX6 : BOOL; (* LitenKula *)
		si_2 AT %IX2 : BOOL; (* KulaMatlyft *)
		si_22 AT %IX22 : BOOL; (* KulaFast *)
		si_24 AT %IX24 : BOOL; (* ManuellStart *)
		si_16 AT %IX16 : BOOL; (* PlockaVan2 *)
		si_0 AT %IX0 : BOOL; (* KulaPortvakt *)
		si_13 AT %IX13 : BOOL; (* PlockaVan1 *)
		si_23 AT %IX23 : BOOL; (* Autostart *)
		si_4 AT %IX4 : BOOL; (* KulaMatstation *)
		si_14 AT %IX14 : BOOL; (* HissVan2 *)
		si_11 AT %IX11 : BOOL; (* HissVan1 *)
		si_15 AT %IX15 : BOOL; (* KulaVan2 *)
		si_12 AT %IX12 : BOOL; (* KulaVan1 *)
		si_25 AT %IX25 : BOOL; (* NodStopp *)
		si_21 AT %IX21 : BOOL; (* ArmVan2 *)
		si_3 AT %IX3 : BOOL; (* MatlyftUppe *)
		si_7 AT %IX7 : BOOL; (* HissNere *)
		si_20 AT %IX20 : BOOL; (* ArmVan1 *)
		si_17 AT %IX17 : BOOL; (* ArmHemma *)
		si_26 AT %IX26 : BOOL; (* LarmKvittering *)
		si_1 AT %IX1 : BOOL; (* MatlyftNere *)
		si_5 AT %IX5 : BOOL; (* StorKula *)
		si_10 AT %IX10 : BOOL; (* KulaHiss *)
		so_11 AT %QX11 : BOOL; (* UtVan2 *)
		so_7 AT %QX7 : BOOL; (* UtVan1 *)
		so_12 AT %QX12 : BOOL; (* LyftVan2 *)
		so_0 AT %QX0 : BOOL; (* InPortvakt *)
		so_10 AT %QX10 : BOOL; (* LyftVan1 *)
		so_15 AT %QX15 : BOOL; (* VridArmHoger *)
		so_3 AT %QX3 : BOOL; (* UrMatning *)
		so_14 AT %QX14 : BOOL; (* UppArmVan2 *)
		so_2 AT %QX2 : BOOL; (* UppMatlyft *)
		so_16 AT %QX16 : BOOL; (* Sug *)
		so_13 AT %QX13 : BOOL; (* UppArmVan1 *)
		so_6 AT %QX6 : BOOL; (* UppHissVan2 *)
		so_5 AT %QX5 : BOOL; (* UppHissVan1 *)
		so_1 AT %QX1 : BOOL; (* UrPortvakt *)
		so_4 AT %QX4 : BOOL; (* Mat *)
	END_VAR

	VAR (* Internal variables *)
		e_0 : BOOL; (* button.automatic.pressed uncontrollable *)
		e_1 : BOOL; (* button.automatic.released uncontrollable *)
		e_2 : BOOL; (* button.manual.pressed uncontrollable *)
		e_3 : BOOL; (* button.manual.released uncontrollable *)
		e_4 : BOOL; (* gk.ball_out_of_gatekeeper uncontrollable *)
		e_5 : BOOL; (* gk.enter_ball controllable *)
		e_6 : BOOL; (* gk.has_ball uncontrollable *)
		e_7 : BOOL; (* gk.in.go_in controllable *)
		e_8 : BOOL; (* gk.in.go_out controllable *)
		e_9 : BOOL; (* gk.in.is_in controllable *)
		e_10 : BOOL; (* gk.in.is_out controllable *)
		e_11 : BOOL; (* gk.out.go_in controllable *)
		e_12 : BOOL; (* gk.out.go_out controllable *)
		e_13 : BOOL; (* gk.out.is_in controllable *)
		e_14 : BOOL; (* gk.out.is_out controllable *)
		e_15 : BOOL; (* gk.release_ball controllable *)
		e_16 : BOOL; (* mode.automatic controllable *)
		e_17 : BOOL; (* mode.manual controllable *)
		enabledEvent : BOOL; (* True if a event is enabled, false otherwise *)
		q_0_0 : BOOL; (* q_0 in Progress spec: Manual or automatic mode *)
		q_0_1 : BOOL; (* q_1 in Progress spec: Manual or automatic mode *)
		q_0_2 : BOOL; (* q_2 in Progress spec: Manual or automatic mode *)
		q_0_3 : BOOL; (* q_3 in Progress spec: Manual or automatic mode *)
		q_0_4 : BOOL; (* q_4 in Progress spec: Manual or automatic mode *)
		q_0_5 : BOOL; (* q_5 in Progress spec: Manual or automatic mode *)
		q_0_6 : BOOL; (* q_6 in Progress spec: Manual or automatic mode *)
		q_0_7 : BOOL; (* q_7 in Progress spec: Manual or automatic mode *)
		q_1_0 : BOOL; (* q_0 in Progress spec: Gatekeeper (gk) *)
		q_1_1 : BOOL; (* q_1 in Progress spec: Gatekeeper (gk) *)
		q_1_2 : BOOL; (* q_1_1 in Progress spec: Gatekeeper (gk) *)
		q_1_3 : BOOL; (* q_2 in Progress spec: Gatekeeper (gk) *)
		q_1_4 : BOOL; (* q_3 in Progress spec: Gatekeeper (gk) *)
		q_1_5 : BOOL; (* q_4 in Progress spec: Gatekeeper (gk) *)
		q_1_6 : BOOL; (* q_5 in Progress spec: Gatekeeper (gk) *)
		q_1_7 : BOOL; (* q_6 in Progress spec: Gatekeeper (gk) *)
		q_2_0 : BOOL; (* q_0 in Plant: Manual button *)
		q_2_1 : BOOL; (* q_1 in Plant: Manual button *)
		q_2_2 : BOOL; (* q_2 in Plant: Manual button *)
		q_3_0 : BOOL; (* q_0 in Plant: Automatic button *)
		q_3_1 : BOOL; (* q_1 in Plant: Automatic button *)
		q_3_2 : BOOL; (* q_2 in Plant: Automatic button *)
		q_4_0 : BOOL; (* in in Plant: Gatekeeper - In *)
		q_4_1 : BOOL; (* out in Plant: Gatekeeper - In *)
		q_5_0 : BOOL; (* in in Plant: Gatekeeper - Out *)
		q_5_1 : BOOL; (* out in Plant: Gatekeeper - Out *)
		q_6_0 : BOOL; (* dummy in Plant: Disable events *)
		initialized : BOOL; (* Set the inital state the first scan cycle *)
	END_VAR

	(* Set the initial state *)
	LD	initialized	
	JMPC	after_initialization	
	LD	TRUE	
	S	q_0_0	
	S	q_1_0	
	S	q_2_0	
	S	q_3_0	
	S	q_4_0	
	S	q_5_0	
	S	q_6_0	
	S	initialized	
after_initialization:			
	LD	FALSE	
	ST	enabledEvent	
	(* Compute the enabled events *)
	(* Enable condition for event "button.automatic.pressed" *)
	LD	q_3_0	
	ST	e_0	
	(* Enable condition for event "button.automatic.released" *)
	LD	q_3_1	
	ST	e_1	
	(* Enable condition for event "button.manual.pressed" *)
	LD	q_2_0	
	ST	e_2	
	(* Enable condition for event "button.manual.released" *)
	LD	q_2_1	
	ST	e_3	
	(* Enable condition for event "gk.ball_out_of_gatekeeper" *)
	LD	q_1_6	
	ST	e_4	
	(* Enable condition for event "gk.enter_ball" *)
	LD	q_0_1	
	OR	 q_0_2	
	OR	 q_0_3	
	OR	 q_0_4	
	OR	 q_0_5	
	OR	 q_0_6	
	OR	 q_0_7	
	AND(	q_1_0	
	)		
	ST	e_5	
	(* Enable condition for event "gk.has_ball" *)
	LD	q_1_1	
	ST	e_6	
	(* Enable condition for event "gk.in.go_in" *)
	LD	q_1_3	
	AND(	q_4_0	
	OR	 q_4_1	
	)		
	ST	e_7	
	(* Enable condition for event "gk.in.go_out" *)
	LD	q_1_2	
	AND(	q_4_1	
	OR	 q_4_0	
	)		
	ST	e_8	
	(* Enable condition for event "gk.in.is_in" *)
	LD	q_4_0	
	AND(	FALSE	
	)		
	ST	e_9	
	(* Enable condition for event "gk.in.is_out" *)
	LD	q_4_1	
	AND(	FALSE	
	)		
	ST	e_10	
	(* Enable condition for event "gk.out.go_in" *)
	LD	q_1_7	
	AND(	q_5_0	
	OR	 q_5_1	
	)		
	ST	e_11	
	(* Enable condition for event "gk.out.go_out" *)
	LD	q_1_5	
	AND(	q_5_1	
	OR	 q_5_0	
	)		
	ST	e_12	
	(* Enable condition for event "gk.out.is_in" *)
	LD	q_5_0	
	AND(	FALSE	
	)		
	ST	e_13	
	(* Enable condition for event "gk.out.is_out" *)
	LD	q_5_1	
	AND(	FALSE	
	)		
	ST	e_14	
	(* Enable condition for event "gk.release_ball" *)
	LD	q_1_4	
	ST	e_15	
	(* Enable condition for event "mode.automatic" *)
	LD	q_0_0	
	OR	 q_0_1	
	OR	 q_0_2	
	OR	 q_0_3	
	OR	 q_0_4	
	OR	 q_0_5	
	OR	 q_0_6	
	OR	 q_0_7	
	AND(	q_3_2	
	)		
	ST	e_16	
	(* Enable condition for event "mode.manual" *)
	LD	q_0_0	
	OR	 q_0_1	
	OR	 q_0_2	
	OR	 q_0_3	
	OR	 q_0_4	
	OR	 q_0_5	
	OR	 q_0_6	
	OR	 q_0_7	
	AND(	q_2_2	
	)		
	ST	e_17	
	(* Check if the events are externally enabled *)
	(* Enable condition for event "button.automatic.pressed" *)
	JMP	check_e_0	
after_check_e_0:			
	(* Enable condition for event "button.automatic.released" *)
	JMP	check_e_1	
after_check_e_1:			
	(* Enable condition for event "button.manual.pressed" *)
	JMP	check_e_2	
after_check_e_2:			
	(* Enable condition for event "button.manual.released" *)
	JMP	check_e_3	
after_check_e_3:			
	(* Enable condition for event "gk.ball_out_of_gatekeeper" *)
	JMP	check_e_4	
after_check_e_4:			
	(* Enable condition for event "gk.enter_ball" *)
	JMP	check_e_5	
after_check_e_5:			
	(* Enable condition for event "gk.has_ball" *)
	JMP	check_e_6	
after_check_e_6:			
	(* Enable condition for event "gk.in.go_in" *)
	JMP	check_e_7	
after_check_e_7:			
	(* Enable condition for event "gk.in.go_out" *)
	JMP	check_e_8	
after_check_e_8:			
	(* Enable condition for event "gk.in.is_in" *)
	JMP	check_e_9	
after_check_e_9:			
	(* Enable condition for event "gk.in.is_out" *)
	JMP	check_e_10	
after_check_e_10:			
	(* Enable condition for event "gk.out.go_in" *)
	JMP	check_e_11	
after_check_e_11:			
	(* Enable condition for event "gk.out.go_out" *)
	JMP	check_e_12	
after_check_e_12:			
	(* Enable condition for event "gk.out.is_in" *)
	JMP	check_e_13	
after_check_e_13:			
	(* Enable condition for event "gk.out.is_out" *)
	JMP	check_e_14	
after_check_e_14:			
	(* Enable condition for event "gk.release_ball" *)
	JMP	check_e_15	
after_check_e_15:			
	(* Enable condition for event "mode.automatic" *)
	JMP	check_e_16	
after_check_e_16:			
	(* Enable condition for event "mode.manual" *)
	JMP	check_e_17	
after_check_e_17:			
	(* Check if the events are enabled by timers *)
	(* Make sure only one event is enabled *)
	(* Priority is given to uncontrollable events *)
	(* Enable condition for event "button.automatic.pressed" *)
	LD	e_0	
	ANDN	enabledEvent	
	ST	e_0	
	OR	enabledEvent	
	ST	enabledEvent	
	(* Enable condition for event "button.automatic.released" *)
	LD	e_1	
	ANDN	enabledEvent	
	ST	e_1	
	OR	enabledEvent	
	ST	enabledEvent	
	(* Enable condition for event "button.manual.pressed" *)
	LD	e_2	
	ANDN	enabledEvent	
	ST	e_2	
	OR	enabledEvent	
	ST	enabledEvent	
	(* Enable condition for event "button.manual.released" *)
	LD	e_3	
	ANDN	enabledEvent	
	ST	e_3	
	OR	enabledEvent	
	ST	enabledEvent	
	(* Enable condition for event "gk.ball_out_of_gatekeeper" *)
	LD	e_4	
	ANDN	enabledEvent	
	ST	e_4	
	OR	enabledEvent	
	ST	enabledEvent	
	(* Enable condition for event "gk.has_ball" *)
	LD	e_6	
	ANDN	enabledEvent	
	ST	e_6	
	OR	enabledEvent	
	ST	enabledEvent	
	(* Enable condition for event "gk.enter_ball" *)
	LD	e_5	
	ANDN	enabledEvent	
	ST	e_5	
	OR	enabledEvent	
	ST	enabledEvent	
	(* Enable condition for event "gk.in.go_in" *)
	LD	e_7	
	ANDN	enabledEvent	
	ST	e_7	
	OR	enabledEvent	
	ST	enabledEvent	
	(* Enable condition for event "gk.in.go_out" *)
	LD	e_8	
	ANDN	enabledEvent	
	ST	e_8	
	OR	enabledEvent	
	ST	enabledEvent	
	(* Enable condition for event "gk.in.is_in" *)
	LD	e_9	
	ANDN	enabledEvent	
	ST	e_9	
	OR	enabledEvent	
	ST	enabledEvent	
	(* Enable condition for event "gk.in.is_out" *)
	LD	e_10	
	ANDN	enabledEvent	
	ST	e_10	
	OR	enabledEvent	
	ST	enabledEvent	
	(* Enable condition for event "gk.out.go_in" *)
	LD	e_11	
	ANDN	enabledEvent	
	ST	e_11	
	OR	enabledEvent	
	ST	enabledEvent	
	(* Enable condition for event "gk.out.go_out" *)
	LD	e_12	
	ANDN	enabledEvent	
	ST	e_12	
	OR	enabledEvent	
	ST	enabledEvent	
	(* Enable condition for event "gk.out.is_in" *)
	LD	e_13	
	ANDN	enabledEvent	
	ST	e_13	
	OR	enabledEvent	
	ST	enabledEvent	
	(* Enable condition for event "gk.out.is_out" *)
	LD	e_14	
	ANDN	enabledEvent	
	ST	e_14	
	OR	enabledEvent	
	ST	enabledEvent	
	(* Enable condition for event "gk.release_ball" *)
	LD	e_15	
	ANDN	enabledEvent	
	ST	e_15	
	OR	enabledEvent	
	ST	enabledEvent	
	(* Enable condition for event "mode.automatic" *)
	LD	e_16	
	ANDN	enabledEvent	
	ST	e_16	
	OR	enabledEvent	
	ST	enabledEvent	
	(* Enable condition for event "mode.manual" *)
	LD	e_17	
	ANDN	enabledEvent	
	ST	e_17	
	OR	enabledEvent	
	ST	enabledEvent	
	(* Change state in the automata *)
	(* It is in general not safe to have more than one event set to true at this point *)
	(* Transition for event "button.automatic.pressed" *)
	LD	e_0	
	JMPCN	trans_after_e_0	
	JMP	do_e_0	
after_do_e_0:			
	(* Transitions in Plant: Automatic button *)
	LD	q_3_0	
	JMPCN	trans_after_e_0_q_3_0	
	S	q_3_1	
	R	q_3_0	
	JMP	trans_after_e_0_a_3	
trans_after_e_0_q_3_0:			
trans_after_e_0_a_3:			
trans_after_e_0:			
	(* Transition for event "button.automatic.released" *)
	LD	e_1	
	JMPCN	trans_after_e_1	
	JMP	do_e_1	
after_do_e_1:			
	(* Transitions in Plant: Automatic button *)
	LD	q_3_1	
	JMPCN	trans_after_e_1_q_3_1	
	S	q_3_2	
	R	q_3_1	
	JMP	trans_after_e_1_a_3	
trans_after_e_1_q_3_1:			
trans_after_e_1_a_3:			
trans_after_e_1:			
	(* Transition for event "button.manual.pressed" *)
	LD	e_2	
	JMPCN	trans_after_e_2	
	JMP	do_e_2	
after_do_e_2:			
	(* Transitions in Plant: Manual button *)
	LD	q_2_0	
	JMPCN	trans_after_e_2_q_2_0	
	S	q_2_1	
	R	q_2_0	
	JMP	trans_after_e_2_a_2	
trans_after_e_2_q_2_0:			
trans_after_e_2_a_2:			
trans_after_e_2:			
	(* Transition for event "button.manual.released" *)
	LD	e_3	
	JMPCN	trans_after_e_3	
	JMP	do_e_3	
after_do_e_3:			
	(* Transitions in Plant: Manual button *)
	LD	q_2_1	
	JMPCN	trans_after_e_3_q_2_1	
	S	q_2_2	
	R	q_2_1	
	JMP	trans_after_e_3_a_2	
trans_after_e_3_q_2_1:			
trans_after_e_3_a_2:			
trans_after_e_3:			
	(* Transition for event "gk.ball_out_of_gatekeeper" *)
	LD	e_4	
	JMPCN	trans_after_e_4	
	JMP	do_e_4	
after_do_e_4:			
	(* Transitions in Progress spec: Gatekeeper (gk) *)
	LD	q_1_6	
	JMPCN	trans_after_e_4_q_1_6	
	S	q_1_7	
	R	q_1_6	
	JMP	trans_after_e_4_a_1	
trans_after_e_4_q_1_6:			
trans_after_e_4_a_1:			
trans_after_e_4:			
	(* Transition for event "gk.enter_ball" *)
	LD	e_5	
	JMPCN	trans_after_e_5	
	JMP	do_e_5	
after_do_e_5:			
	(* Transitions in Progress spec: Manual or automatic mode *)
	LD	q_0_1	
	JMPCN	trans_after_e_5_q_0_1	
	S	q_0_0	
	R	q_0_1	
	JMP	trans_after_e_5_a_0	
trans_after_e_5_q_0_1:			
	LD	q_0_2	
	JMPCN	trans_after_e_5_q_0_2	
	S	q_0_3	
	R	q_0_2	
	JMP	trans_after_e_5_a_0	
trans_after_e_5_q_0_2:			
	LD	q_0_3	
	JMPCN	trans_after_e_5_q_0_3	
	S	q_0_4	
	R	q_0_3	
	JMP	trans_after_e_5_a_0	
trans_after_e_5_q_0_3:			
	LD	q_0_4	
	JMPCN	trans_after_e_5_q_0_4	
	S	q_0_5	
	R	q_0_4	
	JMP	trans_after_e_5_a_0	
trans_after_e_5_q_0_4:			
	LD	q_0_5	
	JMPCN	trans_after_e_5_q_0_5	
	S	q_0_6	
	R	q_0_5	
	JMP	trans_after_e_5_a_0	
trans_after_e_5_q_0_5:			
	LD	q_0_6	
	JMPCN	trans_after_e_5_q_0_6	
	S	q_0_7	
	R	q_0_6	
	JMP	trans_after_e_5_a_0	
trans_after_e_5_q_0_6:			
	LD	q_0_7	
	JMPCN	trans_after_e_5_q_0_7	
	S	q_0_0	
	R	q_0_7	
	JMP	trans_after_e_5_a_0	
trans_after_e_5_q_0_7:			
trans_after_e_5_a_0:			
	(* Transitions in Progress spec: Gatekeeper (gk) *)
	LD	q_1_0	
	JMPCN	trans_after_e_5_q_1_0	
	S	q_1_2	
	R	q_1_0	
	JMP	trans_after_e_5_a_1	
trans_after_e_5_q_1_0:			
trans_after_e_5_a_1:			
trans_after_e_5:			
	(* Transition for event "gk.has_ball" *)
	LD	e_6	
	JMPCN	trans_after_e_6	
	JMP	do_e_6	
after_do_e_6:			
	(* Transitions in Progress spec: Gatekeeper (gk) *)
	LD	q_1_1	
	JMPCN	trans_after_e_6_q_1_1	
	S	q_1_3	
	R	q_1_1	
	JMP	trans_after_e_6_a_1	
trans_after_e_6_q_1_1:			
trans_after_e_6_a_1:			
trans_after_e_6:			
	(* Transition for event "gk.in.go_in" *)
	LD	e_7	
	JMPCN	trans_after_e_7	
	JMP	do_e_7	
after_do_e_7:			
	(* Transitions in Progress spec: Gatekeeper (gk) *)
	LD	q_1_3	
	JMPCN	trans_after_e_7_q_1_3	
	S	q_1_4	
	R	q_1_3	
	JMP	trans_after_e_7_a_1	
trans_after_e_7_q_1_3:			
trans_after_e_7_a_1:			
	(* Transitions in Plant: Gatekeeper - In *)
	(* q_4_0  has e_7 as self loop, no transition *)
trans_after_e_7_q_4_0:			
	LD	q_4_1	
	JMPCN	trans_after_e_7_q_4_1	
	S	q_4_0	
	R	q_4_1	
	JMP	trans_after_e_7_a_4	
trans_after_e_7_q_4_1:			
trans_after_e_7_a_4:			
trans_after_e_7:			
	(* Transition for event "gk.in.go_out" *)
	LD	e_8	
	JMPCN	trans_after_e_8	
	JMP	do_e_8	
after_do_e_8:			
	(* Transitions in Progress spec: Gatekeeper (gk) *)
	LD	q_1_2	
	JMPCN	trans_after_e_8_q_1_2	
	S	q_1_1	
	R	q_1_2	
	JMP	trans_after_e_8_a_1	
trans_after_e_8_q_1_2:			
trans_after_e_8_a_1:			
	(* Transitions in Plant: Gatekeeper - In *)
	(* q_4_1  has e_8 as self loop, no transition *)
trans_after_e_8_q_4_1:			
	LD	q_4_0	
	JMPCN	trans_after_e_8_q_4_0	
	S	q_4_1	
	R	q_4_0	
	JMP	trans_after_e_8_a_4	
trans_after_e_8_q_4_0:			
trans_after_e_8_a_4:			
trans_after_e_8:			
	(* Transition for event "gk.in.is_in" *)
	LD	e_9	
	JMPCN	trans_after_e_9	
	JMP	do_e_9	
after_do_e_9:			
	(* Transitions in Plant: Gatekeeper - In *)
	(* q_4_0  has e_9 as self loop, no transition *)
trans_after_e_9_q_4_0:			
trans_after_e_9_a_4:			
	(* Transitions in Plant: Disable events *)
trans_after_e_9_a_6:			
trans_after_e_9:			
	(* Transition for event "gk.in.is_out" *)
	LD	e_10	
	JMPCN	trans_after_e_10	
	JMP	do_e_10	
after_do_e_10:			
	(* Transitions in Plant: Gatekeeper - In *)
	(* q_4_1  has e_10 as self loop, no transition *)
trans_after_e_10_q_4_1:			
trans_after_e_10_a_4:			
	(* Transitions in Plant: Disable events *)
trans_after_e_10_a_6:			
trans_after_e_10:			
	(* Transition for event "gk.out.go_in" *)
	LD	e_11	
	JMPCN	trans_after_e_11	
	JMP	do_e_11	
after_do_e_11:			
	(* Transitions in Progress spec: Gatekeeper (gk) *)
	LD	q_1_7	
	JMPCN	trans_after_e_11_q_1_7	
	S	q_1_0	
	R	q_1_7	
	JMP	trans_after_e_11_a_1	
trans_after_e_11_q_1_7:			
trans_after_e_11_a_1:			
	(* Transitions in Plant: Gatekeeper - Out *)
	(* q_5_0  has e_11 as self loop, no transition *)
trans_after_e_11_q_5_0:			
	LD	q_5_1	
	JMPCN	trans_after_e_11_q_5_1	
	S	q_5_0	
	R	q_5_1	
	JMP	trans_after_e_11_a_5	
trans_after_e_11_q_5_1:			
trans_after_e_11_a_5:			
trans_after_e_11:			
	(* Transition for event "gk.out.go_out" *)
	LD	e_12	
	JMPCN	trans_after_e_12	
	JMP	do_e_12	
after_do_e_12:			
	(* Transitions in Progress spec: Gatekeeper (gk) *)
	LD	q_1_5	
	JMPCN	trans_after_e_12_q_1_5	
	S	q_1_6	
	R	q_1_5	
	JMP	trans_after_e_12_a_1	
trans_after_e_12_q_1_5:			
trans_after_e_12_a_1:			
	(* Transitions in Plant: Gatekeeper - Out *)
	(* q_5_1  has e_12 as self loop, no transition *)
trans_after_e_12_q_5_1:			
	LD	q_5_0	
	JMPCN	trans_after_e_12_q_5_0	
	S	q_5_1	
	R	q_5_0	
	JMP	trans_after_e_12_a_5	
trans_after_e_12_q_5_0:			
trans_after_e_12_a_5:			
trans_after_e_12:			
	(* Transition for event "gk.out.is_in" *)
	LD	e_13	
	JMPCN	trans_after_e_13	
	JMP	do_e_13	
after_do_e_13:			
	(* Transitions in Plant: Gatekeeper - Out *)
	(* q_5_0  has e_13 as self loop, no transition *)
trans_after_e_13_q_5_0:			
trans_after_e_13_a_5:			
	(* Transitions in Plant: Disable events *)
trans_after_e_13_a_6:			
trans_after_e_13:			
	(* Transition for event "gk.out.is_out" *)
	LD	e_14	
	JMPCN	trans_after_e_14	
	JMP	do_e_14	
after_do_e_14:			
	(* Transitions in Plant: Gatekeeper - Out *)
	(* q_5_1  has e_14 as self loop, no transition *)
trans_after_e_14_q_5_1:			
trans_after_e_14_a_5:			
	(* Transitions in Plant: Disable events *)
trans_after_e_14_a_6:			
trans_after_e_14:			
	(* Transition for event "gk.release_ball" *)
	LD	e_15	
	JMPCN	trans_after_e_15	
	JMP	do_e_15	
after_do_e_15:			
	(* Transitions in Progress spec: Gatekeeper (gk) *)
	LD	q_1_4	
	JMPCN	trans_after_e_15_q_1_4	
	S	q_1_5	
	R	q_1_4	
	JMP	trans_after_e_15_a_1	
trans_after_e_15_q_1_4:			
trans_after_e_15_a_1:			
trans_after_e_15:			
	(* Transition for event "mode.automatic" *)
	LD	e_16	
	JMPCN	trans_after_e_16	
	JMP	do_e_16	
after_do_e_16:			
	(* Transitions in Progress spec: Manual or automatic mode *)
	LD	q_0_0	
	JMPCN	trans_after_e_16_q_0_0	
	S	q_0_2	
	R	q_0_0	
	JMP	trans_after_e_16_a_0	
trans_after_e_16_q_0_0:			
	(* q_0_1  has e_16 as self loop, no transition *)
trans_after_e_16_q_0_1:			
	(* q_0_2  has e_16 as self loop, no transition *)
trans_after_e_16_q_0_2:			
	(* q_0_3  has e_16 as self loop, no transition *)
trans_after_e_16_q_0_3:			
	(* q_0_4  has e_16 as self loop, no transition *)
trans_after_e_16_q_0_4:			
	(* q_0_5  has e_16 as self loop, no transition *)
trans_after_e_16_q_0_5:			
	(* q_0_6  has e_16 as self loop, no transition *)
trans_after_e_16_q_0_6:			
	(* q_0_7  has e_16 as self loop, no transition *)
trans_after_e_16_q_0_7:			
trans_after_e_16_a_0:			
	(* Transitions in Plant: Automatic button *)
	LD	q_3_2	
	JMPCN	trans_after_e_16_q_3_2	
	S	q_3_0	
	R	q_3_2	
	JMP	trans_after_e_16_a_3	
trans_after_e_16_q_3_2:			
trans_after_e_16_a_3:			
trans_after_e_16:			
	(* Transition for event "mode.manual" *)
	LD	e_17	
	JMPCN	trans_after_e_17	
	JMP	do_e_17	
after_do_e_17:			
	(* Transitions in Progress spec: Manual or automatic mode *)
	LD	q_0_0	
	JMPCN	trans_after_e_17_q_0_0	
	S	q_0_1	
	R	q_0_0	
	JMP	trans_after_e_17_a_0	
trans_after_e_17_q_0_0:			
	(* q_0_1  has e_17 as self loop, no transition *)
trans_after_e_17_q_0_1:			
	(* q_0_2  has e_17 as self loop, no transition *)
trans_after_e_17_q_0_2:			
	(* q_0_3  has e_17 as self loop, no transition *)
trans_after_e_17_q_0_3:			
	(* q_0_4  has e_17 as self loop, no transition *)
trans_after_e_17_q_0_4:			
	(* q_0_5  has e_17 as self loop, no transition *)
trans_after_e_17_q_0_5:			
	(* q_0_6  has e_17 as self loop, no transition *)
trans_after_e_17_q_0_6:			
	(* q_0_7  has e_17 as self loop, no transition *)
trans_after_e_17_q_0_7:			
trans_after_e_17_a_0:			
	(* Transitions in Plant: Manual button *)
	LD	q_2_2	
	JMPCN	trans_after_e_17_q_2_2	
	S	q_2_0	
	R	q_2_2	
	JMP	trans_after_e_17_a_2	
trans_after_e_17_q_2_2:			
trans_after_e_17_a_2:			
trans_after_e_17:			
	(* Start timers *)
	JMP	end	
	(* The conditions *)
check_e_0:			
	(* Condition for event button.automatic.pressed *)
	LD	e_0	
	JMPCN	after_check_e_0	
	LD	si_23	
	JMPCN	check_e_0_0	
	LD	FALSE	
	ST	e_0	
	JMP	after_check_e_0	
check_e_0_0:			
	JMP	after_check_e_0	
check_e_1:			
	(* Condition for event button.automatic.released *)
	LD	e_1	
	JMPCN	after_check_e_1	
	LD	si_23	
	JMPC	check_e_1_0	
	LD	FALSE	
	ST	e_1	
	JMP	after_check_e_1	
check_e_1_0:			
	JMP	after_check_e_1	
check_e_2:			
	(* Condition for event button.manual.pressed *)
	LD	e_2	
	JMPCN	after_check_e_2	
	LD	si_24	
	JMPCN	check_e_2_0	
	LD	FALSE	
	ST	e_2	
	JMP	after_check_e_2	
check_e_2_0:			
	JMP	after_check_e_2	
check_e_3:			
	(* Condition for event button.manual.released *)
	LD	e_3	
	JMPCN	after_check_e_3	
	LD	si_24	
	JMPC	check_e_3_0	
	LD	FALSE	
	ST	e_3	
	JMP	after_check_e_3	
check_e_3_0:			
	JMP	after_check_e_3	
check_e_4:			
	(* Condition for event gk.ball_out_of_gatekeeper *)
	LD	e_4	
	JMPCN	after_check_e_4	
	JMP	after_check_e_4	
check_e_5:			
	(* Condition for event gk.enter_ball *)
	LD	e_5	
	JMPCN	after_check_e_5	
	JMP	after_check_e_5	
check_e_6:			
	(* Condition for event gk.has_ball *)
	LD	e_6	
	JMPCN	after_check_e_6	
	LD	si_0	
	JMPC	check_e_6_0	
	LD	FALSE	
	ST	e_6	
	JMP	after_check_e_6	
check_e_6_0:			
	JMP	after_check_e_6	
check_e_7:			
	(* Condition for event gk.in.go_in *)
	LD	e_7	
	JMPCN	after_check_e_7	
	JMP	after_check_e_7	
check_e_8:			
	(* Condition for event gk.in.go_out *)
	LD	e_8	
	JMPCN	after_check_e_8	
	JMP	after_check_e_8	
check_e_9:			
	(* Condition for event gk.in.is_in *)
	LD	e_9	
	JMPCN	after_check_e_9	
	JMP	after_check_e_9	
check_e_10:			
	(* Condition for event gk.in.is_out *)
	LD	e_10	
	JMPCN	after_check_e_10	
	JMP	after_check_e_10	
check_e_11:			
	(* Condition for event gk.out.go_in *)
	LD	e_11	
	JMPCN	after_check_e_11	
	JMP	after_check_e_11	
check_e_12:			
	(* Condition for event gk.out.go_out *)
	LD	e_12	
	JMPCN	after_check_e_12	
	JMP	after_check_e_12	
check_e_13:			
	(* Condition for event gk.out.is_in *)
	LD	e_13	
	JMPCN	after_check_e_13	
	JMP	after_check_e_13	
check_e_14:			
	(* Condition for event gk.out.is_out *)
	LD	e_14	
	JMPCN	after_check_e_14	
	JMP	after_check_e_14	
check_e_15:			
	(* Condition for event gk.release_ball *)
	LD	e_15	
	JMPCN	after_check_e_15	
	JMP	after_check_e_15	
check_e_16:			
	(* Condition for event mode.automatic *)
	LD	e_16	
	JMPCN	after_check_e_16	
	JMP	after_check_e_16	
check_e_17:			
	(* Condition for event mode.manual *)
	LD	e_17	
	JMPCN	after_check_e_17	
	JMP	after_check_e_17	
	(* The actions *)
do_e_0:			
	(* Action for event button.automatic.pressed *)
	JMP	after_do_e_0	
do_e_1:			
	(* Action for event button.automatic.released *)
	JMP	after_do_e_1	
do_e_2:			
	(* Action for event button.manual.pressed *)
	JMP	after_do_e_2	
do_e_3:			
	(* Action for event button.manual.released *)
	JMP	after_do_e_3	
do_e_4:			
	(* Action for event gk.ball_out_of_gatekeeper *)
	JMP	after_do_e_4	
do_e_5:			
	(* Action for event gk.enter_ball *)
	JMP	after_do_e_5	
do_e_6:			
	(* Action for event gk.has_ball *)
	JMP	after_do_e_6	
do_e_7:			
	(* Action for event gk.in.go_in *)
	LD	FALSE	
	ST	so_0	
	JMP	after_do_e_7	
do_e_8:			
	(* Action for event gk.in.go_out *)
	LD	TRUE	
	ST	so_0	
	JMP	after_do_e_8	
do_e_9:			
	(* Action for event gk.in.is_in *)
	JMP	after_do_e_9	
do_e_10:			
	(* Action for event gk.in.is_out *)
	JMP	after_do_e_10	
do_e_11:			
	(* Action for event gk.out.go_in *)
	LD	FALSE	
	ST	so_1	
	JMP	after_do_e_11	
do_e_12:			
	(* Action for event gk.out.go_out *)
	LD	TRUE	
	ST	so_1	
	JMP	after_do_e_12	
do_e_13:			
	(* Action for event gk.out.is_in *)
	JMP	after_do_e_13	
do_e_14:			
	(* Action for event gk.out.is_out *)
	JMP	after_do_e_14	
do_e_15:			
	(* Action for event gk.release_ball *)
	JMP	after_do_e_15	
do_e_16:			
	(* Action for event mode.automatic *)
	JMP	after_do_e_16	
do_e_17:			
	(* Action for event mode.manual *)
	JMP	after_do_e_17	
end:			
END_PROGRAM
(* JAVA_BLOCKS for printing (no newline) *)
(*=======================================*)

JAVA_BLOCK JPrintWSTRING
	VAR_IN_OUT
		output: WSTRING;
	END_VAR
END_JAVA_BLOCK
FUNCTION_BLOCK PrintWSTRING
	VAR_IN_OUT
		output: WSTRING;
	END_VAR
	VAR
		jblock: JPrintWSTRING;
	END_VAR
	LD output
	ST jblock.output
	CAL jblock
END_FUNCTION_BLOCK

JAVA_BLOCK JPrintDINT
	VAR_IN_OUT
		output: DINT;
	END_VAR
END_JAVA_BLOCK
FUNCTION_BLOCK PrintDINT
	VAR_IN_OUT
		output: DINT;
	END_VAR
	VAR
		jblock: JPrintDINT;
	END_VAR
	LD output
	ST jblock.output
	CAL jblock
END_FUNCTION_BLOCK
JAVA_BLOCK JPrintREAL
	VAR_IN_OUT
		output:REAL;
	END_VAR
END_JAVA_BLOCK
FUNCTION_BLOCK PrintREAL
	VAR_IN_OUT
		output:REAL;
	END_VAR
	VAR
		jblock:JPrintREAL;
	END_VAR
	LD output
	ST jblock.output
	CAL jblock
END_FUNCTION_BLOCK

JAVA_BLOCK JPrintBOOL
	VAR_IN_OUT
		output: BOOL;
	END_VAR
END_JAVA_BLOCK
FUNCTION_BLOCK PrintBOOL
	VAR_IN_OUT
		output: BOOL;
	END_VAR
	VAR
		jblock: JPrintBOOL;
	END_VAR
	LD output
	ST jblock.output
	CAL jblock
END_FUNCTION_BLOCK

(* JAVA_BLOCKS for printing (newline) *)
(*====================================*)

JAVA_BLOCK JPrintlnWSTRING
	VAR_IN_OUT
		output: WSTRING;
	END_VAR
END_JAVA_BLOCK
FUNCTION_BLOCK PrintlnWSTRING
	VAR_IN_OUT
		output: WSTRING;
	END_VAR
	VAR
		jblock: JPrintlnWSTRING;
	END_VAR
	LD output
	ST jblock.output
	CAL jblock
END_FUNCTION_BLOCK

JAVA_BLOCK JPrintlnDINT
	VAR_IN_OUT
		output: DINT;
	END_VAR
END_JAVA_BLOCK
FUNCTION_BLOCK PrintlnDINT
	VAR_IN_OUT
		output: DINT;
	END_VAR
	VAR
		jblock: JPrintlnDINT;
	END_VAR
	LD output
	ST jblock.output
	CAL jblock
END_FUNCTION_BLOCK

JAVA_BLOCK JPrintlnREAL
	VAR_IN_OUT
		output:REAL;
	END_VAR
END_JAVA_BLOCK
FUNCTION_BLOCK PrintlnREAL
	VAR_IN_OUT
		output:REAL;
	END_VAR
	VAR
		jblock:JPrintlnREAL;
	END_VAR
	LD output
	ST jblock.output
	CAL jblock
END_FUNCTION_BLOCK

JAVA_BLOCK JPrintlnBOOL
	VAR_IN_OUT
		output: BOOL;
	END_VAR
END_JAVA_BLOCK
FUNCTION_BLOCK PrintlnBOOL
	VAR_IN_OUT
		output: BOOL;
	END_VAR
	VAR
		jblock: JPrintlnBOOL;
	END_VAR
	LD output
	ST jblock.output
	CAL jblock
END_FUNCTION_BLOCK

(* This file is automatically generated from Supremica *)
(* Supremica version: 200205230559 *)
(* This file was generated at: May 23, 2002 6:21:44 AM *)
PROGRAM AutomaticallyGeneratedProgram
	VAR (* Internal variables *)
		si_6 AT %IX6 : BOOL; (* LitenKula *)
		si_2 AT %IX2 : BOOL; (* KulaMatlyft *)
		si_22 AT %IX22 : BOOL; (* KulaFast *)
		si_24 AT %IX24 : BOOL; (* ManuellStart *)
		si_16 AT %IX16 : BOOL; (* PlockaVan2 *)
		si_0 AT %IX0 : BOOL; (* KulaPortvakt *)
		si_13 AT %IX13 : BOOL; (* PlockaVan1 *)
		si_23 AT %IX23 : BOOL; (* Autostart *)
		si_4 AT %IX4 : BOOL; (* KulaMatstation *)
		si_14 AT %IX14 : BOOL; (* HissVan2 *)
		si_11 AT %IX11 : BOOL; (* HissVan1 *)
		si_15 AT %IX15 : BOOL; (* KulaVan2 *)
		si_12 AT %IX12 : BOOL; (* KulaVan1 *)
		si_25 AT %IX25 : BOOL; (* NodStopp *)
		si_21 AT %IX21 : BOOL; (* ArmVan2 *)
		si_3 AT %IX3 : BOOL; (* MatlyftUppe *)
		si_7 AT %IX7 : BOOL; (* HissNere *)
		si_20 AT %IX20 : BOOL; (* ArmVan1 *)
		si_17 AT %IX17 : BOOL; (* ArmHemma *)
		si_26 AT %IX26 : BOOL; (* LarmKvittering *)
		si_1 AT %IX1 : BOOL; (* MatlyftNere *)
		si_5 AT %IX5 : BOOL; (* StorKula *)
		si_10 AT %IX10 : BOOL; (* KulaHiss *)
		so_11 AT %QX11 : BOOL; (* UtVan2 *)
		so_7 AT %QX7 : BOOL; (* UtVan1 *)
		so_12 AT %QX12 : BOOL; (* LyftVan2 *)
		so_0 AT %QX0 : BOOL; (* InPortvakt *)
		so_10 AT %QX10 : BOOL; (* LyftVan1 *)
		so_15 AT %QX15 : BOOL; (* VridArmHoger *)
		so_3 AT %QX3 : BOOL; (* UrMatning *)
		so_14 AT %QX14 : BOOL; (* UppArmVan2 *)
		so_2 AT %QX2 : BOOL; (* UppMatlyft *)
		so_16 AT %QX16 : BOOL; (* Sug *)
		so_13 AT %QX13 : BOOL; (* UppArmVan1 *)
		so_6 AT %QX6 : BOOL; (* UppHissVan2 *)
		so_5 AT %QX5 : BOOL; (* UppHissVan1 *)
		so_1 AT %QX1 : BOOL; (* UrPortvakt *)
		so_4 AT %QX4 : BOOL; (* Mat *)
	END_VAR

	VAR (* Internal variables *)
		e_0 : BOOL; (* ball_in uncontrollable *)
		e_1 : BOOL; (* ball_out uncontrollable *)
		e_2 : BOOL; (* enter_ball controllable *)
		e_3 : BOOL; (* exit_ball controllable *)
		enabledEvent : BOOL; (* True if a event is enabled, false otherwise *)
		q_0_0 : BOOL; (* q_0 in ballp *)
		q_0_1 : BOOL; (* q_1 in ballp *)
		q_0_2 : BOOL; (* q_2 in ballp *)
		q_0_3 : BOOL; (* q_3 in ballp *)
		initialized : BOOL; (* Set the inital state the first scan cycle *)
	END_VAR

	(* Set the initial state *)
	LD	initialized	
	JMPC	after_initialization	
	LD	TRUE	
	S	q_0_0	
	S	initialized	
after_initialization:			
	LD	FALSE	
	ST	enabledEvent	
	(* Compute the enabled events *)
	(* Enable condition for event "ball_in" *)
	LD	q_0_1	
	ST	e_0	
	(* Enable condition for event "ball_out" *)
	LD	q_0_3	
	ST	e_1	
	(* Enable condition for event "enter_ball" *)
	LD	q_0_0	
	ST	e_2	
	(* Enable condition for event "exit_ball" *)
	LD	q_0_2	
	ST	e_3	
	(* Check if the events are externally enabled *)
	(* Enable condition for event "ball_in" *)
	JMP	check_e_0	
after_check_e_0:			
	(* Enable condition for event "ball_out" *)
	JMP	check_e_1	
after_check_e_1:			
	(* Enable condition for event "enter_ball" *)
	JMP	check_e_2	
after_check_e_2:			
	(* Enable condition for event "exit_ball" *)
	JMP	check_e_3	
after_check_e_3:			
	(* Make sure only one event is enabled *)
	(* Priority is given to uncontrollable events *)
	(* Enable condition for event "ball_in" *)
	LD	e_0	
	ANDN	enabledEvent	
	ST	e_0	
	OR	enabledEvent	
	ST	enabledEvent	
	(* Enable condition for event "ball_out" *)
	LD	e_1	
	ANDN	enabledEvent	
	ST	e_1	
	OR	enabledEvent	
	ST	enabledEvent	
	(* Enable condition for event "enter_ball" *)
	LD	e_2	
	ANDN	enabledEvent	
	ST	e_2	
	OR	enabledEvent	
	ST	enabledEvent	
	(* Enable condition for event "exit_ball" *)
	LD	e_3	
	ANDN	enabledEvent	
	ST	e_3	
	OR	enabledEvent	
	ST	enabledEvent	
	(* Change state in the automata *)
	(* It is in general not safe to have more than one event set to true at this point *)
	(* Transition for event "ball_in" *)
	LD	e_0	
	JMPCN	trans_after_e_0	
	JMP	do_e_0	
after_do_e_0:			
	(* Transitions in ballp *)
	LD	q_0_1	
	JMPCN	trans_after_e_0_q_0_1	
	S	q_0_2	
	R	q_0_1	
	JMP	trans_after_e_0_a_0	
trans_after_e_0_q_0_1:			
trans_after_e_0_a_0:			
trans_after_e_0:			
	(* Transition for event "ball_out" *)
	LD	e_1	
	JMPCN	trans_after_e_1	
	JMP	do_e_1	
after_do_e_1:			
	(* Transitions in ballp *)
	LD	q_0_3	
	JMPCN	trans_after_e_1_q_0_3	
	S	q_0_0	
	R	q_0_3	
	JMP	trans_after_e_1_a_0	
trans_after_e_1_q_0_3:			
trans_after_e_1_a_0:			
trans_after_e_1:			
	(* Transition for event "enter_ball" *)
	LD	e_2	
	JMPCN	trans_after_e_2	
	JMP	do_e_2	
after_do_e_2:			
	(* Transitions in ballp *)
	LD	q_0_0	
	JMPCN	trans_after_e_2_q_0_0	
	S	q_0_1	
	R	q_0_0	
	JMP	trans_after_e_2_a_0	
trans_after_e_2_q_0_0:			
trans_after_e_2_a_0:			
trans_after_e_2:			
	(* Transition for event "exit_ball" *)
	LD	e_3	
	JMPCN	trans_after_e_3	
	JMP	do_e_3	
after_do_e_3:			
	(* Transitions in ballp *)
	LD	q_0_2	
	JMPCN	trans_after_e_3_q_0_2	
	S	q_0_3	
	R	q_0_2	
	JMP	trans_after_e_3_a_0	
trans_after_e_3_q_0_2:			
trans_after_e_3_a_0:			
trans_after_e_3:			
	JMP	end	
	(* The conditions *)
check_e_0:			
	(* Condition for event ball_in *)
	LD	e_0	
	JMPCN	after_check_e_0	
	LD	si_0	
	JMPC	check_e_0_0	
	LD	FALSE	
	ST	e_0	
	JMP	after_check_e_0	
check_e_0_0:			
	JMP	after_check_e_0	
check_e_1:			
	(* Condition for event ball_out *)
	LD	e_1	
	JMPCN	after_check_e_1	
	LD	si_2	
	JMPC	check_e_1_0	
	LD	FALSE	
	ST	e_1	
	JMP	after_check_e_1	
check_e_1_0:			
	JMP	after_check_e_1	
check_e_2:			
	(* Condition for event enter_ball *)
	LD	e_2	
	JMPCN	after_check_e_2	
	LD	si_24	
	JMPCN	check_e_2_0	
	LD	FALSE	
	ST	e_2	
	JMP	after_check_e_2	
check_e_2_0:			
	LD	si_0	
	JMPCN	check_e_2_1	
	LD	FALSE	
	ST	e_2	
	JMP	after_check_e_2	
check_e_2_1:			
	JMP	after_check_e_2	
check_e_3:			
	(* Condition for event exit_ball *)
	LD	e_3	
	JMPCN	after_check_e_3	
	LD	si_1	
	JMPC	check_e_3_0	
	LD	FALSE	
	ST	e_3	
	JMP	after_check_e_3	
check_e_3_0:			
	JMP	after_check_e_3	
	(* The actions *)
do_e_0:			
	(* Action for event ball_in *)
	LD	FALSE	
	ST	so_0	
	JMP	after_do_e_0	
do_e_1:			
	(* Action for event ball_out *)
	LD	FALSE	
	ST	so_1	
	JMP	after_do_e_1	
do_e_2:			
	(* Action for event enter_ball *)
	LD	TRUE	
	ST	so_0	
	JMP	after_do_e_2	
do_e_3:			
	(* Action for event exit_ball *)
	LD	TRUE	
	ST	so_1	
	JMP	after_do_e_3	
end:			
END_PROGRAM
(* JAVA_BLOCKS for printing (no newline)* )
(*=====================================*)

JAVA_BLOCK JPrintWSTRING
	VAR_IN_OUT
		output: WSTRING;
	END_VAR
END_JAVA_BLOCK
FUNCTION_BLOCK PrintWSTRING
	VAR_IN_OUT
		output: WSTRING;
	END_VAR
	VAR
		jblock: JPrintWSTRING;
	END_VAR
	LD output
	ST jblock.output
	CAL jblock
END_FUNCTION_BLOCK

JAVA_BLOCK JPrintDINT
	VAR_IN_OUT
		output: DINT;
	END_VAR
END_JAVA_BLOCK
FUNCTION_BLOCK PrintDINT
	VAR_IN_OUT
		output: DINT;
	END_VAR
	VAR
		jblock: JPrintDINT;
	END_VAR
	LD output
	ST jblock.output
	CAL jblock
END_FUNCTION_BLOCK
JAVA_BLOCK JPrintREAL
	VAR_IN_OUT
		output:REAL;
	END_VAR
END_JAVA_BLOCK
FUNCTION_BLOCK PrintREAL
	VAR_IN_OUT
		output:REAL;
	END_VAR
	VAR
		jblock:JPrintREAL;
	END_VAR
	LD output
	ST jblock.output
	CAL jblock
END_FUNCTION_BLOCK

JAVA_BLOCK JPrintBOOL
	VAR_IN_OUT
		output: BOOL;
	END_VAR
END_JAVA_BLOCK
FUNCTION_BLOCK PrintBOOL
	VAR_IN_OUT
		output: BOOL;
	END_VAR
	VAR
		jblock: JPrintBOOL;
	END_VAR
	LD output
	ST jblock.output
	CAL jblock
END_FUNCTION_BLOCK

(* JAVA_BLOCKS for printing (newline) *)
(*=====================================*)

JAVA_BLOCK JPrintlnWSTRING
	VAR_IN_OUT
		output: WSTRING;
	END_VAR
END_JAVA_BLOCK
FUNCTION_BLOCK PrintlnWSTRING
	VAR_IN_OUT
		output: WSTRING;
	END_VAR
	VAR
		jblock: JPrintlnWSTRING;
	END_VAR
	LD output
	ST jblock.output
	CAL jblock
END_FUNCTION_BLOCK

JAVA_BLOCK JPrintlnDINT
	VAR_IN_OUT
		output: DINT;
	END_VAR
END_JAVA_BLOCK
FUNCTION_BLOCK PrintlnDINT
	VAR_IN_OUT
		output: DINT;
	END_VAR
	VAR
		jblock: JPrintlnDINT;
	END_VAR
	LD output
	ST jblock.output
	CAL jblock
END_FUNCTION_BLOCK

JAVA_BLOCK JPrintlnREAL
	VAR_IN_OUT
		output:REAL;
	END_VAR
END_JAVA_BLOCK
FUNCTION_BLOCK PrintlnREAL
	VAR_IN_OUT
		output:REAL;
	END_VAR
	VAR
		jblock:JPrintlnREAL;
	END_VAR
	LD output
	ST jblock.output
	CAL jblock
END_FUNCTION_BLOCK

JAVA_BLOCK JPrintlnBOOL
	VAR_IN_OUT
		output: BOOL;
	END_VAR
END_JAVA_BLOCK
FUNCTION_BLOCK PrintlnBOOL
	VAR_IN_OUT
		output: BOOL;
	END_VAR
	VAR
		jblock: JPrintlnBOOL;
	END_VAR
	LD output
	ST jblock.output
	CAL jblock
END_FUNCTION_BLOCK

/*
 * Supremica Software License Agreement
 *
 * The Supremica software is not in the public domain
 * However, it is freely available without fee for education,
 * research, and non-profit purposes.  By obtaining copies of
 * this and other files that comprise the Supremica software,
 * you, the Licensee, agree to abide by the following
 * conditions and understandings with respect to the
 * copyrighted software:
 *
 * The software is copyrighted in the name of Supremica,
 * and ownership of the software remains with Supremica.
 *
 * Permission to use, copy, and modify this software and its
 * documentation for education, research, and non-profit
 * purposes is hereby granted to Licensee, provided that the
 * copyright notice, the original author's names and unit
 * identification, and this permission notice appear on all
 * such copies, and that no charge be made for such copies.
 * Any entity desiring permission to incorporate this software
 * into commercial products or to use it for commercial
 * purposes should contact:
 *
 * Knut Akesson (KA), knut@supremica.org
 * Supremica,
 * Haradsgatan 26A
 * 431 42 Molndal
 * SWEDEN
 *
 * to discuss license terms. No cost evaluation licenses are
 * available.
 *
 * Licensee may not use the name, logo, or any other symbol
 * of Supremica nor the names of any of its employees nor
 * any adaptation thereof in advertising or publicity
 * pertaining to the software without specific prior written
 * approval of the Supremica.
 *
 * SUPREMICA AND KA MAKES NO REPRESENTATIONS ABOUT THE
 * SUITABILITY OF THE SOFTWARE FOR ANY PURPOSE.
 * IT IS PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY.
 *
 * Supremica or KA shall not be liable for any damages
 * suffered by Licensee from the use of this software.
 *
 * Supremica is owned and represented by KA.
 */
import org.supremica.functionblocks.model.*;


ServiceFBInstance serviceFB = (ServiceFBInstance) serviceFB;
Map serviceState = (Map) serviceState;
Event serviceEvent = (Event) serviceEvent;
Variables serviceVariables = (Variables) serviceVariables;


if (serviceInitialize)
{
	System.out.println("IO_READER.bsh(" + serviceFB.getName() + "): Initialization");
	serviceState = new HashMap();

	// create service thread
	reader = readerThread(serviceFB);
	serviceState.put("reader", reader);
	new Thread(reader).start();
}
else
{

	String eventName  = ((Event) serviceEvent).getName();

	if (eventName.equals("REQ"))
	{ 	
		int inputSignal = ((IntegerVariable) serviceVariables.getVariable("INPUT")).getValue();
		System.out.println("IO_READER.bsh(" + serviceFB.getName() + "): REQ event received with INPUT " + inputSignal);		
		serviceState.get("reader").readInput(inputSignal);
	}
}

//=================================================================================================

readerThread(SerivceFBInstance serviceFB)
{

	public synchronized void readInput(int input)
	{
		notify();
	}

	public synchronized void run()
	{
		wait();
		((BooleanVariable) serviceVariables.getVariable("VALUE")).setValue(true);		
		System.out.println("IO_READER.bsh(" + serviceFB.getName() + "): Sending CNF event");		
		serviceFBInstance.sendEvent("CNF");	
	}

	return this;
}

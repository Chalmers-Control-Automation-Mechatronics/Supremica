import org.supremica.functionblocks.model.*;
import org.supremica.functionblocks.model.services.DelayThread;


ServiceFBInstance serviceFB = (ServiceFBInstance) serviceFB;
Map serviceState = (Map) serviceState;
Event serviceEvent = (Event) serviceEvent;
Variables serviceVariables = (Variables) serviceVariables;


if (serviceInitialize)
{

	System.out.println("E_DELAY.bsh(" + serviceFB.getName() + "): Initialization");
	serviceState = new HashMap();

	// flag for discarding incoming events
	serviceState.put("delaying", new Boolean(false));

	// create service thread
	Thread delayThread = new DelayThread(serviceFB);
	serviceState.put("delayThread", delayThread);
	delayThread.start();

}
else
{

	String eventName  = ((Event) serviceEvent).getName();

	if (eventName.equals("START"))
	{ 
		if (((Boolean) serviceState.get("delaying")).booleanValue())
		{
			System.out.println("E_DELAY.bsh(" + serviceFB.getName() + "): Discarding START event");
			return;
		}
		
		System.out.println("E_DELAY.bsh(" + serviceFB.getName() + "): START event received");
		int delayTime = ((IntegerVariable) serviceVariables.getVariable("DT")).getValue().intValue();
		serviceState.get("delayThread").setDelayTime(delayTime);	
		serviceState.get("delayThread").startDelay();
		serviceState.put("delaying", new Boolean(true));
		
	}
	else if (eventName.equals("STOP"))
	{	
		System.out.println("E_DELAY.bsh(" + serviceFB.getName() + "): STOP event received");
		serviceState.get("delayThread").stopDelay();
		serviceState.put("delaying", new Boolean(false));		
	}
}
